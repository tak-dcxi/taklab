/**
 * @license
 * Copyright 2010-2021 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
!(function (t, e) {
  'object' == typeof exports && 'undefined' != typeof module
    ? e(exports)
    : 'function' == typeof define && define.amd
    ? define(['exports'], e)
    : e(((t = 'undefined' != typeof globalThis ? globalThis : t || self).THREE = {}))
})(this, function (t) {
  'use strict'
  const e = '137dev',
    n = 100,
    i = 301,
    r = 302,
    a = 306,
    s = 1e3,
    o = 1001,
    l = 1002,
    c = 1003,
    h = 1006,
    u = 1008,
    d = 1009,
    p = 1012,
    m = 1014,
    f = 1015,
    g = 1016,
    v = 1020,
    _ = 1023,
    x = 1026,
    M = 1027,
    y = 33776,
    S = 33777,
    b = 33778,
    w = 33779,
    T = 3e3,
    E = 3001,
    L = 7680,
    A = '300 es',
    C = 1035,
    D = []
  for (let t = 0; t < 256; t++) D[t] = (t < 16 ? '0' : '') + t.toString(16)
  const R = Math.PI / 180,
    P = 180 / Math.PI
  function I() {
    const t = (4294967295 * Math.random()) | 0,
      e = (4294967295 * Math.random()) | 0,
      n = (4294967295 * Math.random()) | 0,
      i = (4294967295 * Math.random()) | 0
    return (
      D[255 & t] +
      D[(t >> 8) & 255] +
      D[(t >> 16) & 255] +
      D[(t >> 24) & 255] +
      '-' +
      D[255 & e] +
      D[(e >> 8) & 255] +
      '-' +
      D[((e >> 16) & 15) | 64] +
      D[(e >> 24) & 255] +
      '-' +
      D[(63 & n) | 128] +
      D[(n >> 8) & 255] +
      '-' +
      D[(n >> 16) & 255] +
      D[(n >> 24) & 255] +
      D[255 & i] +
      D[(i >> 8) & 255] +
      D[(i >> 16) & 255] +
      D[(i >> 24) & 255]
    ).toUpperCase()
  }
  function N(t, e, n) {
    return Math.max(e, Math.min(n, t))
  }
  function z(t, e, n) {
    return (1 - n) * t + n * e
  }
  function O(t) {
    return 0 == (t & (t - 1)) && 0 !== t
  }
  function U(t) {
    return Math.pow(2, Math.floor(Math.log(t) / Math.LN2))
  }
  class F {
    constructor(t = 0, e = 0, n = 0, i = 1) {
      ;(this._x = t), (this._y = e), (this._z = n), (this._w = i)
    }
    static slerp(t, e, n, i) {
      return (
        console.warn(
          'THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.'
        ),
        n.slerpQuaternions(t, e, i)
      )
    }
    static slerpFlat(t, e, n, i, r, a, s) {
      let o = n[i + 0],
        l = n[i + 1],
        c = n[i + 2],
        h = n[i + 3]
      const u = r[a + 0],
        d = r[a + 1],
        p = r[a + 2],
        m = r[a + 3]
      if (0 === s) return (t[e + 0] = o), (t[e + 1] = l), (t[e + 2] = c), void (t[e + 3] = h)
      if (1 === s) return (t[e + 0] = u), (t[e + 1] = d), (t[e + 2] = p), void (t[e + 3] = m)
      if (h !== m || o !== u || l !== d || c !== p) {
        let t = 1 - s
        const e = o * u + l * d + c * p + h * m,
          n = e >= 0 ? 1 : -1,
          i = 1 - e * e
        if (i > Number.EPSILON) {
          const r = Math.sqrt(i),
            a = Math.atan2(r, e * n)
          ;(t = Math.sin(t * a) / r), (s = Math.sin(s * a) / r)
        }
        const r = s * n
        if (((o = o * t + u * r), (l = l * t + d * r), (c = c * t + p * r), (h = h * t + m * r), t === 1 - s)) {
          const t = 1 / Math.sqrt(o * o + l * l + c * c + h * h)
          ;(o *= t), (l *= t), (c *= t), (h *= t)
        }
      }
      ;(t[e] = o), (t[e + 1] = l), (t[e + 2] = c), (t[e + 3] = h)
    }
    static multiplyQuaternionsFlat(t, e, n, i, r, a) {
      const s = n[i],
        o = n[i + 1],
        l = n[i + 2],
        c = n[i + 3],
        h = r[a],
        u = r[a + 1],
        d = r[a + 2],
        p = r[a + 3]
      return (
        (t[e] = s * p + c * h + o * d - l * u),
        (t[e + 1] = o * p + c * u + l * h - s * d),
        (t[e + 2] = l * p + c * d + s * u - o * h),
        (t[e + 3] = c * p - s * h - o * u - l * d),
        t
      )
    }
    get x() {
      return this._x
    }
    set x(t) {
      ;(this._x = t), this._onChangeCallback()
    }
    get y() {
      return this._y
    }
    set y(t) {
      ;(this._y = t), this._onChangeCallback()
    }
    get z() {
      return this._z
    }
    set z(t) {
      ;(this._z = t), this._onChangeCallback()
    }
    get w() {
      return this._w
    }
    set w(t) {
      ;(this._w = t), this._onChangeCallback()
    }
    set(t, e, n, i) {
      return (this._x = t), (this._y = e), (this._z = n), (this._w = i), this._onChangeCallback(), this
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._w)
    }
    copy(t) {
      return (this._x = t.x), (this._y = t.y), (this._z = t.z), (this._w = t.w), this._onChangeCallback(), this
    }
    setFromEuler(t, e) {
      if (!t || !t.isEuler)
        throw new Error(
          'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.'
        )
      const n = t._x,
        i = t._y,
        r = t._z,
        a = t._order,
        s = Math.cos,
        o = Math.sin,
        l = s(n / 2),
        c = s(i / 2),
        h = s(r / 2),
        u = o(n / 2),
        d = o(i / 2),
        p = o(r / 2)
      switch (a) {
        case 'XYZ':
          ;(this._x = u * c * h + l * d * p),
            (this._y = l * d * h - u * c * p),
            (this._z = l * c * p + u * d * h),
            (this._w = l * c * h - u * d * p)
          break
        case 'YXZ':
          ;(this._x = u * c * h + l * d * p),
            (this._y = l * d * h - u * c * p),
            (this._z = l * c * p - u * d * h),
            (this._w = l * c * h + u * d * p)
          break
        case 'ZXY':
          ;(this._x = u * c * h - l * d * p),
            (this._y = l * d * h + u * c * p),
            (this._z = l * c * p + u * d * h),
            (this._w = l * c * h - u * d * p)
          break
        case 'ZYX':
          ;(this._x = u * c * h - l * d * p),
            (this._y = l * d * h + u * c * p),
            (this._z = l * c * p - u * d * h),
            (this._w = l * c * h + u * d * p)
          break
        case 'YZX':
          ;(this._x = u * c * h + l * d * p),
            (this._y = l * d * h + u * c * p),
            (this._z = l * c * p - u * d * h),
            (this._w = l * c * h - u * d * p)
          break
        case 'XZY':
          ;(this._x = u * c * h - l * d * p),
            (this._y = l * d * h - u * c * p),
            (this._z = l * c * p + u * d * h),
            (this._w = l * c * h + u * d * p)
          break
        default:
          console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + a)
      }
      return !1 !== e && this._onChangeCallback(), this
    }
    setFromAxisAngle(t, e) {
      const n = e / 2,
        i = Math.sin(n)
      return (
        (this._x = t.x * i),
        (this._y = t.y * i),
        (this._z = t.z * i),
        (this._w = Math.cos(n)),
        this._onChangeCallback(),
        this
      )
    }
    setFromRotationMatrix(t) {
      const e = t.elements,
        n = e[0],
        i = e[4],
        r = e[8],
        a = e[1],
        s = e[5],
        o = e[9],
        l = e[2],
        c = e[6],
        h = e[10],
        u = n + s + h
      if (u > 0) {
        const t = 0.5 / Math.sqrt(u + 1)
        ;(this._w = 0.25 / t), (this._x = (c - o) * t), (this._y = (r - l) * t), (this._z = (a - i) * t)
      } else if (n > s && n > h) {
        const t = 2 * Math.sqrt(1 + n - s - h)
        ;(this._w = (c - o) / t), (this._x = 0.25 * t), (this._y = (i + a) / t), (this._z = (r + l) / t)
      } else if (s > h) {
        const t = 2 * Math.sqrt(1 + s - n - h)
        ;(this._w = (r - l) / t), (this._x = (i + a) / t), (this._y = 0.25 * t), (this._z = (o + c) / t)
      } else {
        const t = 2 * Math.sqrt(1 + h - n - s)
        ;(this._w = (a - i) / t), (this._x = (r + l) / t), (this._y = (o + c) / t), (this._z = 0.25 * t)
      }
      return this._onChangeCallback(), this
    }
    setFromUnitVectors(t, e) {
      let n = t.dot(e) + 1
      return (
        n < Number.EPSILON
          ? ((n = 0),
            Math.abs(t.x) > Math.abs(t.z)
              ? ((this._x = -t.y), (this._y = t.x), (this._z = 0), (this._w = n))
              : ((this._x = 0), (this._y = -t.z), (this._z = t.y), (this._w = n)))
          : ((this._x = t.y * e.z - t.z * e.y),
            (this._y = t.z * e.x - t.x * e.z),
            (this._z = t.x * e.y - t.y * e.x),
            (this._w = n)),
        this.normalize()
      )
    }
    angleTo(t) {
      return 2 * Math.acos(Math.abs(N(this.dot(t), -1, 1)))
    }
    rotateTowards(t, e) {
      const n = this.angleTo(t)
      if (0 === n) return this
      const i = Math.min(1, e / n)
      return this.slerp(t, i), this
    }
    identity() {
      return this.set(0, 0, 0, 1)
    }
    invert() {
      return this.conjugate()
    }
    conjugate() {
      return (this._x *= -1), (this._y *= -1), (this._z *= -1), this._onChangeCallback(), this
    }
    dot(t) {
      return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w
    }
    lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w
    }
    length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w)
    }
    normalize() {
      let t = this.length()
      return (
        0 === t
          ? ((this._x = 0), (this._y = 0), (this._z = 0), (this._w = 1))
          : ((t = 1 / t),
            (this._x = this._x * t),
            (this._y = this._y * t),
            (this._z = this._z * t),
            (this._w = this._w * t)),
        this._onChangeCallback(),
        this
      )
    }
    multiply(t, e) {
      return void 0 !== e
        ? (console.warn(
            'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.'
          ),
          this.multiplyQuaternions(t, e))
        : this.multiplyQuaternions(this, t)
    }
    premultiply(t) {
      return this.multiplyQuaternions(t, this)
    }
    multiplyQuaternions(t, e) {
      const n = t._x,
        i = t._y,
        r = t._z,
        a = t._w,
        s = e._x,
        o = e._y,
        l = e._z,
        c = e._w
      return (
        (this._x = n * c + a * s + i * l - r * o),
        (this._y = i * c + a * o + r * s - n * l),
        (this._z = r * c + a * l + n * o - i * s),
        (this._w = a * c - n * s - i * o - r * l),
        this._onChangeCallback(),
        this
      )
    }
    slerp(t, e) {
      if (0 === e) return this
      if (1 === e) return this.copy(t)
      const n = this._x,
        i = this._y,
        r = this._z,
        a = this._w
      let s = a * t._w + n * t._x + i * t._y + r * t._z
      if (
        (s < 0 ? ((this._w = -t._w), (this._x = -t._x), (this._y = -t._y), (this._z = -t._z), (s = -s)) : this.copy(t),
        s >= 1)
      )
        return (this._w = a), (this._x = n), (this._y = i), (this._z = r), this
      const o = 1 - s * s
      if (o <= Number.EPSILON) {
        const t = 1 - e
        return (
          (this._w = t * a + e * this._w),
          (this._x = t * n + e * this._x),
          (this._y = t * i + e * this._y),
          (this._z = t * r + e * this._z),
          this.normalize(),
          this._onChangeCallback(),
          this
        )
      }
      const l = Math.sqrt(o),
        c = Math.atan2(l, s),
        h = Math.sin((1 - e) * c) / l,
        u = Math.sin(e * c) / l
      return (
        (this._w = a * h + this._w * u),
        (this._x = n * h + this._x * u),
        (this._y = i * h + this._y * u),
        (this._z = r * h + this._z * u),
        this._onChangeCallback(),
        this
      )
    }
    slerpQuaternions(t, e, n) {
      return this.copy(t).slerp(e, n)
    }
    random() {
      const t = Math.random(),
        e = Math.sqrt(1 - t),
        n = Math.sqrt(t),
        i = 2 * Math.PI * Math.random(),
        r = 2 * Math.PI * Math.random()
      return this.set(e * Math.cos(i), n * Math.sin(r), n * Math.cos(r), e * Math.sin(i))
    }
    equals(t) {
      return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w
    }
    fromArray(t, e = 0) {
      return (
        (this._x = t[e]),
        (this._y = t[e + 1]),
        (this._z = t[e + 2]),
        (this._w = t[e + 3]),
        this._onChangeCallback(),
        this
      )
    }
    toArray(t = [], e = 0) {
      return (t[e] = this._x), (t[e + 1] = this._y), (t[e + 2] = this._z), (t[e + 3] = this._w), t
    }
    fromBufferAttribute(t, e) {
      return (this._x = t.getX(e)), (this._y = t.getY(e)), (this._z = t.getZ(e)), (this._w = t.getW(e)), this
    }
    _onChange(t) {
      return (this._onChangeCallback = t), this
    }
    _onChangeCallback() {}
  }
  F.prototype.isQuaternion = !0
  class B {
    constructor(t = 0, e = 0, n = 0) {
      ;(this.x = t), (this.y = e), (this.z = n)
    }
    set(t, e, n) {
      return void 0 === n && (n = this.z), (this.x = t), (this.y = e), (this.z = n), this
    }
    setScalar(t) {
      return (this.x = t), (this.y = t), (this.z = t), this
    }
    setX(t) {
      return (this.x = t), this
    }
    setY(t) {
      return (this.y = t), this
    }
    setZ(t) {
      return (this.z = t), this
    }
    setComponent(t, e) {
      switch (t) {
        case 0:
          this.x = e
          break
        case 1:
          this.y = e
          break
        case 2:
          this.z = e
          break
        default:
          throw new Error('index is out of range: ' + t)
      }
      return this
    }
    getComponent(t) {
      switch (t) {
        case 0:
          return this.x
        case 1:
          return this.y
        case 2:
          return this.z
        default:
          throw new Error('index is out of range: ' + t)
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z)
    }
    copy(t) {
      return (this.x = t.x), (this.y = t.y), (this.z = t.z), this
    }
    add(t, e) {
      return void 0 !== e
        ? (console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.'),
          this.addVectors(t, e))
        : ((this.x += t.x), (this.y += t.y), (this.z += t.z), this)
    }
    addScalar(t) {
      return (this.x += t), (this.y += t), (this.z += t), this
    }
    addVectors(t, e) {
      return (this.x = t.x + e.x), (this.y = t.y + e.y), (this.z = t.z + e.z), this
    }
    addScaledVector(t, e) {
      return (this.x += t.x * e), (this.y += t.y * e), (this.z += t.z * e), this
    }
    sub(t, e) {
      return void 0 !== e
        ? (console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.'),
          this.subVectors(t, e))
        : ((this.x -= t.x), (this.y -= t.y), (this.z -= t.z), this)
    }
    subScalar(t) {
      return (this.x -= t), (this.y -= t), (this.z -= t), this
    }
    subVectors(t, e) {
      return (this.x = t.x - e.x), (this.y = t.y - e.y), (this.z = t.z - e.z), this
    }
    multiply(t, e) {
      return void 0 !== e
        ? (console.warn(
            'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.'
          ),
          this.multiplyVectors(t, e))
        : ((this.x *= t.x), (this.y *= t.y), (this.z *= t.z), this)
    }
    multiplyScalar(t) {
      return (this.x *= t), (this.y *= t), (this.z *= t), this
    }
    multiplyVectors(t, e) {
      return (this.x = t.x * e.x), (this.y = t.y * e.y), (this.z = t.z * e.z), this
    }
    applyEuler(t) {
      return (
        (t && t.isEuler) ||
          console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.'),
        this.applyQuaternion(H.setFromEuler(t))
      )
    }
    applyAxisAngle(t, e) {
      return this.applyQuaternion(H.setFromAxisAngle(t, e))
    }
    applyMatrix3(t) {
      const e = this.x,
        n = this.y,
        i = this.z,
        r = t.elements
      return (
        (this.x = r[0] * e + r[3] * n + r[6] * i),
        (this.y = r[1] * e + r[4] * n + r[7] * i),
        (this.z = r[2] * e + r[5] * n + r[8] * i),
        this
      )
    }
    applyNormalMatrix(t) {
      return this.applyMatrix3(t).normalize()
    }
    applyMatrix4(t) {
      const e = this.x,
        n = this.y,
        i = this.z,
        r = t.elements,
        a = 1 / (r[3] * e + r[7] * n + r[11] * i + r[15])
      return (
        (this.x = (r[0] * e + r[4] * n + r[8] * i + r[12]) * a),
        (this.y = (r[1] * e + r[5] * n + r[9] * i + r[13]) * a),
        (this.z = (r[2] * e + r[6] * n + r[10] * i + r[14]) * a),
        this
      )
    }
    applyQuaternion(t) {
      const e = this.x,
        n = this.y,
        i = this.z,
        r = t.x,
        a = t.y,
        s = t.z,
        o = t.w,
        l = o * e + a * i - s * n,
        c = o * n + s * e - r * i,
        h = o * i + r * n - a * e,
        u = -r * e - a * n - s * i
      return (
        (this.x = l * o + u * -r + c * -s - h * -a),
        (this.y = c * o + u * -a + h * -r - l * -s),
        (this.z = h * o + u * -s + l * -a - c * -r),
        this
      )
    }
    project(t) {
      return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)
    }
    unproject(t) {
      return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)
    }
    transformDirection(t) {
      const e = this.x,
        n = this.y,
        i = this.z,
        r = t.elements
      return (
        (this.x = r[0] * e + r[4] * n + r[8] * i),
        (this.y = r[1] * e + r[5] * n + r[9] * i),
        (this.z = r[2] * e + r[6] * n + r[10] * i),
        this.normalize()
      )
    }
    divide(t) {
      return (this.x /= t.x), (this.y /= t.y), (this.z /= t.z), this
    }
    divideScalar(t) {
      return this.multiplyScalar(1 / t)
    }
    min(t) {
      return (this.x = Math.min(this.x, t.x)), (this.y = Math.min(this.y, t.y)), (this.z = Math.min(this.z, t.z)), this
    }
    max(t) {
      return (this.x = Math.max(this.x, t.x)), (this.y = Math.max(this.y, t.y)), (this.z = Math.max(this.z, t.z)), this
    }
    clamp(t, e) {
      return (
        (this.x = Math.max(t.x, Math.min(e.x, this.x))),
        (this.y = Math.max(t.y, Math.min(e.y, this.y))),
        (this.z = Math.max(t.z, Math.min(e.z, this.z))),
        this
      )
    }
    clampScalar(t, e) {
      return (
        (this.x = Math.max(t, Math.min(e, this.x))),
        (this.y = Math.max(t, Math.min(e, this.y))),
        (this.z = Math.max(t, Math.min(e, this.z))),
        this
      )
    }
    clampLength(t, e) {
      const n = this.length()
      return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
    }
    floor() {
      return (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), (this.z = Math.floor(this.z)), this
    }
    ceil() {
      return (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), (this.z = Math.ceil(this.z)), this
    }
    round() {
      return (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), (this.z = Math.round(this.z)), this
    }
    roundToZero() {
      return (
        (this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x)),
        (this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y)),
        (this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z)),
        this
      )
    }
    negate() {
      return (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), this
    }
    dot(t) {
      return this.x * t.x + this.y * t.y + this.z * t.z
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
    }
    normalize() {
      return this.divideScalar(this.length() || 1)
    }
    setLength(t) {
      return this.normalize().multiplyScalar(t)
    }
    lerp(t, e) {
      return (this.x += (t.x - this.x) * e), (this.y += (t.y - this.y) * e), (this.z += (t.z - this.z) * e), this
    }
    lerpVectors(t, e, n) {
      return (this.x = t.x + (e.x - t.x) * n), (this.y = t.y + (e.y - t.y) * n), (this.z = t.z + (e.z - t.z) * n), this
    }
    cross(t, e) {
      return void 0 !== e
        ? (console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.'),
          this.crossVectors(t, e))
        : this.crossVectors(this, t)
    }
    crossVectors(t, e) {
      const n = t.x,
        i = t.y,
        r = t.z,
        a = e.x,
        s = e.y,
        o = e.z
      return (this.x = i * o - r * s), (this.y = r * a - n * o), (this.z = n * s - i * a), this
    }
    projectOnVector(t) {
      const e = t.lengthSq()
      if (0 === e) return this.set(0, 0, 0)
      const n = t.dot(this) / e
      return this.copy(t).multiplyScalar(n)
    }
    projectOnPlane(t) {
      return G.copy(this).projectOnVector(t), this.sub(G)
    }
    reflect(t) {
      return this.sub(G.copy(t).multiplyScalar(2 * this.dot(t)))
    }
    angleTo(t) {
      const e = Math.sqrt(this.lengthSq() * t.lengthSq())
      if (0 === e) return Math.PI / 2
      const n = this.dot(t) / e
      return Math.acos(N(n, -1, 1))
    }
    distanceTo(t) {
      return Math.sqrt(this.distanceToSquared(t))
    }
    distanceToSquared(t) {
      const e = this.x - t.x,
        n = this.y - t.y,
        i = this.z - t.z
      return e * e + n * n + i * i
    }
    manhattanDistanceTo(t) {
      return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z)
    }
    setFromSpherical(t) {
      return this.setFromSphericalCoords(t.radius, t.phi, t.theta)
    }
    setFromSphericalCoords(t, e, n) {
      const i = Math.sin(e) * t
      return (this.x = i * Math.sin(n)), (this.y = Math.cos(e) * t), (this.z = i * Math.cos(n)), this
    }
    setFromCylindrical(t) {
      return this.setFromCylindricalCoords(t.radius, t.theta, t.y)
    }
    setFromCylindricalCoords(t, e, n) {
      return (this.x = t * Math.sin(e)), (this.y = n), (this.z = t * Math.cos(e)), this
    }
    setFromMatrixPosition(t) {
      const e = t.elements
      return (this.x = e[12]), (this.y = e[13]), (this.z = e[14]), this
    }
    setFromMatrixScale(t) {
      const e = this.setFromMatrixColumn(t, 0).length(),
        n = this.setFromMatrixColumn(t, 1).length(),
        i = this.setFromMatrixColumn(t, 2).length()
      return (this.x = e), (this.y = n), (this.z = i), this
    }
    setFromMatrixColumn(t, e) {
      return this.fromArray(t.elements, 4 * e)
    }
    setFromMatrix3Column(t, e) {
      return this.fromArray(t.elements, 3 * e)
    }
    equals(t) {
      return t.x === this.x && t.y === this.y && t.z === this.z
    }
    fromArray(t, e = 0) {
      return (this.x = t[e]), (this.y = t[e + 1]), (this.z = t[e + 2]), this
    }
    toArray(t = [], e = 0) {
      return (t[e] = this.x), (t[e + 1] = this.y), (t[e + 2] = this.z), t
    }
    fromBufferAttribute(t, e, n) {
      return (
        void 0 !== n && console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().'),
        (this.x = t.getX(e)),
        (this.y = t.getY(e)),
        (this.z = t.getZ(e)),
        this
      )
    }
    random() {
      return (this.x = Math.random()), (this.y = Math.random()), (this.z = Math.random()), this
    }
    randomDirection() {
      const t = 2 * (Math.random() - 0.5),
        e = Math.random() * Math.PI * 2,
        n = Math.sqrt(1 - t ** 2)
      return (this.x = n * Math.cos(e)), (this.y = n * Math.sin(e)), (this.z = t), this
    }
    *[Symbol.iterator]() {
      yield this.x, yield this.y, yield this.z
    }
  }
  B.prototype.isVector3 = !0
  const G = new B(),
    H = new F()
  class V {
    constructor(t = new B(1 / 0, 1 / 0, 1 / 0), e = new B(-1 / 0, -1 / 0, -1 / 0)) {
      ;(this.min = t), (this.max = e)
    }
    set(t, e) {
      return this.min.copy(t), this.max.copy(e), this
    }
    setFromArray(t) {
      let e = 1 / 0,
        n = 1 / 0,
        i = 1 / 0,
        r = -1 / 0,
        a = -1 / 0,
        s = -1 / 0
      for (let o = 0, l = t.length; o < l; o += 3) {
        const l = t[o],
          c = t[o + 1],
          h = t[o + 2]
        l < e && (e = l), c < n && (n = c), h < i && (i = h), l > r && (r = l), c > a && (a = c), h > s && (s = h)
      }
      return this.min.set(e, n, i), this.max.set(r, a, s), this
    }
    setFromBufferAttribute(t) {
      let e = 1 / 0,
        n = 1 / 0,
        i = 1 / 0,
        r = -1 / 0,
        a = -1 / 0,
        s = -1 / 0
      for (let o = 0, l = t.count; o < l; o++) {
        const l = t.getX(o),
          c = t.getY(o),
          h = t.getZ(o)
        l < e && (e = l), c < n && (n = c), h < i && (i = h), l > r && (r = l), c > a && (a = c), h > s && (s = h)
      }
      return this.min.set(e, n, i), this.max.set(r, a, s), this
    }
    setFromPoints(t) {
      this.makeEmpty()
      for (let e = 0, n = t.length; e < n; e++) this.expandByPoint(t[e])
      return this
    }
    setFromCenterAndSize(t, e) {
      const n = W.copy(e).multiplyScalar(0.5)
      return this.min.copy(t).sub(n), this.max.copy(t).add(n), this
    }
    setFromObject(t) {
      return this.makeEmpty(), this.expandByObject(t)
    }
    clone() {
      return new this.constructor().copy(this)
    }
    copy(t) {
      return this.min.copy(t.min), this.max.copy(t.max), this
    }
    makeEmpty() {
      return (this.min.x = this.min.y = this.min.z = 1 / 0), (this.max.x = this.max.y = this.max.z = -1 / 0), this
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z
    }
    getCenter(t) {
      return this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(0.5)
    }
    getSize(t) {
      return this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min)
    }
    expandByPoint(t) {
      return this.min.min(t), this.max.max(t), this
    }
    expandByVector(t) {
      return this.min.sub(t), this.max.add(t), this
    }
    expandByScalar(t) {
      return this.min.addScalar(-t), this.max.addScalar(t), this
    }
    expandByObject(t) {
      t.updateWorldMatrix(!1, !1)
      const e = t.geometry
      void 0 !== e &&
        (null === e.boundingBox && e.computeBoundingBox(),
        j.copy(e.boundingBox),
        j.applyMatrix4(t.matrixWorld),
        this.union(j))
      const n = t.children
      for (let t = 0, e = n.length; t < e; t++) this.expandByObject(n[t])
      return this
    }
    containsPoint(t) {
      return !(
        t.x < this.min.x ||
        t.x > this.max.x ||
        t.y < this.min.y ||
        t.y > this.max.y ||
        t.z < this.min.z ||
        t.z > this.max.z
      )
    }
    containsBox(t) {
      return (
        this.min.x <= t.min.x &&
        t.max.x <= this.max.x &&
        this.min.y <= t.min.y &&
        t.max.y <= this.max.y &&
        this.min.z <= t.min.z &&
        t.max.z <= this.max.z
      )
    }
    getParameter(t, e) {
      return e.set(
        (t.x - this.min.x) / (this.max.x - this.min.x),
        (t.y - this.min.y) / (this.max.y - this.min.y),
        (t.z - this.min.z) / (this.max.z - this.min.z)
      )
    }
    intersectsBox(t) {
      return !(
        t.max.x < this.min.x ||
        t.min.x > this.max.x ||
        t.max.y < this.min.y ||
        t.min.y > this.max.y ||
        t.max.z < this.min.z ||
        t.min.z > this.max.z
      )
    }
    intersectsSphere(t) {
      return this.clampPoint(t.center, W), W.distanceToSquared(t.center) <= t.radius * t.radius
    }
    intersectsPlane(t) {
      let e, n
      return (
        t.normal.x > 0
          ? ((e = t.normal.x * this.min.x), (n = t.normal.x * this.max.x))
          : ((e = t.normal.x * this.max.x), (n = t.normal.x * this.min.x)),
        t.normal.y > 0
          ? ((e += t.normal.y * this.min.y), (n += t.normal.y * this.max.y))
          : ((e += t.normal.y * this.max.y), (n += t.normal.y * this.min.y)),
        t.normal.z > 0
          ? ((e += t.normal.z * this.min.z), (n += t.normal.z * this.max.z))
          : ((e += t.normal.z * this.max.z), (n += t.normal.z * this.min.z)),
        e <= -t.constant && n >= -t.constant
      )
    }
    intersectsTriangle(t) {
      if (this.isEmpty()) return !1
      this.getCenter(Q),
        $.subVectors(this.max, Q),
        q.subVectors(t.a, Q),
        X.subVectors(t.b, Q),
        Y.subVectors(t.c, Q),
        Z.subVectors(X, q),
        J.subVectors(Y, X),
        K.subVectors(q, Y)
      let e = [
        0,
        -Z.z,
        Z.y,
        0,
        -J.z,
        J.y,
        0,
        -K.z,
        K.y,
        Z.z,
        0,
        -Z.x,
        J.z,
        0,
        -J.x,
        K.z,
        0,
        -K.x,
        -Z.y,
        Z.x,
        0,
        -J.y,
        J.x,
        0,
        -K.y,
        K.x,
        0,
      ]
      return (
        !!nt(e, q, X, Y, $) &&
        ((e = [1, 0, 0, 0, 1, 0, 0, 0, 1]),
        !!nt(e, q, X, Y, $) && (tt.crossVectors(Z, J), (e = [tt.x, tt.y, tt.z]), nt(e, q, X, Y, $)))
      )
    }
    clampPoint(t, e) {
      return e.copy(t).clamp(this.min, this.max)
    }
    distanceToPoint(t) {
      return W.copy(t).clamp(this.min, this.max).sub(t).length()
    }
    getBoundingSphere(t) {
      return this.getCenter(t.center), (t.radius = 0.5 * this.getSize(W).length()), t
    }
    intersect(t) {
      return this.min.max(t.min), this.max.min(t.max), this.isEmpty() && this.makeEmpty(), this
    }
    union(t) {
      return this.min.min(t.min), this.max.max(t.max), this
    }
    applyMatrix4(t) {
      return (
        this.isEmpty() ||
          (k[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t),
          k[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t),
          k[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t),
          k[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t),
          k[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t),
          k[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t),
          k[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t),
          k[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t),
          this.setFromPoints(k)),
        this
      )
    }
    translate(t) {
      return this.min.add(t), this.max.add(t), this
    }
    equals(t) {
      return t.min.equals(this.min) && t.max.equals(this.max)
    }
  }
  V.prototype.isBox3 = !0
  const k = [new B(), new B(), new B(), new B(), new B(), new B(), new B(), new B()],
    W = new B(),
    j = new V(),
    q = new B(),
    X = new B(),
    Y = new B(),
    Z = new B(),
    J = new B(),
    K = new B(),
    Q = new B(),
    $ = new B(),
    tt = new B(),
    et = new B()
  function nt(t, e, n, i, r) {
    for (let a = 0, s = t.length - 3; a <= s; a += 3) {
      et.fromArray(t, a)
      const s = r.x * Math.abs(et.x) + r.y * Math.abs(et.y) + r.z * Math.abs(et.z),
        o = e.dot(et),
        l = n.dot(et),
        c = i.dot(et)
      if (Math.max(-Math.max(o, l, c), Math.min(o, l, c)) > s) return !1
    }
    return !0
  }
  const it = new V(),
    rt = new B(),
    at = new B(),
    st = new B()
  class ot {
    constructor(t = new B(), e = -1) {
      ;(this.center = t), (this.radius = e)
    }
    set(t, e) {
      return this.center.copy(t), (this.radius = e), this
    }
    setFromPoints(t, e) {
      const n = this.center
      void 0 !== e ? n.copy(e) : it.setFromPoints(t).getCenter(n)
      let i = 0
      for (let e = 0, r = t.length; e < r; e++) i = Math.max(i, n.distanceToSquared(t[e]))
      return (this.radius = Math.sqrt(i)), this
    }
    copy(t) {
      return this.center.copy(t.center), (this.radius = t.radius), this
    }
    isEmpty() {
      return this.radius < 0
    }
    makeEmpty() {
      return this.center.set(0, 0, 0), (this.radius = -1), this
    }
    containsPoint(t) {
      return t.distanceToSquared(this.center) <= this.radius * this.radius
    }
    distanceToPoint(t) {
      return t.distanceTo(this.center) - this.radius
    }
    intersectsSphere(t) {
      const e = this.radius + t.radius
      return t.center.distanceToSquared(this.center) <= e * e
    }
    intersectsBox(t) {
      return t.intersectsSphere(this)
    }
    intersectsPlane(t) {
      return Math.abs(t.distanceToPoint(this.center)) <= this.radius
    }
    clampPoint(t, e) {
      const n = this.center.distanceToSquared(t)
      return (
        e.copy(t),
        n > this.radius * this.radius &&
          (e.sub(this.center).normalize(), e.multiplyScalar(this.radius).add(this.center)),
        e
      )
    }
    getBoundingBox(t) {
      return this.isEmpty() ? (t.makeEmpty(), t) : (t.set(this.center, this.center), t.expandByScalar(this.radius), t)
    }
    applyMatrix4(t) {
      return this.center.applyMatrix4(t), (this.radius = this.radius * t.getMaxScaleOnAxis()), this
    }
    translate(t) {
      return this.center.add(t), this
    }
    expandByPoint(t) {
      st.subVectors(t, this.center)
      const e = st.lengthSq()
      if (e > this.radius * this.radius) {
        const t = Math.sqrt(e),
          n = 0.5 * (t - this.radius)
        this.center.add(st.multiplyScalar(n / t)), (this.radius += n)
      }
      return this
    }
    union(t) {
      return (
        !0 === this.center.equals(t.center)
          ? at.set(0, 0, 1).multiplyScalar(t.radius)
          : at.subVectors(t.center, this.center).normalize().multiplyScalar(t.radius),
        this.expandByPoint(rt.copy(t.center).add(at)),
        this.expandByPoint(rt.copy(t.center).sub(at)),
        this
      )
    }
    equals(t) {
      return t.center.equals(this.center) && t.radius === this.radius
    }
    clone() {
      return new this.constructor().copy(this)
    }
  }
  class lt {
    constructor() {
      ;(this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1]),
        arguments.length > 0 &&
          console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.')
    }
    set(t, e, n, i, r, a, s, o, l) {
      const c = this.elements
      return (
        (c[0] = t), (c[1] = i), (c[2] = s), (c[3] = e), (c[4] = r), (c[5] = o), (c[6] = n), (c[7] = a), (c[8] = l), this
      )
    }
    identity() {
      return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this
    }
    copy(t) {
      const e = this.elements,
        n = t.elements
      return (
        (e[0] = n[0]),
        (e[1] = n[1]),
        (e[2] = n[2]),
        (e[3] = n[3]),
        (e[4] = n[4]),
        (e[5] = n[5]),
        (e[6] = n[6]),
        (e[7] = n[7]),
        (e[8] = n[8]),
        this
      )
    }
    extractBasis(t, e, n) {
      return t.setFromMatrix3Column(this, 0), e.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this
    }
    setFromMatrix4(t) {
      const e = t.elements
      return this.set(e[0], e[4], e[8], e[1], e[5], e[9], e[2], e[6], e[10]), this
    }
    multiply(t) {
      return this.multiplyMatrices(this, t)
    }
    premultiply(t) {
      return this.multiplyMatrices(t, this)
    }
    multiplyMatrices(t, e) {
      const n = t.elements,
        i = e.elements,
        r = this.elements,
        a = n[0],
        s = n[3],
        o = n[6],
        l = n[1],
        c = n[4],
        h = n[7],
        u = n[2],
        d = n[5],
        p = n[8],
        m = i[0],
        f = i[3],
        g = i[6],
        v = i[1],
        _ = i[4],
        x = i[7],
        M = i[2],
        y = i[5],
        S = i[8]
      return (
        (r[0] = a * m + s * v + o * M),
        (r[3] = a * f + s * _ + o * y),
        (r[6] = a * g + s * x + o * S),
        (r[1] = l * m + c * v + h * M),
        (r[4] = l * f + c * _ + h * y),
        (r[7] = l * g + c * x + h * S),
        (r[2] = u * m + d * v + p * M),
        (r[5] = u * f + d * _ + p * y),
        (r[8] = u * g + d * x + p * S),
        this
      )
    }
    multiplyScalar(t) {
      const e = this.elements
      return (
        (e[0] *= t),
        (e[3] *= t),
        (e[6] *= t),
        (e[1] *= t),
        (e[4] *= t),
        (e[7] *= t),
        (e[2] *= t),
        (e[5] *= t),
        (e[8] *= t),
        this
      )
    }
    determinant() {
      const t = this.elements,
        e = t[0],
        n = t[1],
        i = t[2],
        r = t[3],
        a = t[4],
        s = t[5],
        o = t[6],
        l = t[7],
        c = t[8]
      return e * a * c - e * s * l - n * r * c + n * s * o + i * r * l - i * a * o
    }
    invert() {
      const t = this.elements,
        e = t[0],
        n = t[1],
        i = t[2],
        r = t[3],
        a = t[4],
        s = t[5],
        o = t[6],
        l = t[7],
        c = t[8],
        h = c * a - s * l,
        u = s * o - c * r,
        d = l * r - a * o,
        p = e * h + n * u + i * d
      if (0 === p) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0)
      const m = 1 / p
      return (
        (t[0] = h * m),
        (t[1] = (i * l - c * n) * m),
        (t[2] = (s * n - i * a) * m),
        (t[3] = u * m),
        (t[4] = (c * e - i * o) * m),
        (t[5] = (i * r - s * e) * m),
        (t[6] = d * m),
        (t[7] = (n * o - l * e) * m),
        (t[8] = (a * e - n * r) * m),
        this
      )
    }
    transpose() {
      let t
      const e = this.elements
      return (
        (t = e[1]),
        (e[1] = e[3]),
        (e[3] = t),
        (t = e[2]),
        (e[2] = e[6]),
        (e[6] = t),
        (t = e[5]),
        (e[5] = e[7]),
        (e[7] = t),
        this
      )
    }
    getNormalMatrix(t) {
      return this.setFromMatrix4(t).invert().transpose()
    }
    transposeIntoArray(t) {
      const e = this.elements
      return (
        (t[0] = e[0]),
        (t[1] = e[3]),
        (t[2] = e[6]),
        (t[3] = e[1]),
        (t[4] = e[4]),
        (t[5] = e[7]),
        (t[6] = e[2]),
        (t[7] = e[5]),
        (t[8] = e[8]),
        this
      )
    }
    setUvTransform(t, e, n, i, r, a, s) {
      const o = Math.cos(r),
        l = Math.sin(r)
      return (
        this.set(n * o, n * l, -n * (o * a + l * s) + a + t, -i * l, i * o, -i * (-l * a + o * s) + s + e, 0, 0, 1),
        this
      )
    }
    scale(t, e) {
      const n = this.elements
      return (n[0] *= t), (n[3] *= t), (n[6] *= t), (n[1] *= e), (n[4] *= e), (n[7] *= e), this
    }
    rotate(t) {
      const e = Math.cos(t),
        n = Math.sin(t),
        i = this.elements,
        r = i[0],
        a = i[3],
        s = i[6],
        o = i[1],
        l = i[4],
        c = i[7]
      return (
        (i[0] = e * r + n * o),
        (i[3] = e * a + n * l),
        (i[6] = e * s + n * c),
        (i[1] = -n * r + e * o),
        (i[4] = -n * a + e * l),
        (i[7] = -n * s + e * c),
        this
      )
    }
    translate(t, e) {
      const n = this.elements
      return (
        (n[0] += t * n[2]),
        (n[3] += t * n[5]),
        (n[6] += t * n[8]),
        (n[1] += e * n[2]),
        (n[4] += e * n[5]),
        (n[7] += e * n[8]),
        this
      )
    }
    equals(t) {
      const e = this.elements,
        n = t.elements
      for (let t = 0; t < 9; t++) if (e[t] !== n[t]) return !1
      return !0
    }
    fromArray(t, e = 0) {
      for (let n = 0; n < 9; n++) this.elements[n] = t[n + e]
      return this
    }
    toArray(t = [], e = 0) {
      const n = this.elements
      return (
        (t[e] = n[0]),
        (t[e + 1] = n[1]),
        (t[e + 2] = n[2]),
        (t[e + 3] = n[3]),
        (t[e + 4] = n[4]),
        (t[e + 5] = n[5]),
        (t[e + 6] = n[6]),
        (t[e + 7] = n[7]),
        (t[e + 8] = n[8]),
        t
      )
    }
    clone() {
      return new this.constructor().fromArray(this.elements)
    }
  }
  lt.prototype.isMatrix3 = !0
  const ct = new B(),
    ht = new B(),
    ut = new lt()
  class dt {
    constructor(t = new B(1, 0, 0), e = 0) {
      ;(this.normal = t), (this.constant = e)
    }
    set(t, e) {
      return this.normal.copy(t), (this.constant = e), this
    }
    setComponents(t, e, n, i) {
      return this.normal.set(t, e, n), (this.constant = i), this
    }
    setFromNormalAndCoplanarPoint(t, e) {
      return this.normal.copy(t), (this.constant = -e.dot(this.normal)), this
    }
    setFromCoplanarPoints(t, e, n) {
      const i = ct.subVectors(n, e).cross(ht.subVectors(t, e)).normalize()
      return this.setFromNormalAndCoplanarPoint(i, t), this
    }
    copy(t) {
      return this.normal.copy(t.normal), (this.constant = t.constant), this
    }
    normalize() {
      const t = 1 / this.normal.length()
      return this.normal.multiplyScalar(t), (this.constant *= t), this
    }
    negate() {
      return (this.constant *= -1), this.normal.negate(), this
    }
    distanceToPoint(t) {
      return this.normal.dot(t) + this.constant
    }
    distanceToSphere(t) {
      return this.distanceToPoint(t.center) - t.radius
    }
    projectPoint(t, e) {
      return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)
    }
    intersectLine(t, e) {
      const n = t.delta(ct),
        i = this.normal.dot(n)
      if (0 === i) return 0 === this.distanceToPoint(t.start) ? e.copy(t.start) : null
      const r = -(t.start.dot(this.normal) + this.constant) / i
      return r < 0 || r > 1 ? null : e.copy(n).multiplyScalar(r).add(t.start)
    }
    intersectsLine(t) {
      const e = this.distanceToPoint(t.start),
        n = this.distanceToPoint(t.end)
      return (e < 0 && n > 0) || (n < 0 && e > 0)
    }
    intersectsBox(t) {
      return t.intersectsPlane(this)
    }
    intersectsSphere(t) {
      return t.intersectsPlane(this)
    }
    coplanarPoint(t) {
      return t.copy(this.normal).multiplyScalar(-this.constant)
    }
    applyMatrix4(t, e) {
      const n = e || ut.getNormalMatrix(t),
        i = this.coplanarPoint(ct).applyMatrix4(t),
        r = this.normal.applyMatrix3(n).normalize()
      return (this.constant = -i.dot(r)), this
    }
    translate(t) {
      return (this.constant -= t.dot(this.normal)), this
    }
    equals(t) {
      return t.normal.equals(this.normal) && t.constant === this.constant
    }
    clone() {
      return new this.constructor().copy(this)
    }
  }
  dt.prototype.isPlane = !0
  const pt = new ot(),
    mt = new B()
  class ft {
    constructor(t = new dt(), e = new dt(), n = new dt(), i = new dt(), r = new dt(), a = new dt()) {
      this.planes = [t, e, n, i, r, a]
    }
    set(t, e, n, i, r, a) {
      const s = this.planes
      return s[0].copy(t), s[1].copy(e), s[2].copy(n), s[3].copy(i), s[4].copy(r), s[5].copy(a), this
    }
    copy(t) {
      const e = this.planes
      for (let n = 0; n < 6; n++) e[n].copy(t.planes[n])
      return this
    }
    setFromProjectionMatrix(t) {
      const e = this.planes,
        n = t.elements,
        i = n[0],
        r = n[1],
        a = n[2],
        s = n[3],
        o = n[4],
        l = n[5],
        c = n[6],
        h = n[7],
        u = n[8],
        d = n[9],
        p = n[10],
        m = n[11],
        f = n[12],
        g = n[13],
        v = n[14],
        _ = n[15]
      return (
        e[0].setComponents(s - i, h - o, m - u, _ - f).normalize(),
        e[1].setComponents(s + i, h + o, m + u, _ + f).normalize(),
        e[2].setComponents(s + r, h + l, m + d, _ + g).normalize(),
        e[3].setComponents(s - r, h - l, m - d, _ - g).normalize(),
        e[4].setComponents(s - a, h - c, m - p, _ - v).normalize(),
        e[5].setComponents(s + a, h + c, m + p, _ + v).normalize(),
        this
      )
    }
    intersectsObject(t) {
      const e = t.geometry
      return (
        null === e.boundingSphere && e.computeBoundingSphere(),
        pt.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),
        this.intersectsSphere(pt)
      )
    }
    intersectsSprite(t) {
      return (
        pt.center.set(0, 0, 0),
        (pt.radius = 0.7071067811865476),
        pt.applyMatrix4(t.matrixWorld),
        this.intersectsSphere(pt)
      )
    }
    intersectsSphere(t) {
      const e = this.planes,
        n = t.center,
        i = -t.radius
      for (let t = 0; t < 6; t++) {
        if (e[t].distanceToPoint(n) < i) return !1
      }
      return !0
    }
    intersectsBox(t) {
      const e = this.planes
      for (let n = 0; n < 6; n++) {
        const i = e[n]
        if (
          ((mt.x = i.normal.x > 0 ? t.max.x : t.min.x),
          (mt.y = i.normal.y > 0 ? t.max.y : t.min.y),
          (mt.z = i.normal.z > 0 ? t.max.z : t.min.z),
          i.distanceToPoint(mt) < 0)
        )
          return !1
      }
      return !0
    }
    containsPoint(t) {
      const e = this.planes
      for (let n = 0; n < 6; n++) if (e[n].distanceToPoint(t) < 0) return !1
      return !0
    }
    clone() {
      return new this.constructor().copy(this)
    }
  }
  class gt {
    constructor() {
      ;(this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]),
        arguments.length > 0 &&
          console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.')
    }
    set(t, e, n, i, r, a, s, o, l, c, h, u, d, p, m, f) {
      const g = this.elements
      return (
        (g[0] = t),
        (g[4] = e),
        (g[8] = n),
        (g[12] = i),
        (g[1] = r),
        (g[5] = a),
        (g[9] = s),
        (g[13] = o),
        (g[2] = l),
        (g[6] = c),
        (g[10] = h),
        (g[14] = u),
        (g[3] = d),
        (g[7] = p),
        (g[11] = m),
        (g[15] = f),
        this
      )
    }
    identity() {
      return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this
    }
    clone() {
      return new gt().fromArray(this.elements)
    }
    copy(t) {
      const e = this.elements,
        n = t.elements
      return (
        (e[0] = n[0]),
        (e[1] = n[1]),
        (e[2] = n[2]),
        (e[3] = n[3]),
        (e[4] = n[4]),
        (e[5] = n[5]),
        (e[6] = n[6]),
        (e[7] = n[7]),
        (e[8] = n[8]),
        (e[9] = n[9]),
        (e[10] = n[10]),
        (e[11] = n[11]),
        (e[12] = n[12]),
        (e[13] = n[13]),
        (e[14] = n[14]),
        (e[15] = n[15]),
        this
      )
    }
    copyPosition(t) {
      const e = this.elements,
        n = t.elements
      return (e[12] = n[12]), (e[13] = n[13]), (e[14] = n[14]), this
    }
    setFromMatrix3(t) {
      const e = t.elements
      return this.set(e[0], e[3], e[6], 0, e[1], e[4], e[7], 0, e[2], e[5], e[8], 0, 0, 0, 0, 1), this
    }
    extractBasis(t, e, n) {
      return t.setFromMatrixColumn(this, 0), e.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this
    }
    makeBasis(t, e, n) {
      return this.set(t.x, e.x, n.x, 0, t.y, e.y, n.y, 0, t.z, e.z, n.z, 0, 0, 0, 0, 1), this
    }
    extractRotation(t) {
      const e = this.elements,
        n = t.elements,
        i = 1 / vt.setFromMatrixColumn(t, 0).length(),
        r = 1 / vt.setFromMatrixColumn(t, 1).length(),
        a = 1 / vt.setFromMatrixColumn(t, 2).length()
      return (
        (e[0] = n[0] * i),
        (e[1] = n[1] * i),
        (e[2] = n[2] * i),
        (e[3] = 0),
        (e[4] = n[4] * r),
        (e[5] = n[5] * r),
        (e[6] = n[6] * r),
        (e[7] = 0),
        (e[8] = n[8] * a),
        (e[9] = n[9] * a),
        (e[10] = n[10] * a),
        (e[11] = 0),
        (e[12] = 0),
        (e[13] = 0),
        (e[14] = 0),
        (e[15] = 1),
        this
      )
    }
    makeRotationFromEuler(t) {
      ;(t && t.isEuler) ||
        console.error(
          'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.'
        )
      const e = this.elements,
        n = t.x,
        i = t.y,
        r = t.z,
        a = Math.cos(n),
        s = Math.sin(n),
        o = Math.cos(i),
        l = Math.sin(i),
        c = Math.cos(r),
        h = Math.sin(r)
      if ('XYZ' === t.order) {
        const t = a * c,
          n = a * h,
          i = s * c,
          r = s * h
        ;(e[0] = o * c),
          (e[4] = -o * h),
          (e[8] = l),
          (e[1] = n + i * l),
          (e[5] = t - r * l),
          (e[9] = -s * o),
          (e[2] = r - t * l),
          (e[6] = i + n * l),
          (e[10] = a * o)
      } else if ('YXZ' === t.order) {
        const t = o * c,
          n = o * h,
          i = l * c,
          r = l * h
        ;(e[0] = t + r * s),
          (e[4] = i * s - n),
          (e[8] = a * l),
          (e[1] = a * h),
          (e[5] = a * c),
          (e[9] = -s),
          (e[2] = n * s - i),
          (e[6] = r + t * s),
          (e[10] = a * o)
      } else if ('ZXY' === t.order) {
        const t = o * c,
          n = o * h,
          i = l * c,
          r = l * h
        ;(e[0] = t - r * s),
          (e[4] = -a * h),
          (e[8] = i + n * s),
          (e[1] = n + i * s),
          (e[5] = a * c),
          (e[9] = r - t * s),
          (e[2] = -a * l),
          (e[6] = s),
          (e[10] = a * o)
      } else if ('ZYX' === t.order) {
        const t = a * c,
          n = a * h,
          i = s * c,
          r = s * h
        ;(e[0] = o * c),
          (e[4] = i * l - n),
          (e[8] = t * l + r),
          (e[1] = o * h),
          (e[5] = r * l + t),
          (e[9] = n * l - i),
          (e[2] = -l),
          (e[6] = s * o),
          (e[10] = a * o)
      } else if ('YZX' === t.order) {
        const t = a * o,
          n = a * l,
          i = s * o,
          r = s * l
        ;(e[0] = o * c),
          (e[4] = r - t * h),
          (e[8] = i * h + n),
          (e[1] = h),
          (e[5] = a * c),
          (e[9] = -s * c),
          (e[2] = -l * c),
          (e[6] = n * h + i),
          (e[10] = t - r * h)
      } else if ('XZY' === t.order) {
        const t = a * o,
          n = a * l,
          i = s * o,
          r = s * l
        ;(e[0] = o * c),
          (e[4] = -h),
          (e[8] = l * c),
          (e[1] = t * h + r),
          (e[5] = a * c),
          (e[9] = n * h - i),
          (e[2] = i * h - n),
          (e[6] = s * c),
          (e[10] = r * h + t)
      }
      return (e[3] = 0), (e[7] = 0), (e[11] = 0), (e[12] = 0), (e[13] = 0), (e[14] = 0), (e[15] = 1), this
    }
    makeRotationFromQuaternion(t) {
      return this.compose(xt, t, Mt)
    }
    lookAt(t, e, n) {
      const i = this.elements
      return (
        bt.subVectors(t, e),
        0 === bt.lengthSq() && (bt.z = 1),
        bt.normalize(),
        yt.crossVectors(n, bt),
        0 === yt.lengthSq() &&
          (1 === Math.abs(n.z) ? (bt.x += 1e-4) : (bt.z += 1e-4), bt.normalize(), yt.crossVectors(n, bt)),
        yt.normalize(),
        St.crossVectors(bt, yt),
        (i[0] = yt.x),
        (i[4] = St.x),
        (i[8] = bt.x),
        (i[1] = yt.y),
        (i[5] = St.y),
        (i[9] = bt.y),
        (i[2] = yt.z),
        (i[6] = St.z),
        (i[10] = bt.z),
        this
      )
    }
    multiply(t, e) {
      return void 0 !== e
        ? (console.warn(
            'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.'
          ),
          this.multiplyMatrices(t, e))
        : this.multiplyMatrices(this, t)
    }
    premultiply(t) {
      return this.multiplyMatrices(t, this)
    }
    multiplyMatrices(t, e) {
      const n = t.elements,
        i = e.elements,
        r = this.elements,
        a = n[0],
        s = n[4],
        o = n[8],
        l = n[12],
        c = n[1],
        h = n[5],
        u = n[9],
        d = n[13],
        p = n[2],
        m = n[6],
        f = n[10],
        g = n[14],
        v = n[3],
        _ = n[7],
        x = n[11],
        M = n[15],
        y = i[0],
        S = i[4],
        b = i[8],
        w = i[12],
        T = i[1],
        E = i[5],
        L = i[9],
        A = i[13],
        C = i[2],
        D = i[6],
        R = i[10],
        P = i[14],
        I = i[3],
        N = i[7],
        z = i[11],
        O = i[15]
      return (
        (r[0] = a * y + s * T + o * C + l * I),
        (r[4] = a * S + s * E + o * D + l * N),
        (r[8] = a * b + s * L + o * R + l * z),
        (r[12] = a * w + s * A + o * P + l * O),
        (r[1] = c * y + h * T + u * C + d * I),
        (r[5] = c * S + h * E + u * D + d * N),
        (r[9] = c * b + h * L + u * R + d * z),
        (r[13] = c * w + h * A + u * P + d * O),
        (r[2] = p * y + m * T + f * C + g * I),
        (r[6] = p * S + m * E + f * D + g * N),
        (r[10] = p * b + m * L + f * R + g * z),
        (r[14] = p * w + m * A + f * P + g * O),
        (r[3] = v * y + _ * T + x * C + M * I),
        (r[7] = v * S + _ * E + x * D + M * N),
        (r[11] = v * b + _ * L + x * R + M * z),
        (r[15] = v * w + _ * A + x * P + M * O),
        this
      )
    }
    multiplyScalar(t) {
      const e = this.elements
      return (
        (e[0] *= t),
        (e[4] *= t),
        (e[8] *= t),
        (e[12] *= t),
        (e[1] *= t),
        (e[5] *= t),
        (e[9] *= t),
        (e[13] *= t),
        (e[2] *= t),
        (e[6] *= t),
        (e[10] *= t),
        (e[14] *= t),
        (e[3] *= t),
        (e[7] *= t),
        (e[11] *= t),
        (e[15] *= t),
        this
      )
    }
    determinant() {
      const t = this.elements,
        e = t[0],
        n = t[4],
        i = t[8],
        r = t[12],
        a = t[1],
        s = t[5],
        o = t[9],
        l = t[13],
        c = t[2],
        h = t[6],
        u = t[10],
        d = t[14]
      return (
        t[3] * (+r * o * h - i * l * h - r * s * u + n * l * u + i * s * d - n * o * d) +
        t[7] * (+e * o * d - e * l * u + r * a * u - i * a * d + i * l * c - r * o * c) +
        t[11] * (+e * l * h - e * s * d - r * a * h + n * a * d + r * s * c - n * l * c) +
        t[15] * (-i * s * c - e * o * h + e * s * u + i * a * h - n * a * u + n * o * c)
      )
    }
    transpose() {
      const t = this.elements
      let e
      return (
        (e = t[1]),
        (t[1] = t[4]),
        (t[4] = e),
        (e = t[2]),
        (t[2] = t[8]),
        (t[8] = e),
        (e = t[6]),
        (t[6] = t[9]),
        (t[9] = e),
        (e = t[3]),
        (t[3] = t[12]),
        (t[12] = e),
        (e = t[7]),
        (t[7] = t[13]),
        (t[13] = e),
        (e = t[11]),
        (t[11] = t[14]),
        (t[14] = e),
        this
      )
    }
    setPosition(t, e, n) {
      const i = this.elements
      return t.isVector3 ? ((i[12] = t.x), (i[13] = t.y), (i[14] = t.z)) : ((i[12] = t), (i[13] = e), (i[14] = n)), this
    }
    invert() {
      const t = this.elements,
        e = t[0],
        n = t[1],
        i = t[2],
        r = t[3],
        a = t[4],
        s = t[5],
        o = t[6],
        l = t[7],
        c = t[8],
        h = t[9],
        u = t[10],
        d = t[11],
        p = t[12],
        m = t[13],
        f = t[14],
        g = t[15],
        v = h * f * l - m * u * l + m * o * d - s * f * d - h * o * g + s * u * g,
        _ = p * u * l - c * f * l - p * o * d + a * f * d + c * o * g - a * u * g,
        x = c * m * l - p * h * l + p * s * d - a * m * d - c * s * g + a * h * g,
        M = p * h * o - c * m * o - p * s * u + a * m * u + c * s * f - a * h * f,
        y = e * v + n * _ + i * x + r * M
      if (0 === y) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
      const S = 1 / y
      return (
        (t[0] = v * S),
        (t[1] = (m * u * r - h * f * r - m * i * d + n * f * d + h * i * g - n * u * g) * S),
        (t[2] = (s * f * r - m * o * r + m * i * l - n * f * l - s * i * g + n * o * g) * S),
        (t[3] = (h * o * r - s * u * r - h * i * l + n * u * l + s * i * d - n * o * d) * S),
        (t[4] = _ * S),
        (t[5] = (c * f * r - p * u * r + p * i * d - e * f * d - c * i * g + e * u * g) * S),
        (t[6] = (p * o * r - a * f * r - p * i * l + e * f * l + a * i * g - e * o * g) * S),
        (t[7] = (a * u * r - c * o * r + c * i * l - e * u * l - a * i * d + e * o * d) * S),
        (t[8] = x * S),
        (t[9] = (p * h * r - c * m * r - p * n * d + e * m * d + c * n * g - e * h * g) * S),
        (t[10] = (a * m * r - p * s * r + p * n * l - e * m * l - a * n * g + e * s * g) * S),
        (t[11] = (c * s * r - a * h * r - c * n * l + e * h * l + a * n * d - e * s * d) * S),
        (t[12] = M * S),
        (t[13] = (c * m * i - p * h * i + p * n * u - e * m * u - c * n * f + e * h * f) * S),
        (t[14] = (p * s * i - a * m * i - p * n * o + e * m * o + a * n * f - e * s * f) * S),
        (t[15] = (a * h * i - c * s * i + c * n * o - e * h * o - a * n * u + e * s * u) * S),
        this
      )
    }
    scale(t) {
      const e = this.elements,
        n = t.x,
        i = t.y,
        r = t.z
      return (
        (e[0] *= n),
        (e[4] *= i),
        (e[8] *= r),
        (e[1] *= n),
        (e[5] *= i),
        (e[9] *= r),
        (e[2] *= n),
        (e[6] *= i),
        (e[10] *= r),
        (e[3] *= n),
        (e[7] *= i),
        (e[11] *= r),
        this
      )
    }
    getMaxScaleOnAxis() {
      const t = this.elements,
        e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2],
        n = t[4] * t[4] + t[5] * t[5] + t[6] * t[6],
        i = t[8] * t[8] + t[9] * t[9] + t[10] * t[10]
      return Math.sqrt(Math.max(e, n, i))
    }
    makeTranslation(t, e, n) {
      return this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, n, 0, 0, 0, 1), this
    }
    makeRotationX(t) {
      const e = Math.cos(t),
        n = Math.sin(t)
      return this.set(1, 0, 0, 0, 0, e, -n, 0, 0, n, e, 0, 0, 0, 0, 1), this
    }
    makeRotationY(t) {
      const e = Math.cos(t),
        n = Math.sin(t)
      return this.set(e, 0, n, 0, 0, 1, 0, 0, -n, 0, e, 0, 0, 0, 0, 1), this
    }
    makeRotationZ(t) {
      const e = Math.cos(t),
        n = Math.sin(t)
      return this.set(e, -n, 0, 0, n, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this
    }
    makeRotationAxis(t, e) {
      const n = Math.cos(e),
        i = Math.sin(e),
        r = 1 - n,
        a = t.x,
        s = t.y,
        o = t.z,
        l = r * a,
        c = r * s
      return (
        this.set(
          l * a + n,
          l * s - i * o,
          l * o + i * s,
          0,
          l * s + i * o,
          c * s + n,
          c * o - i * a,
          0,
          l * o - i * s,
          c * o + i * a,
          r * o * o + n,
          0,
          0,
          0,
          0,
          1
        ),
        this
      )
    }
    makeScale(t, e, n) {
      return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this
    }
    makeShear(t, e, n, i, r, a) {
      return this.set(1, n, r, 0, t, 1, a, 0, e, i, 1, 0, 0, 0, 0, 1), this
    }
    compose(t, e, n) {
      const i = this.elements,
        r = e._x,
        a = e._y,
        s = e._z,
        o = e._w,
        l = r + r,
        c = a + a,
        h = s + s,
        u = r * l,
        d = r * c,
        p = r * h,
        m = a * c,
        f = a * h,
        g = s * h,
        v = o * l,
        _ = o * c,
        x = o * h,
        M = n.x,
        y = n.y,
        S = n.z
      return (
        (i[0] = (1 - (m + g)) * M),
        (i[1] = (d + x) * M),
        (i[2] = (p - _) * M),
        (i[3] = 0),
        (i[4] = (d - x) * y),
        (i[5] = (1 - (u + g)) * y),
        (i[6] = (f + v) * y),
        (i[7] = 0),
        (i[8] = (p + _) * S),
        (i[9] = (f - v) * S),
        (i[10] = (1 - (u + m)) * S),
        (i[11] = 0),
        (i[12] = t.x),
        (i[13] = t.y),
        (i[14] = t.z),
        (i[15] = 1),
        this
      )
    }
    decompose(t, e, n) {
      const i = this.elements
      let r = vt.set(i[0], i[1], i[2]).length()
      const a = vt.set(i[4], i[5], i[6]).length(),
        s = vt.set(i[8], i[9], i[10]).length()
      this.determinant() < 0 && (r = -r), (t.x = i[12]), (t.y = i[13]), (t.z = i[14]), _t.copy(this)
      const o = 1 / r,
        l = 1 / a,
        c = 1 / s
      return (
        (_t.elements[0] *= o),
        (_t.elements[1] *= o),
        (_t.elements[2] *= o),
        (_t.elements[4] *= l),
        (_t.elements[5] *= l),
        (_t.elements[6] *= l),
        (_t.elements[8] *= c),
        (_t.elements[9] *= c),
        (_t.elements[10] *= c),
        e.setFromRotationMatrix(_t),
        (n.x = r),
        (n.y = a),
        (n.z = s),
        this
      )
    }
    makePerspective(t, e, n, i, r, a) {
      void 0 === a &&
        console.warn(
          'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.'
        )
      const s = this.elements,
        o = (2 * r) / (e - t),
        l = (2 * r) / (n - i),
        c = (e + t) / (e - t),
        h = (n + i) / (n - i),
        u = -(a + r) / (a - r),
        d = (-2 * a * r) / (a - r)
      return (
        (s[0] = o),
        (s[4] = 0),
        (s[8] = c),
        (s[12] = 0),
        (s[1] = 0),
        (s[5] = l),
        (s[9] = h),
        (s[13] = 0),
        (s[2] = 0),
        (s[6] = 0),
        (s[10] = u),
        (s[14] = d),
        (s[3] = 0),
        (s[7] = 0),
        (s[11] = -1),
        (s[15] = 0),
        this
      )
    }
    makeOrthographic(t, e, n, i, r, a) {
      const s = this.elements,
        o = 1 / (e - t),
        l = 1 / (n - i),
        c = 1 / (a - r),
        h = (e + t) * o,
        u = (n + i) * l,
        d = (a + r) * c
      return (
        (s[0] = 2 * o),
        (s[4] = 0),
        (s[8] = 0),
        (s[12] = -h),
        (s[1] = 0),
        (s[5] = 2 * l),
        (s[9] = 0),
        (s[13] = -u),
        (s[2] = 0),
        (s[6] = 0),
        (s[10] = -2 * c),
        (s[14] = -d),
        (s[3] = 0),
        (s[7] = 0),
        (s[11] = 0),
        (s[15] = 1),
        this
      )
    }
    equals(t) {
      const e = this.elements,
        n = t.elements
      for (let t = 0; t < 16; t++) if (e[t] !== n[t]) return !1
      return !0
    }
    fromArray(t, e = 0) {
      for (let n = 0; n < 16; n++) this.elements[n] = t[n + e]
      return this
    }
    toArray(t = [], e = 0) {
      const n = this.elements
      return (
        (t[e] = n[0]),
        (t[e + 1] = n[1]),
        (t[e + 2] = n[2]),
        (t[e + 3] = n[3]),
        (t[e + 4] = n[4]),
        (t[e + 5] = n[5]),
        (t[e + 6] = n[6]),
        (t[e + 7] = n[7]),
        (t[e + 8] = n[8]),
        (t[e + 9] = n[9]),
        (t[e + 10] = n[10]),
        (t[e + 11] = n[11]),
        (t[e + 12] = n[12]),
        (t[e + 13] = n[13]),
        (t[e + 14] = n[14]),
        (t[e + 15] = n[15]),
        t
      )
    }
  }
  gt.prototype.isMatrix4 = !0
  const vt = new B(),
    _t = new gt(),
    xt = new B(0, 0, 0),
    Mt = new B(1, 1, 1),
    yt = new B(),
    St = new B(),
    bt = new B()
  class wt {
    constructor(t = 0, e = 0, n = 0, i = 1) {
      ;(this.x = t), (this.y = e), (this.z = n), (this.w = i)
    }
    get width() {
      return this.z
    }
    set width(t) {
      this.z = t
    }
    get height() {
      return this.w
    }
    set height(t) {
      this.w = t
    }
    set(t, e, n, i) {
      return (this.x = t), (this.y = e), (this.z = n), (this.w = i), this
    }
    setScalar(t) {
      return (this.x = t), (this.y = t), (this.z = t), (this.w = t), this
    }
    setX(t) {
      return (this.x = t), this
    }
    setY(t) {
      return (this.y = t), this
    }
    setZ(t) {
      return (this.z = t), this
    }
    setW(t) {
      return (this.w = t), this
    }
    setComponent(t, e) {
      switch (t) {
        case 0:
          this.x = e
          break
        case 1:
          this.y = e
          break
        case 2:
          this.z = e
          break
        case 3:
          this.w = e
          break
        default:
          throw new Error('index is out of range: ' + t)
      }
      return this
    }
    getComponent(t) {
      switch (t) {
        case 0:
          return this.x
        case 1:
          return this.y
        case 2:
          return this.z
        case 3:
          return this.w
        default:
          throw new Error('index is out of range: ' + t)
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z, this.w)
    }
    copy(t) {
      return (this.x = t.x), (this.y = t.y), (this.z = t.z), (this.w = void 0 !== t.w ? t.w : 1), this
    }
    add(t, e) {
      return void 0 !== e
        ? (console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.'),
          this.addVectors(t, e))
        : ((this.x += t.x), (this.y += t.y), (this.z += t.z), (this.w += t.w), this)
    }
    addScalar(t) {
      return (this.x += t), (this.y += t), (this.z += t), (this.w += t), this
    }
    addVectors(t, e) {
      return (this.x = t.x + e.x), (this.y = t.y + e.y), (this.z = t.z + e.z), (this.w = t.w + e.w), this
    }
    addScaledVector(t, e) {
      return (this.x += t.x * e), (this.y += t.y * e), (this.z += t.z * e), (this.w += t.w * e), this
    }
    sub(t, e) {
      return void 0 !== e
        ? (console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.'),
          this.subVectors(t, e))
        : ((this.x -= t.x), (this.y -= t.y), (this.z -= t.z), (this.w -= t.w), this)
    }
    subScalar(t) {
      return (this.x -= t), (this.y -= t), (this.z -= t), (this.w -= t), this
    }
    subVectors(t, e) {
      return (this.x = t.x - e.x), (this.y = t.y - e.y), (this.z = t.z - e.z), (this.w = t.w - e.w), this
    }
    multiply(t) {
      return (this.x *= t.x), (this.y *= t.y), (this.z *= t.z), (this.w *= t.w), this
    }
    multiplyScalar(t) {
      return (this.x *= t), (this.y *= t), (this.z *= t), (this.w *= t), this
    }
    applyMatrix4(t) {
      const e = this.x,
        n = this.y,
        i = this.z,
        r = this.w,
        a = t.elements
      return (
        (this.x = a[0] * e + a[4] * n + a[8] * i + a[12] * r),
        (this.y = a[1] * e + a[5] * n + a[9] * i + a[13] * r),
        (this.z = a[2] * e + a[6] * n + a[10] * i + a[14] * r),
        (this.w = a[3] * e + a[7] * n + a[11] * i + a[15] * r),
        this
      )
    }
    divideScalar(t) {
      return this.multiplyScalar(1 / t)
    }
    setAxisAngleFromQuaternion(t) {
      this.w = 2 * Math.acos(t.w)
      const e = Math.sqrt(1 - t.w * t.w)
      return (
        e < 1e-4
          ? ((this.x = 1), (this.y = 0), (this.z = 0))
          : ((this.x = t.x / e), (this.y = t.y / e), (this.z = t.z / e)),
        this
      )
    }
    setAxisAngleFromRotationMatrix(t) {
      let e, n, i, r
      const a = 0.01,
        s = 0.1,
        o = t.elements,
        l = o[0],
        c = o[4],
        h = o[8],
        u = o[1],
        d = o[5],
        p = o[9],
        m = o[2],
        f = o[6],
        g = o[10]
      if (Math.abs(c - u) < a && Math.abs(h - m) < a && Math.abs(p - f) < a) {
        if (Math.abs(c + u) < s && Math.abs(h + m) < s && Math.abs(p + f) < s && Math.abs(l + d + g - 3) < s)
          return this.set(1, 0, 0, 0), this
        e = Math.PI
        const t = (l + 1) / 2,
          o = (d + 1) / 2,
          v = (g + 1) / 2,
          _ = (c + u) / 4,
          x = (h + m) / 4,
          M = (p + f) / 4
        return (
          t > o && t > v
            ? t < a
              ? ((n = 0), (i = 0.707106781), (r = 0.707106781))
              : ((n = Math.sqrt(t)), (i = _ / n), (r = x / n))
            : o > v
            ? o < a
              ? ((n = 0.707106781), (i = 0), (r = 0.707106781))
              : ((i = Math.sqrt(o)), (n = _ / i), (r = M / i))
            : v < a
            ? ((n = 0.707106781), (i = 0.707106781), (r = 0))
            : ((r = Math.sqrt(v)), (n = x / r), (i = M / r)),
          this.set(n, i, r, e),
          this
        )
      }
      let v = Math.sqrt((f - p) * (f - p) + (h - m) * (h - m) + (u - c) * (u - c))
      return (
        Math.abs(v) < 0.001 && (v = 1),
        (this.x = (f - p) / v),
        (this.y = (h - m) / v),
        (this.z = (u - c) / v),
        (this.w = Math.acos((l + d + g - 1) / 2)),
        this
      )
    }
    min(t) {
      return (
        (this.x = Math.min(this.x, t.x)),
        (this.y = Math.min(this.y, t.y)),
        (this.z = Math.min(this.z, t.z)),
        (this.w = Math.min(this.w, t.w)),
        this
      )
    }
    max(t) {
      return (
        (this.x = Math.max(this.x, t.x)),
        (this.y = Math.max(this.y, t.y)),
        (this.z = Math.max(this.z, t.z)),
        (this.w = Math.max(this.w, t.w)),
        this
      )
    }
    clamp(t, e) {
      return (
        (this.x = Math.max(t.x, Math.min(e.x, this.x))),
        (this.y = Math.max(t.y, Math.min(e.y, this.y))),
        (this.z = Math.max(t.z, Math.min(e.z, this.z))),
        (this.w = Math.max(t.w, Math.min(e.w, this.w))),
        this
      )
    }
    clampScalar(t, e) {
      return (
        (this.x = Math.max(t, Math.min(e, this.x))),
        (this.y = Math.max(t, Math.min(e, this.y))),
        (this.z = Math.max(t, Math.min(e, this.z))),
        (this.w = Math.max(t, Math.min(e, this.w))),
        this
      )
    }
    clampLength(t, e) {
      const n = this.length()
      return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
    }
    floor() {
      return (
        (this.x = Math.floor(this.x)),
        (this.y = Math.floor(this.y)),
        (this.z = Math.floor(this.z)),
        (this.w = Math.floor(this.w)),
        this
      )
    }
    ceil() {
      return (
        (this.x = Math.ceil(this.x)),
        (this.y = Math.ceil(this.y)),
        (this.z = Math.ceil(this.z)),
        (this.w = Math.ceil(this.w)),
        this
      )
    }
    round() {
      return (
        (this.x = Math.round(this.x)),
        (this.y = Math.round(this.y)),
        (this.z = Math.round(this.z)),
        (this.w = Math.round(this.w)),
        this
      )
    }
    roundToZero() {
      return (
        (this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x)),
        (this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y)),
        (this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z)),
        (this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w)),
        this
      )
    }
    negate() {
      return (this.x = -this.x), (this.y = -this.y), (this.z = -this.z), (this.w = -this.w), this
    }
    dot(t) {
      return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w)
    }
    normalize() {
      return this.divideScalar(this.length() || 1)
    }
    setLength(t) {
      return this.normalize().multiplyScalar(t)
    }
    lerp(t, e) {
      return (
        (this.x += (t.x - this.x) * e),
        (this.y += (t.y - this.y) * e),
        (this.z += (t.z - this.z) * e),
        (this.w += (t.w - this.w) * e),
        this
      )
    }
    lerpVectors(t, e, n) {
      return (
        (this.x = t.x + (e.x - t.x) * n),
        (this.y = t.y + (e.y - t.y) * n),
        (this.z = t.z + (e.z - t.z) * n),
        (this.w = t.w + (e.w - t.w) * n),
        this
      )
    }
    equals(t) {
      return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w
    }
    fromArray(t, e = 0) {
      return (this.x = t[e]), (this.y = t[e + 1]), (this.z = t[e + 2]), (this.w = t[e + 3]), this
    }
    toArray(t = [], e = 0) {
      return (t[e] = this.x), (t[e + 1] = this.y), (t[e + 2] = this.z), (t[e + 3] = this.w), t
    }
    fromBufferAttribute(t, e, n) {
      return (
        void 0 !== n && console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().'),
        (this.x = t.getX(e)),
        (this.y = t.getY(e)),
        (this.z = t.getZ(e)),
        (this.w = t.getW(e)),
        this
      )
    }
    random() {
      return (
        (this.x = Math.random()), (this.y = Math.random()), (this.z = Math.random()), (this.w = Math.random()), this
      )
    }
    *[Symbol.iterator]() {
      yield this.x, yield this.y, yield this.z, yield this.w
    }
  }
  function Tt() {
    let t = null,
      e = !1,
      n = null,
      i = null
    function r(e, a) {
      n(e, a), (i = t.requestAnimationFrame(r))
    }
    return {
      start: function () {
        !0 !== e && null !== n && ((i = t.requestAnimationFrame(r)), (e = !0))
      },
      stop: function () {
        t.cancelAnimationFrame(i), (e = !1)
      },
      setAnimationLoop: function (t) {
        n = t
      },
      setContext: function (e) {
        t = e
      },
    }
  }
  function Et(t, e) {
    const n = e.isWebGL2,
      i = new WeakMap()
    return {
      get: function (t) {
        return t.isInterleavedBufferAttribute && (t = t.data), i.get(t)
      },
      remove: function (e) {
        e.isInterleavedBufferAttribute && (e = e.data)
        const n = i.get(e)
        n && (t.deleteBuffer(n.buffer), i.delete(e))
      },
      update: function (e, r) {
        if (e.isGLBufferAttribute) {
          const t = i.get(e)
          return void (
            (!t || t.version < e.version) &&
            i.set(e, { buffer: e.buffer, type: e.type, bytesPerElement: e.elementSize, version: e.version })
          )
        }
        e.isInterleavedBufferAttribute && (e = e.data)
        const a = i.get(e)
        void 0 === a
          ? i.set(
              e,
              (function (e, i) {
                const r = e.array,
                  a = e.usage,
                  s = t.createBuffer()
                t.bindBuffer(i, s), t.bufferData(i, r, a), e.onUploadCallback()
                let o = 5126
                return (
                  r instanceof Float32Array
                    ? (o = 5126)
                    : r instanceof Float64Array
                    ? console.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.')
                    : r instanceof Uint16Array
                    ? e.isFloat16BufferAttribute
                      ? n
                        ? (o = 5131)
                        : console.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.')
                      : (o = 5123)
                    : r instanceof Int16Array
                    ? (o = 5122)
                    : r instanceof Uint32Array
                    ? (o = 5125)
                    : r instanceof Int32Array
                    ? (o = 5124)
                    : r instanceof Int8Array
                    ? (o = 5120)
                    : (r instanceof Uint8Array || r instanceof Uint8ClampedArray) && (o = 5121),
                  { buffer: s, type: o, bytesPerElement: r.BYTES_PER_ELEMENT, version: e.version }
                )
              })(e, r)
            )
          : a.version < e.version &&
            (!(function (e, i, r) {
              const a = i.array,
                s = i.updateRange
              t.bindBuffer(r, e),
                -1 === s.count
                  ? t.bufferSubData(r, 0, a)
                  : (n
                      ? t.bufferSubData(r, s.offset * a.BYTES_PER_ELEMENT, a, s.offset, s.count)
                      : t.bufferSubData(r, s.offset * a.BYTES_PER_ELEMENT, a.subarray(s.offset, s.offset + s.count)),
                    (s.count = -1))
            })(a.buffer, e, r),
            (a.version = e.version))
      },
    }
  }
  wt.prototype.isVector4 = !0
  class Lt {
    constructor(t = 0, e = 0) {
      ;(this.x = t), (this.y = e)
    }
    get width() {
      return this.x
    }
    set width(t) {
      this.x = t
    }
    get height() {
      return this.y
    }
    set height(t) {
      this.y = t
    }
    set(t, e) {
      return (this.x = t), (this.y = e), this
    }
    setScalar(t) {
      return (this.x = t), (this.y = t), this
    }
    setX(t) {
      return (this.x = t), this
    }
    setY(t) {
      return (this.y = t), this
    }
    setComponent(t, e) {
      switch (t) {
        case 0:
          this.x = e
          break
        case 1:
          this.y = e
          break
        default:
          throw new Error('index is out of range: ' + t)
      }
      return this
    }
    getComponent(t) {
      switch (t) {
        case 0:
          return this.x
        case 1:
          return this.y
        default:
          throw new Error('index is out of range: ' + t)
      }
    }
    clone() {
      return new this.constructor(this.x, this.y)
    }
    copy(t) {
      return (this.x = t.x), (this.y = t.y), this
    }
    add(t, e) {
      return void 0 !== e
        ? (console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.'),
          this.addVectors(t, e))
        : ((this.x += t.x), (this.y += t.y), this)
    }
    addScalar(t) {
      return (this.x += t), (this.y += t), this
    }
    addVectors(t, e) {
      return (this.x = t.x + e.x), (this.y = t.y + e.y), this
    }
    addScaledVector(t, e) {
      return (this.x += t.x * e), (this.y += t.y * e), this
    }
    sub(t, e) {
      return void 0 !== e
        ? (console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.'),
          this.subVectors(t, e))
        : ((this.x -= t.x), (this.y -= t.y), this)
    }
    subScalar(t) {
      return (this.x -= t), (this.y -= t), this
    }
    subVectors(t, e) {
      return (this.x = t.x - e.x), (this.y = t.y - e.y), this
    }
    multiply(t) {
      return (this.x *= t.x), (this.y *= t.y), this
    }
    multiplyScalar(t) {
      return (this.x *= t), (this.y *= t), this
    }
    divide(t) {
      return (this.x /= t.x), (this.y /= t.y), this
    }
    divideScalar(t) {
      return this.multiplyScalar(1 / t)
    }
    applyMatrix3(t) {
      const e = this.x,
        n = this.y,
        i = t.elements
      return (this.x = i[0] * e + i[3] * n + i[6]), (this.y = i[1] * e + i[4] * n + i[7]), this
    }
    min(t) {
      return (this.x = Math.min(this.x, t.x)), (this.y = Math.min(this.y, t.y)), this
    }
    max(t) {
      return (this.x = Math.max(this.x, t.x)), (this.y = Math.max(this.y, t.y)), this
    }
    clamp(t, e) {
      return (this.x = Math.max(t.x, Math.min(e.x, this.x))), (this.y = Math.max(t.y, Math.min(e.y, this.y))), this
    }
    clampScalar(t, e) {
      return (this.x = Math.max(t, Math.min(e, this.x))), (this.y = Math.max(t, Math.min(e, this.y))), this
    }
    clampLength(t, e) {
      const n = this.length()
      return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
    }
    floor() {
      return (this.x = Math.floor(this.x)), (this.y = Math.floor(this.y)), this
    }
    ceil() {
      return (this.x = Math.ceil(this.x)), (this.y = Math.ceil(this.y)), this
    }
    round() {
      return (this.x = Math.round(this.x)), (this.y = Math.round(this.y)), this
    }
    roundToZero() {
      return (
        (this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x)),
        (this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y)),
        this
      )
    }
    negate() {
      return (this.x = -this.x), (this.y = -this.y), this
    }
    dot(t) {
      return this.x * t.x + this.y * t.y
    }
    cross(t) {
      return this.x * t.y - this.y * t.x
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y)
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y)
    }
    normalize() {
      return this.divideScalar(this.length() || 1)
    }
    angle() {
      return Math.atan2(-this.y, -this.x) + Math.PI
    }
    distanceTo(t) {
      return Math.sqrt(this.distanceToSquared(t))
    }
    distanceToSquared(t) {
      const e = this.x - t.x,
        n = this.y - t.y
      return e * e + n * n
    }
    manhattanDistanceTo(t) {
      return Math.abs(this.x - t.x) + Math.abs(this.y - t.y)
    }
    setLength(t) {
      return this.normalize().multiplyScalar(t)
    }
    lerp(t, e) {
      return (this.x += (t.x - this.x) * e), (this.y += (t.y - this.y) * e), this
    }
    lerpVectors(t, e, n) {
      return (this.x = t.x + (e.x - t.x) * n), (this.y = t.y + (e.y - t.y) * n), this
    }
    equals(t) {
      return t.x === this.x && t.y === this.y
    }
    fromArray(t, e = 0) {
      return (this.x = t[e]), (this.y = t[e + 1]), this
    }
    toArray(t = [], e = 0) {
      return (t[e] = this.x), (t[e + 1] = this.y), t
    }
    fromBufferAttribute(t, e, n) {
      return (
        void 0 !== n && console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().'),
        (this.x = t.getX(e)),
        (this.y = t.getY(e)),
        this
      )
    }
    rotateAround(t, e) {
      const n = Math.cos(e),
        i = Math.sin(e),
        r = this.x - t.x,
        a = this.y - t.y
      return (this.x = r * n - a * i + t.x), (this.y = r * i + a * n + t.y), this
    }
    random() {
      return (this.x = Math.random()), (this.y = Math.random()), this
    }
    *[Symbol.iterator]() {
      yield this.x, yield this.y
    }
  }
  Lt.prototype.isVector2 = !0
  class At {
    addEventListener(t, e) {
      void 0 === this._listeners && (this._listeners = {})
      const n = this._listeners
      void 0 === n[t] && (n[t] = []), -1 === n[t].indexOf(e) && n[t].push(e)
    }
    hasEventListener(t, e) {
      if (void 0 === this._listeners) return !1
      const n = this._listeners
      return void 0 !== n[t] && -1 !== n[t].indexOf(e)
    }
    removeEventListener(t, e) {
      if (void 0 === this._listeners) return
      const n = this._listeners[t]
      if (void 0 !== n) {
        const t = n.indexOf(e)
        ;-1 !== t && n.splice(t, 1)
      }
    }
    dispatchEvent(t) {
      if (void 0 === this._listeners) return
      const e = this._listeners[t.type]
      if (void 0 !== e) {
        t.target = this
        const n = e.slice(0)
        for (let e = 0, i = n.length; e < i; e++) n[e].call(this, t)
        t.target = null
      }
    }
  }
  const Ct = {
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074,
    },
    Dt = { h: 0, s: 0, l: 0 },
    Rt = { h: 0, s: 0, l: 0 }
  function Pt(t, e, n) {
    return (
      n < 0 && (n += 1),
      n > 1 && (n -= 1),
      n < 1 / 6 ? t + 6 * (e - t) * n : n < 0.5 ? e : n < 2 / 3 ? t + 6 * (e - t) * (2 / 3 - n) : t
    )
  }
  function It(t) {
    return t < 0.04045 ? 0.0773993808 * t : Math.pow(0.9478672986 * t + 0.0521327014, 2.4)
  }
  function Nt(t) {
    return t < 0.0031308 ? 12.92 * t : 1.055 * Math.pow(t, 0.41666) - 0.055
  }
  class zt {
    constructor(t, e, n) {
      return void 0 === e && void 0 === n ? this.set(t) : this.setRGB(t, e, n)
    }
    set(t) {
      return (
        t && t.isColor
          ? this.copy(t)
          : 'number' == typeof t
          ? this.setHex(t)
          : 'string' == typeof t && this.setStyle(t),
        this
      )
    }
    setScalar(t) {
      return (this.r = t), (this.g = t), (this.b = t), this
    }
    setHex(t) {
      return (
        (t = Math.floor(t)),
        (this.r = ((t >> 16) & 255) / 255),
        (this.g = ((t >> 8) & 255) / 255),
        (this.b = (255 & t) / 255),
        this
      )
    }
    setRGB(t, e, n) {
      return (this.r = t), (this.g = e), (this.b = n), this
    }
    setHSL(t, e, n) {
      var i
      if (((t = ((t % (i = 1)) + i) % i), (e = N(e, 0, 1)), (n = N(n, 0, 1)), 0 === e)) this.r = this.g = this.b = n
      else {
        const i = n <= 0.5 ? n * (1 + e) : n + e - n * e,
          r = 2 * n - i
        ;(this.r = Pt(r, i, t + 1 / 3)), (this.g = Pt(r, i, t)), (this.b = Pt(r, i, t - 1 / 3))
      }
      return this
    }
    setStyle(t) {
      function e(e) {
        void 0 !== e && parseFloat(e) < 1 && console.warn('THREE.Color: Alpha component of ' + t + ' will be ignored.')
      }
      let n
      if ((n = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t))) {
        let t
        const i = n[1],
          r = n[2]
        switch (i) {
          case 'rgb':
          case 'rgba':
            if ((t = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r)))
              return (
                (this.r = Math.min(255, parseInt(t[1], 10)) / 255),
                (this.g = Math.min(255, parseInt(t[2], 10)) / 255),
                (this.b = Math.min(255, parseInt(t[3], 10)) / 255),
                e(t[4]),
                this
              )
            if ((t = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r)))
              return (
                (this.r = Math.min(100, parseInt(t[1], 10)) / 100),
                (this.g = Math.min(100, parseInt(t[2], 10)) / 100),
                (this.b = Math.min(100, parseInt(t[3], 10)) / 100),
                e(t[4]),
                this
              )
            break
          case 'hsl':
          case 'hsla':
            if ((t = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r))) {
              const n = parseFloat(t[1]) / 360,
                i = parseInt(t[2], 10) / 100,
                r = parseInt(t[3], 10) / 100
              return e(t[4]), this.setHSL(n, i, r)
            }
        }
      } else if ((n = /^\#([A-Fa-f\d]+)$/.exec(t))) {
        const t = n[1],
          e = t.length
        if (3 === e)
          return (
            (this.r = parseInt(t.charAt(0) + t.charAt(0), 16) / 255),
            (this.g = parseInt(t.charAt(1) + t.charAt(1), 16) / 255),
            (this.b = parseInt(t.charAt(2) + t.charAt(2), 16) / 255),
            this
          )
        if (6 === e)
          return (
            (this.r = parseInt(t.charAt(0) + t.charAt(1), 16) / 255),
            (this.g = parseInt(t.charAt(2) + t.charAt(3), 16) / 255),
            (this.b = parseInt(t.charAt(4) + t.charAt(5), 16) / 255),
            this
          )
      }
      return t && t.length > 0 ? this.setColorName(t) : this
    }
    setColorName(t) {
      const e = Ct[t.toLowerCase()]
      return void 0 !== e ? this.setHex(e) : console.warn('THREE.Color: Unknown color ' + t), this
    }
    clone() {
      return new this.constructor(this.r, this.g, this.b)
    }
    copy(t) {
      return (this.r = t.r), (this.g = t.g), (this.b = t.b), this
    }
    copySRGBToLinear(t) {
      return (this.r = It(t.r)), (this.g = It(t.g)), (this.b = It(t.b)), this
    }
    copyLinearToSRGB(t) {
      return (this.r = Nt(t.r)), (this.g = Nt(t.g)), (this.b = Nt(t.b)), this
    }
    convertSRGBToLinear() {
      return this.copySRGBToLinear(this), this
    }
    convertLinearToSRGB() {
      return this.copyLinearToSRGB(this), this
    }
    getHex() {
      return ((255 * this.r) << 16) ^ ((255 * this.g) << 8) ^ ((255 * this.b) << 0)
    }
    getHexString() {
      return ('000000' + this.getHex().toString(16)).slice(-6)
    }
    getHSL(t) {
      const e = this.r,
        n = this.g,
        i = this.b,
        r = Math.max(e, n, i),
        a = Math.min(e, n, i)
      let s, o
      const l = (a + r) / 2
      if (a === r) (s = 0), (o = 0)
      else {
        const t = r - a
        switch (((o = l <= 0.5 ? t / (r + a) : t / (2 - r - a)), r)) {
          case e:
            s = (n - i) / t + (n < i ? 6 : 0)
            break
          case n:
            s = (i - e) / t + 2
            break
          case i:
            s = (e - n) / t + 4
        }
        s /= 6
      }
      return (t.h = s), (t.s = o), (t.l = l), t
    }
    getStyle() {
      return 'rgb(' + ((255 * this.r) | 0) + ',' + ((255 * this.g) | 0) + ',' + ((255 * this.b) | 0) + ')'
    }
    offsetHSL(t, e, n) {
      return this.getHSL(Dt), (Dt.h += t), (Dt.s += e), (Dt.l += n), this.setHSL(Dt.h, Dt.s, Dt.l), this
    }
    add(t) {
      return (this.r += t.r), (this.g += t.g), (this.b += t.b), this
    }
    addColors(t, e) {
      return (this.r = t.r + e.r), (this.g = t.g + e.g), (this.b = t.b + e.b), this
    }
    addScalar(t) {
      return (this.r += t), (this.g += t), (this.b += t), this
    }
    sub(t) {
      return (
        (this.r = Math.max(0, this.r - t.r)),
        (this.g = Math.max(0, this.g - t.g)),
        (this.b = Math.max(0, this.b - t.b)),
        this
      )
    }
    multiply(t) {
      return (this.r *= t.r), (this.g *= t.g), (this.b *= t.b), this
    }
    multiplyScalar(t) {
      return (this.r *= t), (this.g *= t), (this.b *= t), this
    }
    lerp(t, e) {
      return (this.r += (t.r - this.r) * e), (this.g += (t.g - this.g) * e), (this.b += (t.b - this.b) * e), this
    }
    lerpColors(t, e, n) {
      return (this.r = t.r + (e.r - t.r) * n), (this.g = t.g + (e.g - t.g) * n), (this.b = t.b + (e.b - t.b) * n), this
    }
    lerpHSL(t, e) {
      this.getHSL(Dt), t.getHSL(Rt)
      const n = z(Dt.h, Rt.h, e),
        i = z(Dt.s, Rt.s, e),
        r = z(Dt.l, Rt.l, e)
      return this.setHSL(n, i, r), this
    }
    equals(t) {
      return t.r === this.r && t.g === this.g && t.b === this.b
    }
    fromArray(t, e = 0) {
      return (this.r = t[e]), (this.g = t[e + 1]), (this.b = t[e + 2]), this
    }
    toArray(t = [], e = 0) {
      return (t[e] = this.r), (t[e + 1] = this.g), (t[e + 2] = this.b), t
    }
    fromBufferAttribute(t, e) {
      return (
        (this.r = t.getX(e)),
        (this.g = t.getY(e)),
        (this.b = t.getZ(e)),
        !0 === t.normalized && ((this.r /= 255), (this.g /= 255), (this.b /= 255)),
        this
      )
    }
    toJSON() {
      return this.getHex()
    }
  }
  ;(zt.NAMES = Ct), (zt.prototype.isColor = !0), (zt.prototype.r = 1), (zt.prototype.g = 1), (zt.prototype.b = 1)
  const Ot = new B(),
    Ut = new Lt()
  class Ft {
    constructor(t, e, n) {
      if (Array.isArray(t)) throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.')
      ;(this.name = ''),
        (this.array = t),
        (this.itemSize = e),
        (this.count = void 0 !== t ? t.length / e : 0),
        (this.normalized = !0 === n),
        (this.usage = 35044),
        (this.updateRange = { offset: 0, count: -1 }),
        (this.version = 0)
    }
    onUploadCallback() {}
    set needsUpdate(t) {
      !0 === t && this.version++
    }
    setUsage(t) {
      return (this.usage = t), this
    }
    copy(t) {
      return (
        (this.name = t.name),
        (this.array = new t.array.constructor(t.array)),
        (this.itemSize = t.itemSize),
        (this.count = t.count),
        (this.normalized = t.normalized),
        (this.usage = t.usage),
        this
      )
    }
    copyAt(t, e, n) {
      ;(t *= this.itemSize), (n *= e.itemSize)
      for (let i = 0, r = this.itemSize; i < r; i++) this.array[t + i] = e.array[n + i]
      return this
    }
    copyArray(t) {
      return this.array.set(t), this
    }
    copyColorsArray(t) {
      const e = this.array
      let n = 0
      for (let i = 0, r = t.length; i < r; i++) {
        let r = t[i]
        void 0 === r &&
          (console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i), (r = new zt())),
          (e[n++] = r.r),
          (e[n++] = r.g),
          (e[n++] = r.b)
      }
      return this
    }
    copyVector2sArray(t) {
      const e = this.array
      let n = 0
      for (let i = 0, r = t.length; i < r; i++) {
        let r = t[i]
        void 0 === r &&
          (console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i), (r = new Lt())),
          (e[n++] = r.x),
          (e[n++] = r.y)
      }
      return this
    }
    copyVector3sArray(t) {
      const e = this.array
      let n = 0
      for (let i = 0, r = t.length; i < r; i++) {
        let r = t[i]
        void 0 === r &&
          (console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i), (r = new B())),
          (e[n++] = r.x),
          (e[n++] = r.y),
          (e[n++] = r.z)
      }
      return this
    }
    copyVector4sArray(t) {
      const e = this.array
      let n = 0
      for (let i = 0, r = t.length; i < r; i++) {
        let r = t[i]
        void 0 === r &&
          (console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i), (r = new wt())),
          (e[n++] = r.x),
          (e[n++] = r.y),
          (e[n++] = r.z),
          (e[n++] = r.w)
      }
      return this
    }
    applyMatrix3(t) {
      if (2 === this.itemSize)
        for (let e = 0, n = this.count; e < n; e++)
          Ut.fromBufferAttribute(this, e), Ut.applyMatrix3(t), this.setXY(e, Ut.x, Ut.y)
      else if (3 === this.itemSize)
        for (let e = 0, n = this.count; e < n; e++)
          Ot.fromBufferAttribute(this, e), Ot.applyMatrix3(t), this.setXYZ(e, Ot.x, Ot.y, Ot.z)
      return this
    }
    applyMatrix4(t) {
      for (let e = 0, n = this.count; e < n; e++)
        (Ot.x = this.getX(e)),
          (Ot.y = this.getY(e)),
          (Ot.z = this.getZ(e)),
          Ot.applyMatrix4(t),
          this.setXYZ(e, Ot.x, Ot.y, Ot.z)
      return this
    }
    applyNormalMatrix(t) {
      for (let e = 0, n = this.count; e < n; e++)
        (Ot.x = this.getX(e)),
          (Ot.y = this.getY(e)),
          (Ot.z = this.getZ(e)),
          Ot.applyNormalMatrix(t),
          this.setXYZ(e, Ot.x, Ot.y, Ot.z)
      return this
    }
    transformDirection(t) {
      for (let e = 0, n = this.count; e < n; e++)
        (Ot.x = this.getX(e)),
          (Ot.y = this.getY(e)),
          (Ot.z = this.getZ(e)),
          Ot.transformDirection(t),
          this.setXYZ(e, Ot.x, Ot.y, Ot.z)
      return this
    }
    set(t, e = 0) {
      return this.array.set(t, e), this
    }
    getX(t) {
      return this.array[t * this.itemSize]
    }
    setX(t, e) {
      return (this.array[t * this.itemSize] = e), this
    }
    getY(t) {
      return this.array[t * this.itemSize + 1]
    }
    setY(t, e) {
      return (this.array[t * this.itemSize + 1] = e), this
    }
    getZ(t) {
      return this.array[t * this.itemSize + 2]
    }
    setZ(t, e) {
      return (this.array[t * this.itemSize + 2] = e), this
    }
    getW(t) {
      return this.array[t * this.itemSize + 3]
    }
    setW(t, e) {
      return (this.array[t * this.itemSize + 3] = e), this
    }
    setXY(t, e, n) {
      return (t *= this.itemSize), (this.array[t + 0] = e), (this.array[t + 1] = n), this
    }
    setXYZ(t, e, n, i) {
      return (t *= this.itemSize), (this.array[t + 0] = e), (this.array[t + 1] = n), (this.array[t + 2] = i), this
    }
    setXYZW(t, e, n, i, r) {
      return (
        (t *= this.itemSize),
        (this.array[t + 0] = e),
        (this.array[t + 1] = n),
        (this.array[t + 2] = i),
        (this.array[t + 3] = r),
        this
      )
    }
    onUpload(t) {
      return (this.onUploadCallback = t), this
    }
    clone() {
      return new this.constructor(this.array, this.itemSize).copy(this)
    }
    toJSON() {
      const t = {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: Array.prototype.slice.call(this.array),
        normalized: this.normalized,
      }
      return (
        '' !== this.name && (t.name = this.name),
        35044 !== this.usage && (t.usage = this.usage),
        (0 === this.updateRange.offset && -1 === this.updateRange.count) || (t.updateRange = this.updateRange),
        t
      )
    }
  }
  Ft.prototype.isBufferAttribute = !0
  class Bt extends Ft {
    constructor(t, e, n) {
      super(new Uint16Array(t), e, n)
    }
  }
  class Gt extends Ft {
    constructor(t, e, n) {
      super(new Uint32Array(t), e, n)
    }
  }
  ;(class extends Ft {
    constructor(t, e, n) {
      super(new Uint16Array(t), e, n)
    }
  }.prototype.isFloat16BufferAttribute = !0)
  class Ht extends Ft {
    constructor(t, e, n) {
      super(new Float32Array(t), e, n)
    }
  }
  const Vt = new gt(),
    kt = new F()
  class Wt {
    constructor(t = 0, e = 0, n = 0, i = Wt.DefaultOrder) {
      ;(this._x = t), (this._y = e), (this._z = n), (this._order = i)
    }
    get x() {
      return this._x
    }
    set x(t) {
      ;(this._x = t), this._onChangeCallback()
    }
    get y() {
      return this._y
    }
    set y(t) {
      ;(this._y = t), this._onChangeCallback()
    }
    get z() {
      return this._z
    }
    set z(t) {
      ;(this._z = t), this._onChangeCallback()
    }
    get order() {
      return this._order
    }
    set order(t) {
      ;(this._order = t), this._onChangeCallback()
    }
    set(t, e, n, i = this._order) {
      return (this._x = t), (this._y = e), (this._z = n), (this._order = i), this._onChangeCallback(), this
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._order)
    }
    copy(t) {
      return (
        (this._x = t._x), (this._y = t._y), (this._z = t._z), (this._order = t._order), this._onChangeCallback(), this
      )
    }
    setFromRotationMatrix(t, e = this._order, n = !0) {
      const i = t.elements,
        r = i[0],
        a = i[4],
        s = i[8],
        o = i[1],
        l = i[5],
        c = i[9],
        h = i[2],
        u = i[6],
        d = i[10]
      switch (e) {
        case 'XYZ':
          ;(this._y = Math.asin(N(s, -1, 1))),
            Math.abs(s) < 0.9999999
              ? ((this._x = Math.atan2(-c, d)), (this._z = Math.atan2(-a, r)))
              : ((this._x = Math.atan2(u, l)), (this._z = 0))
          break
        case 'YXZ':
          ;(this._x = Math.asin(-N(c, -1, 1))),
            Math.abs(c) < 0.9999999
              ? ((this._y = Math.atan2(s, d)), (this._z = Math.atan2(o, l)))
              : ((this._y = Math.atan2(-h, r)), (this._z = 0))
          break
        case 'ZXY':
          ;(this._x = Math.asin(N(u, -1, 1))),
            Math.abs(u) < 0.9999999
              ? ((this._y = Math.atan2(-h, d)), (this._z = Math.atan2(-a, l)))
              : ((this._y = 0), (this._z = Math.atan2(o, r)))
          break
        case 'ZYX':
          ;(this._y = Math.asin(-N(h, -1, 1))),
            Math.abs(h) < 0.9999999
              ? ((this._x = Math.atan2(u, d)), (this._z = Math.atan2(o, r)))
              : ((this._x = 0), (this._z = Math.atan2(-a, l)))
          break
        case 'YZX':
          ;(this._z = Math.asin(N(o, -1, 1))),
            Math.abs(o) < 0.9999999
              ? ((this._x = Math.atan2(-c, l)), (this._y = Math.atan2(-h, r)))
              : ((this._x = 0), (this._y = Math.atan2(s, d)))
          break
        case 'XZY':
          ;(this._z = Math.asin(-N(a, -1, 1))),
            Math.abs(a) < 0.9999999
              ? ((this._x = Math.atan2(u, l)), (this._y = Math.atan2(s, r)))
              : ((this._x = Math.atan2(-c, d)), (this._y = 0))
          break
        default:
          console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + e)
      }
      return (this._order = e), !0 === n && this._onChangeCallback(), this
    }
    setFromQuaternion(t, e, n) {
      return Vt.makeRotationFromQuaternion(t), this.setFromRotationMatrix(Vt, e, n)
    }
    setFromVector3(t, e = this._order) {
      return this.set(t.x, t.y, t.z, e)
    }
    reorder(t) {
      return kt.setFromEuler(this), this.setFromQuaternion(kt, t)
    }
    equals(t) {
      return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order
    }
    fromArray(t) {
      return (
        (this._x = t[0]),
        (this._y = t[1]),
        (this._z = t[2]),
        void 0 !== t[3] && (this._order = t[3]),
        this._onChangeCallback(),
        this
      )
    }
    toArray(t = [], e = 0) {
      return (t[e] = this._x), (t[e + 1] = this._y), (t[e + 2] = this._z), (t[e + 3] = this._order), t
    }
    toVector3(t) {
      return t ? t.set(this._x, this._y, this._z) : new B(this._x, this._y, this._z)
    }
    _onChange(t) {
      return (this._onChangeCallback = t), this
    }
    _onChangeCallback() {}
  }
  ;(Wt.prototype.isEuler = !0),
    (Wt.DefaultOrder = 'XYZ'),
    (Wt.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'])
  class jt {
    constructor() {
      this.mask = 1
    }
    set(t) {
      this.mask = ((1 << t) | 0) >>> 0
    }
    enable(t) {
      this.mask |= (1 << t) | 0
    }
    enableAll() {
      this.mask = -1
    }
    toggle(t) {
      this.mask ^= (1 << t) | 0
    }
    disable(t) {
      this.mask &= ~((1 << t) | 0)
    }
    disableAll() {
      this.mask = 0
    }
    test(t) {
      return 0 != (this.mask & t.mask)
    }
    isEnabled(t) {
      return 0 != (this.mask & ((1 << t) | 0))
    }
  }
  let qt = 0
  const Xt = new B(),
    Yt = new F(),
    Zt = new gt(),
    Jt = new B(),
    Kt = new B(),
    Qt = new B(),
    $t = new F(),
    te = new B(1, 0, 0),
    ee = new B(0, 1, 0),
    ne = new B(0, 0, 1),
    ie = { type: 'added' },
    re = { type: 'removed' }
  class ae extends At {
    constructor() {
      super(),
        Object.defineProperty(this, 'id', { value: qt++ }),
        (this.uuid = I()),
        (this.name = ''),
        (this.type = 'Object3D'),
        (this.parent = null),
        (this.children = []),
        (this.up = ae.DefaultUp.clone())
      const t = new B(),
        e = new Wt(),
        n = new F(),
        i = new B(1, 1, 1)
      e._onChange(function () {
        n.setFromEuler(e, !1)
      }),
        n._onChange(function () {
          e.setFromQuaternion(n, void 0, !1)
        }),
        Object.defineProperties(this, {
          position: { configurable: !0, enumerable: !0, value: t },
          rotation: { configurable: !0, enumerable: !0, value: e },
          quaternion: { configurable: !0, enumerable: !0, value: n },
          scale: { configurable: !0, enumerable: !0, value: i },
          modelViewMatrix: { value: new gt() },
          normalMatrix: { value: new lt() },
        }),
        (this.matrix = new gt()),
        (this.matrixWorld = new gt()),
        (this.matrixAutoUpdate = ae.DefaultMatrixAutoUpdate),
        (this.matrixWorldNeedsUpdate = !1),
        (this.layers = new jt()),
        (this.visible = !0),
        (this.castShadow = !1),
        (this.receiveShadow = !1),
        (this.frustumCulled = !0),
        (this.renderOrder = 0),
        (this.animations = []),
        (this.userData = {})
    }
    onBeforeRender() {}
    onAfterRender() {}
    applyMatrix4(t) {
      this.matrixAutoUpdate && this.updateMatrix(),
        this.matrix.premultiply(t),
        this.matrix.decompose(this.position, this.quaternion, this.scale)
    }
    applyQuaternion(t) {
      return this.quaternion.premultiply(t), this
    }
    setRotationFromAxisAngle(t, e) {
      this.quaternion.setFromAxisAngle(t, e)
    }
    setRotationFromEuler(t) {
      this.quaternion.setFromEuler(t, !0)
    }
    setRotationFromMatrix(t) {
      this.quaternion.setFromRotationMatrix(t)
    }
    setRotationFromQuaternion(t) {
      this.quaternion.copy(t)
    }
    rotateOnAxis(t, e) {
      return Yt.setFromAxisAngle(t, e), this.quaternion.multiply(Yt), this
    }
    rotateOnWorldAxis(t, e) {
      return Yt.setFromAxisAngle(t, e), this.quaternion.premultiply(Yt), this
    }
    rotateX(t) {
      return this.rotateOnAxis(te, t)
    }
    rotateY(t) {
      return this.rotateOnAxis(ee, t)
    }
    rotateZ(t) {
      return this.rotateOnAxis(ne, t)
    }
    translateOnAxis(t, e) {
      return Xt.copy(t).applyQuaternion(this.quaternion), this.position.add(Xt.multiplyScalar(e)), this
    }
    translateX(t) {
      return this.translateOnAxis(te, t)
    }
    translateY(t) {
      return this.translateOnAxis(ee, t)
    }
    translateZ(t) {
      return this.translateOnAxis(ne, t)
    }
    localToWorld(t) {
      return t.applyMatrix4(this.matrixWorld)
    }
    worldToLocal(t) {
      return t.applyMatrix4(Zt.copy(this.matrixWorld).invert())
    }
    lookAt(t, e, n) {
      t.isVector3 ? Jt.copy(t) : Jt.set(t, e, n)
      const i = this.parent
      this.updateWorldMatrix(!0, !1),
        Kt.setFromMatrixPosition(this.matrixWorld),
        this.isCamera || this.isLight ? Zt.lookAt(Kt, Jt, this.up) : Zt.lookAt(Jt, Kt, this.up),
        this.quaternion.setFromRotationMatrix(Zt),
        i && (Zt.extractRotation(i.matrixWorld), Yt.setFromRotationMatrix(Zt), this.quaternion.premultiply(Yt.invert()))
    }
    add(t) {
      if (arguments.length > 1) {
        for (let t = 0; t < arguments.length; t++) this.add(arguments[t])
        return this
      }
      return t === this
        ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", t), this)
        : (t && t.isObject3D
            ? (null !== t.parent && t.parent.remove(t), (t.parent = this), this.children.push(t), t.dispatchEvent(ie))
            : console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', t),
          this)
    }
    remove(t) {
      if (arguments.length > 1) {
        for (let t = 0; t < arguments.length; t++) this.remove(arguments[t])
        return this
      }
      const e = this.children.indexOf(t)
      return -1 !== e && ((t.parent = null), this.children.splice(e, 1), t.dispatchEvent(re)), this
    }
    removeFromParent() {
      const t = this.parent
      return null !== t && t.remove(this), this
    }
    clear() {
      for (let t = 0; t < this.children.length; t++) {
        const e = this.children[t]
        ;(e.parent = null), e.dispatchEvent(re)
      }
      return (this.children.length = 0), this
    }
    attach(t) {
      return (
        this.updateWorldMatrix(!0, !1),
        Zt.copy(this.matrixWorld).invert(),
        null !== t.parent && (t.parent.updateWorldMatrix(!0, !1), Zt.multiply(t.parent.matrixWorld)),
        t.applyMatrix4(Zt),
        this.add(t),
        t.updateWorldMatrix(!1, !0),
        this
      )
    }
    getObjectById(t) {
      return this.getObjectByProperty('id', t)
    }
    getObjectByName(t) {
      return this.getObjectByProperty('name', t)
    }
    getObjectByProperty(t, e) {
      if (this[t] === e) return this
      for (let n = 0, i = this.children.length; n < i; n++) {
        const i = this.children[n].getObjectByProperty(t, e)
        if (void 0 !== i) return i
      }
    }
    getWorldPosition(t) {
      return this.updateWorldMatrix(!0, !1), t.setFromMatrixPosition(this.matrixWorld)
    }
    getWorldQuaternion(t) {
      return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Kt, t, Qt), t
    }
    getWorldScale(t) {
      return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Kt, $t, t), t
    }
    getWorldDirection(t) {
      this.updateWorldMatrix(!0, !1)
      const e = this.matrixWorld.elements
      return t.set(e[8], e[9], e[10]).normalize()
    }
    raycast() {}
    traverse(t) {
      t(this)
      const e = this.children
      for (let n = 0, i = e.length; n < i; n++) e[n].traverse(t)
    }
    traverseVisible(t) {
      if (!1 === this.visible) return
      t(this)
      const e = this.children
      for (let n = 0, i = e.length; n < i; n++) e[n].traverseVisible(t)
    }
    traverseAncestors(t) {
      const e = this.parent
      null !== e && (t(e), e.traverseAncestors(t))
    }
    updateMatrix() {
      this.matrix.compose(this.position, this.quaternion, this.scale), (this.matrixWorldNeedsUpdate = !0)
    }
    updateMatrixWorld(t) {
      this.matrixAutoUpdate && this.updateMatrix(),
        (this.matrixWorldNeedsUpdate || t) &&
          (null === this.parent
            ? this.matrixWorld.copy(this.matrix)
            : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix),
          (this.matrixWorldNeedsUpdate = !1),
          (t = !0))
      const e = this.children
      for (let n = 0, i = e.length; n < i; n++) e[n].updateMatrixWorld(t)
    }
    updateWorldMatrix(t, e) {
      const n = this.parent
      if (
        (!0 === t && null !== n && n.updateWorldMatrix(!0, !1),
        this.matrixAutoUpdate && this.updateMatrix(),
        null === this.parent
          ? this.matrixWorld.copy(this.matrix)
          : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix),
        !0 === e)
      ) {
        const t = this.children
        for (let e = 0, n = t.length; e < n; e++) t[e].updateWorldMatrix(!1, !0)
      }
    }
    toJSON(t) {
      const e = void 0 === t || 'string' == typeof t,
        n = {}
      e &&
        ((t = { geometries: {}, materials: {}, textures: {}, images: {}, shapes: {}, skeletons: {}, animations: {} }),
        (n.metadata = { version: 4.5, type: 'Object', generator: 'Object3D.toJSON' }))
      const i = {}
      function r(e, n) {
        return void 0 === e[n.uuid] && (e[n.uuid] = n.toJSON(t)), n.uuid
      }
      if (
        ((i.uuid = this.uuid),
        (i.type = this.type),
        '' !== this.name && (i.name = this.name),
        !0 === this.castShadow && (i.castShadow = !0),
        !0 === this.receiveShadow && (i.receiveShadow = !0),
        !1 === this.visible && (i.visible = !1),
        !1 === this.frustumCulled && (i.frustumCulled = !1),
        0 !== this.renderOrder && (i.renderOrder = this.renderOrder),
        '{}' !== JSON.stringify(this.userData) && (i.userData = this.userData),
        (i.layers = this.layers.mask),
        (i.matrix = this.matrix.toArray()),
        !1 === this.matrixAutoUpdate && (i.matrixAutoUpdate = !1),
        this.isInstancedMesh &&
          ((i.type = 'InstancedMesh'),
          (i.count = this.count),
          (i.instanceMatrix = this.instanceMatrix.toJSON()),
          null !== this.instanceColor && (i.instanceColor = this.instanceColor.toJSON())),
        this.isScene)
      )
        this.background &&
          (this.background.isColor
            ? (i.background = this.background.toJSON())
            : this.background.isTexture && (i.background = this.background.toJSON(t).uuid)),
          this.environment && this.environment.isTexture && (i.environment = this.environment.toJSON(t).uuid)
      else if (this.isMesh || this.isLine || this.isPoints) {
        i.geometry = r(t.geometries, this.geometry)
        const e = this.geometry.parameters
        if (void 0 !== e && void 0 !== e.shapes) {
          const n = e.shapes
          if (Array.isArray(n))
            for (let e = 0, i = n.length; e < i; e++) {
              const i = n[e]
              r(t.shapes, i)
            }
          else r(t.shapes, n)
        }
      }
      if (
        (this.isSkinnedMesh &&
          ((i.bindMode = this.bindMode),
          (i.bindMatrix = this.bindMatrix.toArray()),
          void 0 !== this.skeleton && (r(t.skeletons, this.skeleton), (i.skeleton = this.skeleton.uuid))),
        void 0 !== this.material)
      )
        if (Array.isArray(this.material)) {
          const e = []
          for (let n = 0, i = this.material.length; n < i; n++) e.push(r(t.materials, this.material[n]))
          i.material = e
        } else i.material = r(t.materials, this.material)
      if (this.children.length > 0) {
        i.children = []
        for (let e = 0; e < this.children.length; e++) i.children.push(this.children[e].toJSON(t).object)
      }
      if (this.animations.length > 0) {
        i.animations = []
        for (let e = 0; e < this.animations.length; e++) {
          const n = this.animations[e]
          i.animations.push(r(t.animations, n))
        }
      }
      if (e) {
        const e = a(t.geometries),
          i = a(t.materials),
          r = a(t.textures),
          s = a(t.images),
          o = a(t.shapes),
          l = a(t.skeletons),
          c = a(t.animations)
        e.length > 0 && (n.geometries = e),
          i.length > 0 && (n.materials = i),
          r.length > 0 && (n.textures = r),
          s.length > 0 && (n.images = s),
          o.length > 0 && (n.shapes = o),
          l.length > 0 && (n.skeletons = l),
          c.length > 0 && (n.animations = c)
      }
      return (n.object = i), n
      function a(t) {
        const e = []
        for (const n in t) {
          const i = t[n]
          delete i.metadata, e.push(i)
        }
        return e
      }
    }
    clone(t) {
      return new this.constructor().copy(this, t)
    }
    copy(t, e = !0) {
      if (
        ((this.name = t.name),
        this.up.copy(t.up),
        this.position.copy(t.position),
        (this.rotation.order = t.rotation.order),
        this.quaternion.copy(t.quaternion),
        this.scale.copy(t.scale),
        this.matrix.copy(t.matrix),
        this.matrixWorld.copy(t.matrixWorld),
        (this.matrixAutoUpdate = t.matrixAutoUpdate),
        (this.matrixWorldNeedsUpdate = t.matrixWorldNeedsUpdate),
        (this.layers.mask = t.layers.mask),
        (this.visible = t.visible),
        (this.castShadow = t.castShadow),
        (this.receiveShadow = t.receiveShadow),
        (this.frustumCulled = t.frustumCulled),
        (this.renderOrder = t.renderOrder),
        (this.userData = JSON.parse(JSON.stringify(t.userData))),
        !0 === e)
      )
        for (let e = 0; e < t.children.length; e++) {
          const n = t.children[e]
          this.add(n.clone())
        }
      return this
    }
  }
  function se(t) {
    if (0 === t.length) return -1 / 0
    let e = t[0]
    for (let n = 1, i = t.length; n < i; ++n) t[n] > e && (e = t[n])
    return e
  }
  function oe(t) {
    return document.createElementNS('http://www.w3.org/1999/xhtml', t)
  }
  ;(ae.DefaultUp = new B(0, 1, 0)), (ae.DefaultMatrixAutoUpdate = !0), (ae.prototype.isObject3D = !0)
  let le = 0
  const ce = new gt(),
    he = new ae(),
    ue = new B(),
    de = new V(),
    pe = new V(),
    me = new B()
  class fe extends At {
    constructor() {
      super(),
        Object.defineProperty(this, 'id', { value: le++ }),
        (this.uuid = I()),
        (this.name = ''),
        (this.type = 'BufferGeometry'),
        (this.index = null),
        (this.attributes = {}),
        (this.morphAttributes = {}),
        (this.morphTargetsRelative = !1),
        (this.groups = []),
        (this.boundingBox = null),
        (this.boundingSphere = null),
        (this.drawRange = { start: 0, count: 1 / 0 }),
        (this.userData = {})
    }
    getIndex() {
      return this.index
    }
    setIndex(t) {
      return Array.isArray(t) ? (this.index = new (se(t) > 65535 ? Gt : Bt)(t, 1)) : (this.index = t), this
    }
    getAttribute(t) {
      return this.attributes[t]
    }
    setAttribute(t, e) {
      return (this.attributes[t] = e), this
    }
    deleteAttribute(t) {
      return delete this.attributes[t], this
    }
    hasAttribute(t) {
      return void 0 !== this.attributes[t]
    }
    addGroup(t, e, n = 0) {
      this.groups.push({ start: t, count: e, materialIndex: n })
    }
    clearGroups() {
      this.groups = []
    }
    setDrawRange(t, e) {
      ;(this.drawRange.start = t), (this.drawRange.count = e)
    }
    applyMatrix4(t) {
      const e = this.attributes.position
      void 0 !== e && (e.applyMatrix4(t), (e.needsUpdate = !0))
      const n = this.attributes.normal
      if (void 0 !== n) {
        const e = new lt().getNormalMatrix(t)
        n.applyNormalMatrix(e), (n.needsUpdate = !0)
      }
      const i = this.attributes.tangent
      return (
        void 0 !== i && (i.transformDirection(t), (i.needsUpdate = !0)),
        null !== this.boundingBox && this.computeBoundingBox(),
        null !== this.boundingSphere && this.computeBoundingSphere(),
        this
      )
    }
    applyQuaternion(t) {
      return ce.makeRotationFromQuaternion(t), this.applyMatrix4(ce), this
    }
    rotateX(t) {
      return ce.makeRotationX(t), this.applyMatrix4(ce), this
    }
    rotateY(t) {
      return ce.makeRotationY(t), this.applyMatrix4(ce), this
    }
    rotateZ(t) {
      return ce.makeRotationZ(t), this.applyMatrix4(ce), this
    }
    translate(t, e, n) {
      return ce.makeTranslation(t, e, n), this.applyMatrix4(ce), this
    }
    scale(t, e, n) {
      return ce.makeScale(t, e, n), this.applyMatrix4(ce), this
    }
    lookAt(t) {
      return he.lookAt(t), he.updateMatrix(), this.applyMatrix4(he.matrix), this
    }
    center() {
      return this.computeBoundingBox(), this.boundingBox.getCenter(ue).negate(), this.translate(ue.x, ue.y, ue.z), this
    }
    setFromPoints(t) {
      const e = []
      for (let n = 0, i = t.length; n < i; n++) {
        const i = t[n]
        e.push(i.x, i.y, i.z || 0)
      }
      return this.setAttribute('position', new Ht(e, 3)), this
    }
    computeBoundingBox() {
      null === this.boundingBox && (this.boundingBox = new V())
      const t = this.attributes.position,
        e = this.morphAttributes.position
      if (t && t.isGLBufferAttribute)
        return (
          console.error(
            'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',
            this
          ),
          void this.boundingBox.set(new B(-1 / 0, -1 / 0, -1 / 0), new B(1 / 0, 1 / 0, 1 / 0))
        )
      if (void 0 !== t) {
        if ((this.boundingBox.setFromBufferAttribute(t), e))
          for (let t = 0, n = e.length; t < n; t++) {
            const n = e[t]
            de.setFromBufferAttribute(n),
              this.morphTargetsRelative
                ? (me.addVectors(this.boundingBox.min, de.min),
                  this.boundingBox.expandByPoint(me),
                  me.addVectors(this.boundingBox.max, de.max),
                  this.boundingBox.expandByPoint(me))
                : (this.boundingBox.expandByPoint(de.min), this.boundingBox.expandByPoint(de.max))
          }
      } else this.boundingBox.makeEmpty()
      ;(isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) &&
        console.error(
          'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',
          this
        )
    }
    computeBoundingSphere() {
      null === this.boundingSphere && (this.boundingSphere = new ot())
      const t = this.attributes.position,
        e = this.morphAttributes.position
      if (t && t.isGLBufferAttribute)
        return (
          console.error(
            'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',
            this
          ),
          void this.boundingSphere.set(new B(), 1 / 0)
        )
      if (t) {
        const n = this.boundingSphere.center
        if ((de.setFromBufferAttribute(t), e))
          for (let t = 0, n = e.length; t < n; t++) {
            const n = e[t]
            pe.setFromBufferAttribute(n),
              this.morphTargetsRelative
                ? (me.addVectors(de.min, pe.min),
                  de.expandByPoint(me),
                  me.addVectors(de.max, pe.max),
                  de.expandByPoint(me))
                : (de.expandByPoint(pe.min), de.expandByPoint(pe.max))
          }
        de.getCenter(n)
        let i = 0
        for (let e = 0, r = t.count; e < r; e++)
          me.fromBufferAttribute(t, e), (i = Math.max(i, n.distanceToSquared(me)))
        if (e)
          for (let r = 0, a = e.length; r < a; r++) {
            const a = e[r],
              s = this.morphTargetsRelative
            for (let e = 0, r = a.count; e < r; e++)
              me.fromBufferAttribute(a, e),
                s && (ue.fromBufferAttribute(t, e), me.add(ue)),
                (i = Math.max(i, n.distanceToSquared(me)))
          }
        ;(this.boundingSphere.radius = Math.sqrt(i)),
          isNaN(this.boundingSphere.radius) &&
            console.error(
              'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',
              this
            )
      }
    }
    computeTangents() {
      const t = this.index,
        e = this.attributes
      if (null === t || void 0 === e.position || void 0 === e.normal || void 0 === e.uv)
        return void console.error(
          'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)'
        )
      const n = t.array,
        i = e.position.array,
        r = e.normal.array,
        a = e.uv.array,
        s = i.length / 3
      void 0 === e.tangent && this.setAttribute('tangent', new Ft(new Float32Array(4 * s), 4))
      const o = e.tangent.array,
        l = [],
        c = []
      for (let t = 0; t < s; t++) (l[t] = new B()), (c[t] = new B())
      const h = new B(),
        u = new B(),
        d = new B(),
        p = new Lt(),
        m = new Lt(),
        f = new Lt(),
        g = new B(),
        v = new B()
      function _(t, e, n) {
        h.fromArray(i, 3 * t),
          u.fromArray(i, 3 * e),
          d.fromArray(i, 3 * n),
          p.fromArray(a, 2 * t),
          m.fromArray(a, 2 * e),
          f.fromArray(a, 2 * n),
          u.sub(h),
          d.sub(h),
          m.sub(p),
          f.sub(p)
        const r = 1 / (m.x * f.y - f.x * m.y)
        isFinite(r) &&
          (g.copy(u).multiplyScalar(f.y).addScaledVector(d, -m.y).multiplyScalar(r),
          v.copy(d).multiplyScalar(m.x).addScaledVector(u, -f.x).multiplyScalar(r),
          l[t].add(g),
          l[e].add(g),
          l[n].add(g),
          c[t].add(v),
          c[e].add(v),
          c[n].add(v))
      }
      let x = this.groups
      0 === x.length && (x = [{ start: 0, count: n.length }])
      for (let t = 0, e = x.length; t < e; ++t) {
        const e = x[t],
          i = e.start
        for (let t = i, r = i + e.count; t < r; t += 3) _(n[t + 0], n[t + 1], n[t + 2])
      }
      const M = new B(),
        y = new B(),
        S = new B(),
        b = new B()
      function w(t) {
        S.fromArray(r, 3 * t), b.copy(S)
        const e = l[t]
        M.copy(e), M.sub(S.multiplyScalar(S.dot(e))).normalize(), y.crossVectors(b, e)
        const n = y.dot(c[t]) < 0 ? -1 : 1
        ;(o[4 * t] = M.x), (o[4 * t + 1] = M.y), (o[4 * t + 2] = M.z), (o[4 * t + 3] = n)
      }
      for (let t = 0, e = x.length; t < e; ++t) {
        const e = x[t],
          i = e.start
        for (let t = i, r = i + e.count; t < r; t += 3) w(n[t + 0]), w(n[t + 1]), w(n[t + 2])
      }
    }
    computeVertexNormals() {
      const t = this.index,
        e = this.getAttribute('position')
      if (void 0 !== e) {
        let n = this.getAttribute('normal')
        if (void 0 === n) (n = new Ft(new Float32Array(3 * e.count), 3)), this.setAttribute('normal', n)
        else for (let t = 0, e = n.count; t < e; t++) n.setXYZ(t, 0, 0, 0)
        const i = new B(),
          r = new B(),
          a = new B(),
          s = new B(),
          o = new B(),
          l = new B(),
          c = new B(),
          h = new B()
        if (t)
          for (let u = 0, d = t.count; u < d; u += 3) {
            const d = t.getX(u + 0),
              p = t.getX(u + 1),
              m = t.getX(u + 2)
            i.fromBufferAttribute(e, d),
              r.fromBufferAttribute(e, p),
              a.fromBufferAttribute(e, m),
              c.subVectors(a, r),
              h.subVectors(i, r),
              c.cross(h),
              s.fromBufferAttribute(n, d),
              o.fromBufferAttribute(n, p),
              l.fromBufferAttribute(n, m),
              s.add(c),
              o.add(c),
              l.add(c),
              n.setXYZ(d, s.x, s.y, s.z),
              n.setXYZ(p, o.x, o.y, o.z),
              n.setXYZ(m, l.x, l.y, l.z)
          }
        else
          for (let t = 0, s = e.count; t < s; t += 3)
            i.fromBufferAttribute(e, t + 0),
              r.fromBufferAttribute(e, t + 1),
              a.fromBufferAttribute(e, t + 2),
              c.subVectors(a, r),
              h.subVectors(i, r),
              c.cross(h),
              n.setXYZ(t + 0, c.x, c.y, c.z),
              n.setXYZ(t + 1, c.x, c.y, c.z),
              n.setXYZ(t + 2, c.x, c.y, c.z)
        this.normalizeNormals(), (n.needsUpdate = !0)
      }
    }
    merge(t, e) {
      if (!t || !t.isBufferGeometry)
        return void console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', t)
      void 0 === e &&
        ((e = 0),
        console.warn(
          'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
        ))
      const n = this.attributes
      for (const i in n) {
        if (void 0 === t.attributes[i]) continue
        const r = n[i].array,
          a = t.attributes[i],
          s = a.array,
          o = a.itemSize * e,
          l = Math.min(s.length, r.length - o)
        for (let t = 0, e = o; t < l; t++, e++) r[e] = s[t]
      }
      return this
    }
    normalizeNormals() {
      const t = this.attributes.normal
      for (let e = 0, n = t.count; e < n; e++)
        me.fromBufferAttribute(t, e), me.normalize(), t.setXYZ(e, me.x, me.y, me.z)
    }
    toNonIndexed() {
      function t(t, e) {
        const n = t.array,
          i = t.itemSize,
          r = t.normalized,
          a = new n.constructor(e.length * i)
        let s = 0,
          o = 0
        for (let r = 0, l = e.length; r < l; r++) {
          s = t.isInterleavedBufferAttribute ? e[r] * t.data.stride + t.offset : e[r] * i
          for (let t = 0; t < i; t++) a[o++] = n[s++]
        }
        return new Ft(a, i, r)
      }
      if (null === this.index)
        return console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.'), this
      const e = new fe(),
        n = this.index.array,
        i = this.attributes
      for (const r in i) {
        const a = t(i[r], n)
        e.setAttribute(r, a)
      }
      const r = this.morphAttributes
      for (const i in r) {
        const a = [],
          s = r[i]
        for (let e = 0, i = s.length; e < i; e++) {
          const i = t(s[e], n)
          a.push(i)
        }
        e.morphAttributes[i] = a
      }
      e.morphTargetsRelative = this.morphTargetsRelative
      const a = this.groups
      for (let t = 0, n = a.length; t < n; t++) {
        const n = a[t]
        e.addGroup(n.start, n.count, n.materialIndex)
      }
      return e
    }
    toJSON() {
      const t = { metadata: { version: 4.5, type: 'BufferGeometry', generator: 'BufferGeometry.toJSON' } }
      if (
        ((t.uuid = this.uuid),
        (t.type = this.type),
        '' !== this.name && (t.name = this.name),
        Object.keys(this.userData).length > 0 && (t.userData = this.userData),
        void 0 !== this.parameters)
      ) {
        const e = this.parameters
        for (const n in e) void 0 !== e[n] && (t[n] = e[n])
        return t
      }
      t.data = { attributes: {} }
      const e = this.index
      null !== e && (t.data.index = { type: e.array.constructor.name, array: Array.prototype.slice.call(e.array) })
      const n = this.attributes
      for (const e in n) {
        const i = n[e]
        t.data.attributes[e] = i.toJSON(t.data)
      }
      const i = {}
      let r = !1
      for (const e in this.morphAttributes) {
        const n = this.morphAttributes[e],
          a = []
        for (let e = 0, i = n.length; e < i; e++) {
          const i = n[e]
          a.push(i.toJSON(t.data))
        }
        a.length > 0 && ((i[e] = a), (r = !0))
      }
      r && ((t.data.morphAttributes = i), (t.data.morphTargetsRelative = this.morphTargetsRelative))
      const a = this.groups
      a.length > 0 && (t.data.groups = JSON.parse(JSON.stringify(a)))
      const s = this.boundingSphere
      return null !== s && (t.data.boundingSphere = { center: s.center.toArray(), radius: s.radius }), t
    }
    clone() {
      return new this.constructor().copy(this)
    }
    copy(t) {
      ;(this.index = null),
        (this.attributes = {}),
        (this.morphAttributes = {}),
        (this.groups = []),
        (this.boundingBox = null),
        (this.boundingSphere = null)
      const e = {}
      this.name = t.name
      const n = t.index
      null !== n && this.setIndex(n.clone(e))
      const i = t.attributes
      for (const t in i) {
        const n = i[t]
        this.setAttribute(t, n.clone(e))
      }
      const r = t.morphAttributes
      for (const t in r) {
        const n = [],
          i = r[t]
        for (let t = 0, r = i.length; t < r; t++) n.push(i[t].clone(e))
        this.morphAttributes[t] = n
      }
      this.morphTargetsRelative = t.morphTargetsRelative
      const a = t.groups
      for (let t = 0, e = a.length; t < e; t++) {
        const e = a[t]
        this.addGroup(e.start, e.count, e.materialIndex)
      }
      const s = t.boundingBox
      null !== s && (this.boundingBox = s.clone())
      const o = t.boundingSphere
      return (
        null !== o && (this.boundingSphere = o.clone()),
        (this.drawRange.start = t.drawRange.start),
        (this.drawRange.count = t.drawRange.count),
        (this.userData = t.userData),
        void 0 !== t.parameters && (this.parameters = Object.assign({}, t.parameters)),
        this
      )
    }
    dispose() {
      this.dispatchEvent({ type: 'dispose' })
    }
  }
  fe.prototype.isBufferGeometry = !0
  class ge extends fe {
    constructor(t = 1, e = 1, n = 1, i = 1, r = 1, a = 1) {
      super(),
        (this.type = 'BoxGeometry'),
        (this.parameters = { width: t, height: e, depth: n, widthSegments: i, heightSegments: r, depthSegments: a })
      const s = this
      ;(i = Math.floor(i)), (r = Math.floor(r)), (a = Math.floor(a))
      const o = [],
        l = [],
        c = [],
        h = []
      let u = 0,
        d = 0
      function p(t, e, n, i, r, a, p, m, f, g, v) {
        const _ = a / f,
          x = p / g,
          M = a / 2,
          y = p / 2,
          S = m / 2,
          b = f + 1,
          w = g + 1
        let T = 0,
          E = 0
        const L = new B()
        for (let a = 0; a < w; a++) {
          const s = a * x - y
          for (let o = 0; o < b; o++) {
            const u = o * _ - M
            ;(L[t] = u * i),
              (L[e] = s * r),
              (L[n] = S),
              l.push(L.x, L.y, L.z),
              (L[t] = 0),
              (L[e] = 0),
              (L[n] = m > 0 ? 1 : -1),
              c.push(L.x, L.y, L.z),
              h.push(o / f),
              h.push(1 - a / g),
              (T += 1)
          }
        }
        for (let t = 0; t < g; t++)
          for (let e = 0; e < f; e++) {
            const n = u + e + b * t,
              i = u + e + b * (t + 1),
              r = u + (e + 1) + b * (t + 1),
              a = u + (e + 1) + b * t
            o.push(n, i, a), o.push(i, r, a), (E += 6)
          }
        s.addGroup(d, E, v), (d += E), (u += T)
      }
      p('z', 'y', 'x', -1, -1, n, e, t, a, r, 0),
        p('z', 'y', 'x', 1, -1, n, e, -t, a, r, 1),
        p('x', 'z', 'y', 1, 1, t, n, e, i, a, 2),
        p('x', 'z', 'y', 1, -1, t, n, -e, i, a, 3),
        p('x', 'y', 'z', 1, -1, t, e, n, i, r, 4),
        p('x', 'y', 'z', -1, -1, t, e, -n, i, r, 5),
        this.setIndex(o),
        this.setAttribute('position', new Ht(l, 3)),
        this.setAttribute('normal', new Ht(c, 3)),
        this.setAttribute('uv', new Ht(h, 2))
    }
    static fromJSON(t) {
      return new ge(t.width, t.height, t.depth, t.widthSegments, t.heightSegments, t.depthSegments)
    }
  }
  class ve extends fe {
    constructor(t = 1, e = 1, n = 1, i = 1) {
      super(),
        (this.type = 'PlaneGeometry'),
        (this.parameters = { width: t, height: e, widthSegments: n, heightSegments: i })
      const r = t / 2,
        a = e / 2,
        s = Math.floor(n),
        o = Math.floor(i),
        l = s + 1,
        c = o + 1,
        h = t / s,
        u = e / o,
        d = [],
        p = [],
        m = [],
        f = []
      for (let t = 0; t < c; t++) {
        const e = t * u - a
        for (let n = 0; n < l; n++) {
          const i = n * h - r
          p.push(i, -e, 0), m.push(0, 0, 1), f.push(n / s), f.push(1 - t / o)
        }
      }
      for (let t = 0; t < o; t++)
        for (let e = 0; e < s; e++) {
          const n = e + l * t,
            i = e + l * (t + 1),
            r = e + 1 + l * (t + 1),
            a = e + 1 + l * t
          d.push(n, i, a), d.push(i, r, a)
        }
      this.setIndex(d),
        this.setAttribute('position', new Ht(p, 3)),
        this.setAttribute('normal', new Ht(m, 3)),
        this.setAttribute('uv', new Ht(f, 2))
    }
    static fromJSON(t) {
      return new ve(t.width, t.height, t.widthSegments, t.heightSegments)
    }
  }
  let _e = 0
  class xe extends At {
    constructor() {
      super(),
        Object.defineProperty(this, 'id', { value: _e++ }),
        (this.uuid = I()),
        (this.name = ''),
        (this.type = 'Material'),
        (this.fog = !0),
        (this.blending = 1),
        (this.side = 0),
        (this.vertexColors = !1),
        (this.opacity = 1),
        (this.transparent = !1),
        (this.blendSrc = 204),
        (this.blendDst = 205),
        (this.blendEquation = n),
        (this.blendSrcAlpha = null),
        (this.blendDstAlpha = null),
        (this.blendEquationAlpha = null),
        (this.depthFunc = 3),
        (this.depthTest = !0),
        (this.depthWrite = !0),
        (this.stencilWriteMask = 255),
        (this.stencilFunc = 519),
        (this.stencilRef = 0),
        (this.stencilFuncMask = 255),
        (this.stencilFail = L),
        (this.stencilZFail = L),
        (this.stencilZPass = L),
        (this.stencilWrite = !1),
        (this.clippingPlanes = null),
        (this.clipIntersection = !1),
        (this.clipShadows = !1),
        (this.shadowSide = null),
        (this.colorWrite = !0),
        (this.alphaWrite = !0),
        (this.precision = null),
        (this.polygonOffset = !1),
        (this.polygonOffsetFactor = 0),
        (this.polygonOffsetUnits = 0),
        (this.dithering = !1),
        (this.alphaToCoverage = !1),
        (this.premultipliedAlpha = !1),
        (this.visible = !0),
        (this.toneMapped = !0),
        (this.userData = {}),
        (this.version = 0),
        (this._alphaTest = 0)
    }
    get alphaTest() {
      return this._alphaTest
    }
    set alphaTest(t) {
      this._alphaTest > 0 != t > 0 && this.version++, (this._alphaTest = t)
    }
    onBuild() {}
    onBeforeRender() {}
    onBeforeCompile() {}
    customProgramCacheKey() {
      return this.onBeforeCompile.toString()
    }
    setValues(t) {
      if (void 0 !== t)
        for (const e in t) {
          const n = t[e]
          if (void 0 === n) {
            console.warn("THREE.Material: '" + e + "' parameter is undefined.")
            continue
          }
          if ('shading' === e) {
            console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.'),
              (this.flatShading = 1 === n)
            continue
          }
          const i = this[e]
          void 0 !== i
            ? i && i.isColor
              ? i.set(n)
              : i && i.isVector3 && n && n.isVector3
              ? i.copy(n)
              : (this[e] = n)
            : console.warn('THREE.' + this.type + ": '" + e + "' is not a property of this material.")
        }
    }
    toJSON(t) {
      const e = void 0 === t || 'string' == typeof t
      e && (t = { textures: {}, images: {} })
      const n = { metadata: { version: 4.5, type: 'Material', generator: 'Material.toJSON' } }
      function i(t) {
        const e = []
        for (const n in t) {
          const i = t[n]
          delete i.metadata, e.push(i)
        }
        return e
      }
      if (
        ((n.uuid = this.uuid),
        (n.type = this.type),
        '' !== this.name && (n.name = this.name),
        this.color && this.color.isColor && (n.color = this.color.getHex()),
        void 0 !== this.roughness && (n.roughness = this.roughness),
        void 0 !== this.metalness && (n.metalness = this.metalness),
        void 0 !== this.sheen && (n.sheen = this.sheen),
        this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()),
        void 0 !== this.sheenRoughness && (n.sheenRoughness = this.sheenRoughness),
        this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()),
        this.emissiveIntensity && 1 !== this.emissiveIntensity && (n.emissiveIntensity = this.emissiveIntensity),
        this.specular && this.specular.isColor && (n.specular = this.specular.getHex()),
        void 0 !== this.specularIntensity && (n.specularIntensity = this.specularIntensity),
        this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()),
        void 0 !== this.shininess && (n.shininess = this.shininess),
        void 0 !== this.clearcoat && (n.clearcoat = this.clearcoat),
        void 0 !== this.clearcoatRoughness && (n.clearcoatRoughness = this.clearcoatRoughness),
        this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(t).uuid),
        this.clearcoatRoughnessMap &&
          this.clearcoatRoughnessMap.isTexture &&
          (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(t).uuid),
        this.clearcoatNormalMap &&
          this.clearcoatNormalMap.isTexture &&
          ((n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(t).uuid),
          (n.clearcoatNormalScale = this.clearcoatNormalScale.toArray())),
        this.map && this.map.isTexture && (n.map = this.map.toJSON(t).uuid),
        this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(t).uuid),
        this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(t).uuid),
        this.lightMap &&
          this.lightMap.isTexture &&
          ((n.lightMap = this.lightMap.toJSON(t).uuid), (n.lightMapIntensity = this.lightMapIntensity)),
        this.aoMap &&
          this.aoMap.isTexture &&
          ((n.aoMap = this.aoMap.toJSON(t).uuid), (n.aoMapIntensity = this.aoMapIntensity)),
        this.bumpMap &&
          this.bumpMap.isTexture &&
          ((n.bumpMap = this.bumpMap.toJSON(t).uuid), (n.bumpScale = this.bumpScale)),
        this.normalMap &&
          this.normalMap.isTexture &&
          ((n.normalMap = this.normalMap.toJSON(t).uuid),
          (n.normalMapType = this.normalMapType),
          (n.normalScale = this.normalScale.toArray())),
        this.displacementMap &&
          this.displacementMap.isTexture &&
          ((n.displacementMap = this.displacementMap.toJSON(t).uuid),
          (n.displacementScale = this.displacementScale),
          (n.displacementBias = this.displacementBias)),
        this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(t).uuid),
        this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(t).uuid),
        this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(t).uuid),
        this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(t).uuid),
        this.specularIntensityMap &&
          this.specularIntensityMap.isTexture &&
          (n.specularIntensityMap = this.specularIntensityMap.toJSON(t).uuid),
        this.specularColorMap &&
          this.specularColorMap.isTexture &&
          (n.specularColorMap = this.specularColorMap.toJSON(t).uuid),
        this.envMap &&
          this.envMap.isTexture &&
          ((n.envMap = this.envMap.toJSON(t).uuid), void 0 !== this.combine && (n.combine = this.combine)),
        void 0 !== this.envMapIntensity && (n.envMapIntensity = this.envMapIntensity),
        void 0 !== this.reflectivity && (n.reflectivity = this.reflectivity),
        void 0 !== this.refractionRatio && (n.refractionRatio = this.refractionRatio),
        this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(t).uuid),
        void 0 !== this.transmission && (n.transmission = this.transmission),
        this.transmissionMap &&
          this.transmissionMap.isTexture &&
          (n.transmissionMap = this.transmissionMap.toJSON(t).uuid),
        void 0 !== this.thickness && (n.thickness = this.thickness),
        this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(t).uuid),
        void 0 !== this.attenuationDistance && (n.attenuationDistance = this.attenuationDistance),
        void 0 !== this.attenuationColor && (n.attenuationColor = this.attenuationColor.getHex()),
        void 0 !== this.size && (n.size = this.size),
        null !== this.shadowSide && (n.shadowSide = this.shadowSide),
        void 0 !== this.sizeAttenuation && (n.sizeAttenuation = this.sizeAttenuation),
        1 !== this.blending && (n.blending = this.blending),
        0 !== this.side && (n.side = this.side),
        this.vertexColors && (n.vertexColors = !0),
        this.opacity < 1 && (n.opacity = this.opacity),
        !0 === this.transparent && (n.transparent = this.transparent),
        (n.depthFunc = this.depthFunc),
        (n.depthTest = this.depthTest),
        (n.depthWrite = this.depthWrite),
        (n.colorWrite = this.colorWrite),
        (n.alphaWrite = this.alphaWrite),
        (n.stencilWrite = this.stencilWrite),
        (n.stencilWriteMask = this.stencilWriteMask),
        (n.stencilFunc = this.stencilFunc),
        (n.stencilRef = this.stencilRef),
        (n.stencilFuncMask = this.stencilFuncMask),
        (n.stencilFail = this.stencilFail),
        (n.stencilZFail = this.stencilZFail),
        (n.stencilZPass = this.stencilZPass),
        this.rotation && 0 !== this.rotation && (n.rotation = this.rotation),
        !0 === this.polygonOffset && (n.polygonOffset = !0),
        0 !== this.polygonOffsetFactor && (n.polygonOffsetFactor = this.polygonOffsetFactor),
        0 !== this.polygonOffsetUnits && (n.polygonOffsetUnits = this.polygonOffsetUnits),
        this.linewidth && 1 !== this.linewidth && (n.linewidth = this.linewidth),
        void 0 !== this.dashSize && (n.dashSize = this.dashSize),
        void 0 !== this.gapSize && (n.gapSize = this.gapSize),
        void 0 !== this.scale && (n.scale = this.scale),
        !0 === this.dithering && (n.dithering = !0),
        this.alphaTest > 0 && (n.alphaTest = this.alphaTest),
        !0 === this.alphaToCoverage && (n.alphaToCoverage = this.alphaToCoverage),
        !0 === this.premultipliedAlpha && (n.premultipliedAlpha = this.premultipliedAlpha),
        !0 === this.wireframe && (n.wireframe = this.wireframe),
        this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth),
        'round' !== this.wireframeLinecap && (n.wireframeLinecap = this.wireframeLinecap),
        'round' !== this.wireframeLinejoin && (n.wireframeLinejoin = this.wireframeLinejoin),
        !0 === this.flatShading && (n.flatShading = this.flatShading),
        !1 === this.visible && (n.visible = !1),
        !1 === this.toneMapped && (n.toneMapped = !1),
        '{}' !== JSON.stringify(this.userData) && (n.userData = this.userData),
        e)
      ) {
        const e = i(t.textures),
          r = i(t.images)
        e.length > 0 && (n.textures = e), r.length > 0 && (n.images = r)
      }
      return n
    }
    clone() {
      return new this.constructor().copy(this)
    }
    copy(t) {
      ;(this.name = t.name),
        (this.fog = t.fog),
        (this.blending = t.blending),
        (this.side = t.side),
        (this.vertexColors = t.vertexColors),
        (this.opacity = t.opacity),
        (this.transparent = t.transparent),
        (this.blendSrc = t.blendSrc),
        (this.blendDst = t.blendDst),
        (this.blendEquation = t.blendEquation),
        (this.blendSrcAlpha = t.blendSrcAlpha),
        (this.blendDstAlpha = t.blendDstAlpha),
        (this.blendEquationAlpha = t.blendEquationAlpha),
        (this.depthFunc = t.depthFunc),
        (this.depthTest = t.depthTest),
        (this.depthWrite = t.depthWrite),
        (this.stencilWriteMask = t.stencilWriteMask),
        (this.stencilFunc = t.stencilFunc),
        (this.stencilRef = t.stencilRef),
        (this.stencilFuncMask = t.stencilFuncMask),
        (this.stencilFail = t.stencilFail),
        (this.stencilZFail = t.stencilZFail),
        (this.stencilZPass = t.stencilZPass),
        (this.stencilWrite = t.stencilWrite)
      const e = t.clippingPlanes
      let n = null
      if (null !== e) {
        const t = e.length
        n = new Array(t)
        for (let i = 0; i !== t; ++i) n[i] = e[i].clone()
      }
      return (
        (this.clippingPlanes = n),
        (this.clipIntersection = t.clipIntersection),
        (this.clipShadows = t.clipShadows),
        (this.shadowSide = t.shadowSide),
        (this.colorWrite = t.colorWrite),
        (this.alphaWrite = t.alphaWrite),
        (this.precision = t.precision),
        (this.polygonOffset = t.polygonOffset),
        (this.polygonOffsetFactor = t.polygonOffsetFactor),
        (this.polygonOffsetUnits = t.polygonOffsetUnits),
        (this.dithering = t.dithering),
        (this.alphaTest = t.alphaTest),
        (this.alphaToCoverage = t.alphaToCoverage),
        (this.premultipliedAlpha = t.premultipliedAlpha),
        (this.visible = t.visible),
        (this.toneMapped = t.toneMapped),
        (this.userData = JSON.parse(JSON.stringify(t.userData))),
        this
      )
    }
    dispose() {
      this.dispatchEvent({ type: 'dispose' })
    }
    set needsUpdate(t) {
      !0 === t && this.version++
    }
  }
  function Me(t) {
    const e = {}
    for (const n in t) {
      e[n] = {}
      for (const i in t[n]) {
        const r = t[n][i]
        r &&
        (r.isColor ||
          r.isMatrix3 ||
          r.isMatrix4 ||
          r.isVector2 ||
          r.isVector3 ||
          r.isVector4 ||
          r.isTexture ||
          r.isQuaternion)
          ? (e[n][i] = r.clone())
          : Array.isArray(r)
          ? (e[n][i] = r.slice())
          : (e[n][i] = r)
      }
    }
    return e
  }
  function ye(t) {
    const e = {}
    for (let n = 0; n < t.length; n++) {
      const i = Me(t[n])
      for (const t in i) e[t] = i[t]
    }
    return e
  }
  xe.prototype.isMaterial = !0
  const Se = { clone: Me, merge: ye }
  class be extends xe {
    constructor(t) {
      super(),
        (this.type = 'ShaderMaterial'),
        (this.defines = {}),
        (this.uniforms = {}),
        (this.vertexShader =
          'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}'),
        (this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}'),
        (this.linewidth = 1),
        (this.wireframe = !1),
        (this.wireframeLinewidth = 1),
        (this.fog = !1),
        (this.lights = !1),
        (this.clipping = !1),
        (this.extensions = { derivatives: !1, fragDepth: !1, drawBuffers: !1, shaderTextureLOD: !1 }),
        (this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv2: [0, 0] }),
        (this.index0AttributeName = void 0),
        (this.uniformsNeedUpdate = !1),
        (this.glslVersion = null),
        void 0 !== t &&
          (void 0 !== t.attributes &&
            console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.'),
          this.setValues(t))
    }
    copy(t) {
      return (
        super.copy(t),
        (this.fragmentShader = t.fragmentShader),
        (this.vertexShader = t.vertexShader),
        (this.uniforms = Me(t.uniforms)),
        (this.defines = Object.assign({}, t.defines)),
        (this.wireframe = t.wireframe),
        (this.wireframeLinewidth = t.wireframeLinewidth),
        (this.lights = t.lights),
        (this.clipping = t.clipping),
        (this.extensions = Object.assign({}, t.extensions)),
        (this.glslVersion = t.glslVersion),
        this
      )
    }
    toJSON(t) {
      const e = super.toJSON(t)
      ;(e.glslVersion = this.glslVersion), (e.uniforms = {})
      for (const n in this.uniforms) {
        const i = this.uniforms[n].value
        i && i.isTexture
          ? (e.uniforms[n] = { type: 't', value: i.toJSON(t).uuid })
          : i && i.isColor
          ? (e.uniforms[n] = { type: 'c', value: i.getHex() })
          : i && i.isVector2
          ? (e.uniforms[n] = { type: 'v2', value: i.toArray() })
          : i && i.isVector3
          ? (e.uniforms[n] = { type: 'v3', value: i.toArray() })
          : i && i.isVector4
          ? (e.uniforms[n] = { type: 'v4', value: i.toArray() })
          : i && i.isMatrix3
          ? (e.uniforms[n] = { type: 'm3', value: i.toArray() })
          : i && i.isMatrix4
          ? (e.uniforms[n] = { type: 'm4', value: i.toArray() })
          : (e.uniforms[n] = { value: i })
      }
      Object.keys(this.defines).length > 0 && (e.defines = this.defines),
        (e.vertexShader = this.vertexShader),
        (e.fragmentShader = this.fragmentShader)
      const n = {}
      for (const t in this.extensions) !0 === this.extensions[t] && (n[t] = !0)
      return Object.keys(n).length > 0 && (e.extensions = n), e
    }
  }
  be.prototype.isShaderMaterial = !0
  const we = new B(),
    Te = new B(),
    Ee = new B(),
    Le = new B(),
    Ae = new B(),
    Ce = new B(),
    De = new B()
  class Re {
    constructor(t = new B(), e = new B(0, 0, -1)) {
      ;(this.origin = t), (this.direction = e)
    }
    set(t, e) {
      return this.origin.copy(t), this.direction.copy(e), this
    }
    copy(t) {
      return this.origin.copy(t.origin), this.direction.copy(t.direction), this
    }
    at(t, e) {
      return e.copy(this.direction).multiplyScalar(t).add(this.origin)
    }
    lookAt(t) {
      return this.direction.copy(t).sub(this.origin).normalize(), this
    }
    recast(t) {
      return this.origin.copy(this.at(t, we)), this
    }
    closestPointToPoint(t, e) {
      e.subVectors(t, this.origin)
      const n = e.dot(this.direction)
      return n < 0 ? e.copy(this.origin) : e.copy(this.direction).multiplyScalar(n).add(this.origin)
    }
    distanceToPoint(t) {
      return Math.sqrt(this.distanceSqToPoint(t))
    }
    distanceSqToPoint(t) {
      const e = we.subVectors(t, this.origin).dot(this.direction)
      return e < 0
        ? this.origin.distanceToSquared(t)
        : (we.copy(this.direction).multiplyScalar(e).add(this.origin), we.distanceToSquared(t))
    }
    distanceSqToSegment(t, e, n, i) {
      Te.copy(t).add(e).multiplyScalar(0.5), Ee.copy(e).sub(t).normalize(), Le.copy(this.origin).sub(Te)
      const r = 0.5 * t.distanceTo(e),
        a = -this.direction.dot(Ee),
        s = Le.dot(this.direction),
        o = -Le.dot(Ee),
        l = Le.lengthSq(),
        c = Math.abs(1 - a * a)
      let h, u, d, p
      if (c > 0)
        if (((h = a * o - s), (u = a * s - o), (p = r * c), h >= 0))
          if (u >= -p)
            if (u <= p) {
              const t = 1 / c
              ;(h *= t), (u *= t), (d = h * (h + a * u + 2 * s) + u * (a * h + u + 2 * o) + l)
            } else (u = r), (h = Math.max(0, -(a * u + s))), (d = -h * h + u * (u + 2 * o) + l)
          else (u = -r), (h = Math.max(0, -(a * u + s))), (d = -h * h + u * (u + 2 * o) + l)
        else
          u <= -p
            ? ((h = Math.max(0, -(-a * r + s))),
              (u = h > 0 ? -r : Math.min(Math.max(-r, -o), r)),
              (d = -h * h + u * (u + 2 * o) + l))
            : u <= p
            ? ((h = 0), (u = Math.min(Math.max(-r, -o), r)), (d = u * (u + 2 * o) + l))
            : ((h = Math.max(0, -(a * r + s))),
              (u = h > 0 ? r : Math.min(Math.max(-r, -o), r)),
              (d = -h * h + u * (u + 2 * o) + l))
      else (u = a > 0 ? -r : r), (h = Math.max(0, -(a * u + s))), (d = -h * h + u * (u + 2 * o) + l)
      return (
        n && n.copy(this.direction).multiplyScalar(h).add(this.origin), i && i.copy(Ee).multiplyScalar(u).add(Te), d
      )
    }
    intersectSphere(t, e) {
      we.subVectors(t.center, this.origin)
      const n = we.dot(this.direction),
        i = we.dot(we) - n * n,
        r = t.radius * t.radius
      if (i > r) return null
      const a = Math.sqrt(r - i),
        s = n - a,
        o = n + a
      return s < 0 && o < 0 ? null : s < 0 ? this.at(o, e) : this.at(s, e)
    }
    intersectsSphere(t) {
      return this.distanceSqToPoint(t.center) <= t.radius * t.radius
    }
    distanceToPlane(t) {
      const e = t.normal.dot(this.direction)
      if (0 === e) return 0 === t.distanceToPoint(this.origin) ? 0 : null
      const n = -(this.origin.dot(t.normal) + t.constant) / e
      return n >= 0 ? n : null
    }
    intersectPlane(t, e) {
      const n = this.distanceToPlane(t)
      return null === n ? null : this.at(n, e)
    }
    intersectsPlane(t) {
      const e = t.distanceToPoint(this.origin)
      if (0 === e) return !0
      return t.normal.dot(this.direction) * e < 0
    }
    intersectBox(t, e) {
      let n, i, r, a, s, o
      const l = 1 / this.direction.x,
        c = 1 / this.direction.y,
        h = 1 / this.direction.z,
        u = this.origin
      return (
        l >= 0
          ? ((n = (t.min.x - u.x) * l), (i = (t.max.x - u.x) * l))
          : ((n = (t.max.x - u.x) * l), (i = (t.min.x - u.x) * l)),
        c >= 0
          ? ((r = (t.min.y - u.y) * c), (a = (t.max.y - u.y) * c))
          : ((r = (t.max.y - u.y) * c), (a = (t.min.y - u.y) * c)),
        n > a || r > i
          ? null
          : ((r > n || n != n) && (n = r),
            (a < i || i != i) && (i = a),
            h >= 0
              ? ((s = (t.min.z - u.z) * h), (o = (t.max.z - u.z) * h))
              : ((s = (t.max.z - u.z) * h), (o = (t.min.z - u.z) * h)),
            n > o || s > i
              ? null
              : ((s > n || n != n) && (n = s), (o < i || i != i) && (i = o), i < 0 ? null : this.at(n >= 0 ? n : i, e)))
      )
    }
    intersectsBox(t) {
      return null !== this.intersectBox(t, we)
    }
    intersectTriangle(t, e, n, i, r) {
      Ae.subVectors(e, t), Ce.subVectors(n, t), De.crossVectors(Ae, Ce)
      let a,
        s = this.direction.dot(De)
      if (s > 0) {
        if (i) return null
        a = 1
      } else {
        if (!(s < 0)) return null
        ;(a = -1), (s = -s)
      }
      Le.subVectors(this.origin, t)
      const o = a * this.direction.dot(Ce.crossVectors(Le, Ce))
      if (o < 0) return null
      const l = a * this.direction.dot(Ae.cross(Le))
      if (l < 0) return null
      if (o + l > s) return null
      const c = -a * Le.dot(De)
      return c < 0 ? null : this.at(c / s, r)
    }
    applyMatrix4(t) {
      return this.origin.applyMatrix4(t), this.direction.transformDirection(t), this
    }
    equals(t) {
      return t.origin.equals(this.origin) && t.direction.equals(this.direction)
    }
    clone() {
      return new this.constructor().copy(this)
    }
  }
  const Pe = new B(),
    Ie = new B(),
    Ne = new B(),
    ze = new B(),
    Oe = new B(),
    Ue = new B(),
    Fe = new B(),
    Be = new B(),
    Ge = new B(),
    He = new B()
  class Ve {
    constructor(t = new B(), e = new B(), n = new B()) {
      ;(this.a = t), (this.b = e), (this.c = n)
    }
    static getNormal(t, e, n, i) {
      i.subVectors(n, e), Pe.subVectors(t, e), i.cross(Pe)
      const r = i.lengthSq()
      return r > 0 ? i.multiplyScalar(1 / Math.sqrt(r)) : i.set(0, 0, 0)
    }
    static getBarycoord(t, e, n, i, r) {
      Pe.subVectors(i, e), Ie.subVectors(n, e), Ne.subVectors(t, e)
      const a = Pe.dot(Pe),
        s = Pe.dot(Ie),
        o = Pe.dot(Ne),
        l = Ie.dot(Ie),
        c = Ie.dot(Ne),
        h = a * l - s * s
      if (0 === h) return r.set(-2, -1, -1)
      const u = 1 / h,
        d = (l * o - s * c) * u,
        p = (a * c - s * o) * u
      return r.set(1 - d - p, p, d)
    }
    static containsPoint(t, e, n, i) {
      return this.getBarycoord(t, e, n, i, ze), ze.x >= 0 && ze.y >= 0 && ze.x + ze.y <= 1
    }
    static getUV(t, e, n, i, r, a, s, o) {
      return (
        this.getBarycoord(t, e, n, i, ze),
        o.set(0, 0),
        o.addScaledVector(r, ze.x),
        o.addScaledVector(a, ze.y),
        o.addScaledVector(s, ze.z),
        o
      )
    }
    static isFrontFacing(t, e, n, i) {
      return Pe.subVectors(n, e), Ie.subVectors(t, e), Pe.cross(Ie).dot(i) < 0
    }
    set(t, e, n) {
      return this.a.copy(t), this.b.copy(e), this.c.copy(n), this
    }
    setFromPointsAndIndices(t, e, n, i) {
      return this.a.copy(t[e]), this.b.copy(t[n]), this.c.copy(t[i]), this
    }
    setFromAttributeAndIndices(t, e, n, i) {
      return this.a.fromBufferAttribute(t, e), this.b.fromBufferAttribute(t, n), this.c.fromBufferAttribute(t, i), this
    }
    clone() {
      return new this.constructor().copy(this)
    }
    copy(t) {
      return this.a.copy(t.a), this.b.copy(t.b), this.c.copy(t.c), this
    }
    getArea() {
      return Pe.subVectors(this.c, this.b), Ie.subVectors(this.a, this.b), 0.5 * Pe.cross(Ie).length()
    }
    getMidpoint(t) {
      return t
        .addVectors(this.a, this.b)
        .add(this.c)
        .multiplyScalar(1 / 3)
    }
    getNormal(t) {
      return Ve.getNormal(this.a, this.b, this.c, t)
    }
    getPlane(t) {
      return t.setFromCoplanarPoints(this.a, this.b, this.c)
    }
    getBarycoord(t, e) {
      return Ve.getBarycoord(t, this.a, this.b, this.c, e)
    }
    getUV(t, e, n, i, r) {
      return Ve.getUV(t, this.a, this.b, this.c, e, n, i, r)
    }
    containsPoint(t) {
      return Ve.containsPoint(t, this.a, this.b, this.c)
    }
    isFrontFacing(t) {
      return Ve.isFrontFacing(this.a, this.b, this.c, t)
    }
    intersectsBox(t) {
      return t.intersectsTriangle(this)
    }
    closestPointToPoint(t, e) {
      const n = this.a,
        i = this.b,
        r = this.c
      let a, s
      Oe.subVectors(i, n), Ue.subVectors(r, n), Be.subVectors(t, n)
      const o = Oe.dot(Be),
        l = Ue.dot(Be)
      if (o <= 0 && l <= 0) return e.copy(n)
      Ge.subVectors(t, i)
      const c = Oe.dot(Ge),
        h = Ue.dot(Ge)
      if (c >= 0 && h <= c) return e.copy(i)
      const u = o * h - c * l
      if (u <= 0 && o >= 0 && c <= 0) return (a = o / (o - c)), e.copy(n).addScaledVector(Oe, a)
      He.subVectors(t, r)
      const d = Oe.dot(He),
        p = Ue.dot(He)
      if (p >= 0 && d <= p) return e.copy(r)
      const m = d * l - o * p
      if (m <= 0 && l >= 0 && p <= 0) return (s = l / (l - p)), e.copy(n).addScaledVector(Ue, s)
      const f = c * p - d * h
      if (f <= 0 && h - c >= 0 && d - p >= 0)
        return Fe.subVectors(r, i), (s = (h - c) / (h - c + (d - p))), e.copy(i).addScaledVector(Fe, s)
      const g = 1 / (f + m + u)
      return (a = m * g), (s = u * g), e.copy(n).addScaledVector(Oe, a).addScaledVector(Ue, s)
    }
    equals(t) {
      return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c)
    }
  }
  class ke extends xe {
    constructor(t) {
      super(),
        (this.type = 'MeshBasicMaterial'),
        (this.color = new zt(16777215)),
        (this.map = null),
        (this.lightMap = null),
        (this.lightMapIntensity = 1),
        (this.aoMap = null),
        (this.aoMapIntensity = 1),
        (this.specularMap = null),
        (this.alphaMap = null),
        (this.envMap = null),
        (this.combine = 0),
        (this.reflectivity = 1),
        (this.refractionRatio = 0.98),
        (this.wireframe = !1),
        (this.wireframeLinewidth = 1),
        (this.wireframeLinecap = 'round'),
        (this.wireframeLinejoin = 'round'),
        this.setValues(t)
    }
    copy(t) {
      return (
        super.copy(t),
        this.color.copy(t.color),
        (this.map = t.map),
        (this.lightMap = t.lightMap),
        (this.lightMapIntensity = t.lightMapIntensity),
        (this.aoMap = t.aoMap),
        (this.aoMapIntensity = t.aoMapIntensity),
        (this.specularMap = t.specularMap),
        (this.alphaMap = t.alphaMap),
        (this.envMap = t.envMap),
        (this.combine = t.combine),
        (this.reflectivity = t.reflectivity),
        (this.refractionRatio = t.refractionRatio),
        (this.wireframe = t.wireframe),
        (this.wireframeLinewidth = t.wireframeLinewidth),
        (this.wireframeLinecap = t.wireframeLinecap),
        (this.wireframeLinejoin = t.wireframeLinejoin),
        this
      )
    }
  }
  ke.prototype.isMeshBasicMaterial = !0
  const We = new gt(),
    je = new Re(),
    qe = new ot(),
    Xe = new B(),
    Ye = new B(),
    Ze = new B(),
    Je = new B(),
    Ke = new B(),
    Qe = new B(),
    $e = new B(),
    tn = new B(),
    en = new B(),
    nn = new Lt(),
    rn = new Lt(),
    an = new Lt(),
    sn = new B(),
    on = new B()
  class ln extends ae {
    constructor(t = new fe(), e = new ke()) {
      super(), (this.type = 'Mesh'), (this.geometry = t), (this.material = e), this.updateMorphTargets()
    }
    copy(t) {
      return (
        super.copy(t),
        void 0 !== t.morphTargetInfluences && (this.morphTargetInfluences = t.morphTargetInfluences.slice()),
        void 0 !== t.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, t.morphTargetDictionary)),
        (this.material = t.material),
        (this.geometry = t.geometry),
        this
      )
    }
    updateMorphTargets() {
      const t = this.geometry
      if (t.isBufferGeometry) {
        const e = t.morphAttributes,
          n = Object.keys(e)
        if (n.length > 0) {
          const t = e[n[0]]
          if (void 0 !== t) {
            ;(this.morphTargetInfluences = []), (this.morphTargetDictionary = {})
            for (let e = 0, n = t.length; e < n; e++) {
              const n = t[e].name || String(e)
              this.morphTargetInfluences.push(0), (this.morphTargetDictionary[n] = e)
            }
          }
        }
      } else {
        const e = t.morphTargets
        void 0 !== e &&
          e.length > 0 &&
          console.error(
            'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.'
          )
      }
    }
    raycast(t, e) {
      const n = this.geometry,
        i = this.material,
        r = this.matrixWorld
      if (void 0 === i) return
      if (
        (null === n.boundingSphere && n.computeBoundingSphere(),
        qe.copy(n.boundingSphere),
        qe.applyMatrix4(r),
        !1 === t.ray.intersectsSphere(qe))
      )
        return
      if (
        (We.copy(r).invert(),
        je.copy(t.ray).applyMatrix4(We),
        null !== n.boundingBox && !1 === je.intersectsBox(n.boundingBox))
      )
        return
      let a
      if (n.isBufferGeometry) {
        const r = n.index,
          s = n.attributes.position,
          o = n.morphAttributes.position,
          l = n.morphTargetsRelative,
          c = n.attributes.uv,
          h = n.attributes.uv2,
          u = n.groups,
          d = n.drawRange
        if (null !== r)
          if (Array.isArray(i))
            for (let n = 0, p = u.length; n < p; n++) {
              const p = u[n],
                m = i[p.materialIndex]
              for (
                let n = Math.max(p.start, d.start),
                  i = Math.min(r.count, Math.min(p.start + p.count, d.start + d.count));
                n < i;
                n += 3
              ) {
                const i = r.getX(n),
                  u = r.getX(n + 1),
                  d = r.getX(n + 2)
                ;(a = cn(this, m, t, je, s, o, l, c, h, i, u, d)),
                  a && ((a.faceIndex = Math.floor(n / 3)), (a.face.materialIndex = p.materialIndex), e.push(a))
              }
            }
          else {
            for (let n = Math.max(0, d.start), u = Math.min(r.count, d.start + d.count); n < u; n += 3) {
              const u = r.getX(n),
                d = r.getX(n + 1),
                p = r.getX(n + 2)
              ;(a = cn(this, i, t, je, s, o, l, c, h, u, d, p)), a && ((a.faceIndex = Math.floor(n / 3)), e.push(a))
            }
          }
        else if (void 0 !== s)
          if (Array.isArray(i))
            for (let n = 0, r = u.length; n < r; n++) {
              const r = u[n],
                p = i[r.materialIndex]
              for (
                let n = Math.max(r.start, d.start),
                  i = Math.min(s.count, Math.min(r.start + r.count, d.start + d.count));
                n < i;
                n += 3
              ) {
                ;(a = cn(this, p, t, je, s, o, l, c, h, n, n + 1, n + 2)),
                  a && ((a.faceIndex = Math.floor(n / 3)), (a.face.materialIndex = r.materialIndex), e.push(a))
              }
            }
          else {
            for (let n = Math.max(0, d.start), r = Math.min(s.count, d.start + d.count); n < r; n += 3) {
              ;(a = cn(this, i, t, je, s, o, l, c, h, n, n + 1, n + 2)),
                a && ((a.faceIndex = Math.floor(n / 3)), e.push(a))
            }
          }
      } else n.isGeometry && console.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.')
    }
  }
  function cn(t, e, n, i, r, a, s, o, l, c, h, u) {
    Xe.fromBufferAttribute(r, c), Ye.fromBufferAttribute(r, h), Ze.fromBufferAttribute(r, u)
    const d = t.morphTargetInfluences
    if (a && d) {
      $e.set(0, 0, 0), tn.set(0, 0, 0), en.set(0, 0, 0)
      for (let t = 0, e = a.length; t < e; t++) {
        const e = d[t],
          n = a[t]
        0 !== e &&
          (Je.fromBufferAttribute(n, c),
          Ke.fromBufferAttribute(n, h),
          Qe.fromBufferAttribute(n, u),
          s
            ? ($e.addScaledVector(Je, e), tn.addScaledVector(Ke, e), en.addScaledVector(Qe, e))
            : ($e.addScaledVector(Je.sub(Xe), e), tn.addScaledVector(Ke.sub(Ye), e), en.addScaledVector(Qe.sub(Ze), e)))
      }
      Xe.add($e), Ye.add(tn), Ze.add(en)
    }
    t.isSkinnedMesh && (t.boneTransform(c, Xe), t.boneTransform(h, Ye), t.boneTransform(u, Ze))
    const p = (function (t, e, n, i, r, a, s, o) {
      let l
      if (
        ((l = 1 === e.side ? i.intersectTriangle(s, a, r, !0, o) : i.intersectTriangle(r, a, s, 2 !== e.side, o)),
        null === l)
      )
        return null
      on.copy(o), on.applyMatrix4(t.matrixWorld)
      const c = n.ray.origin.distanceTo(on)
      return c < n.near || c > n.far ? null : { distance: c, point: on.clone(), object: t }
    })(t, e, n, i, Xe, Ye, Ze, sn)
    if (p) {
      o &&
        (nn.fromBufferAttribute(o, c),
        rn.fromBufferAttribute(o, h),
        an.fromBufferAttribute(o, u),
        (p.uv = Ve.getUV(sn, Xe, Ye, Ze, nn, rn, an, new Lt()))),
        l &&
          (nn.fromBufferAttribute(l, c),
          rn.fromBufferAttribute(l, h),
          an.fromBufferAttribute(l, u),
          (p.uv2 = Ve.getUV(sn, Xe, Ye, Ze, nn, rn, an, new Lt())))
      const t = { a: c, b: h, c: u, normal: new B(), materialIndex: 0 }
      Ve.getNormal(Xe, Ye, Ze, t.normal), (p.face = t)
    }
    return p
  }
  ln.prototype.isMesh = !0
  const hn = {
      alphamap_fragment: '#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif',
      alphamap_pars_fragment: '#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif',
      alphatest_fragment: '#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif',
      alphatest_pars_fragment: '#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif',
      aomap_fragment:
        '#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif',
      aomap_pars_fragment: '#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif',
      begin_vertex: 'vec3 transformed = vec3( position );',
      beginnormal_vertex:
        'vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif',
      bsdfs:
        'vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif',
      bumpmap_pars_fragment:
        '#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif',
      clipping_planes_fragment:
        '#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif',
      clipping_planes_pars_fragment:
        '#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif',
      clipping_planes_pars_vertex: '#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif',
      clipping_planes_vertex: '#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif',
      color_fragment:
        '#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif',
      color_pars_fragment:
        '#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif',
      color_pars_vertex:
        '#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif',
      color_vertex:
        '#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif',
      common:
        '#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}',
      cube_uv_reflection_fragment:
        '#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\treturn texture2D( envMap, uv ).rgb;\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif',
      defaultnormal_vertex:
        'vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif',
      displacementmap_pars_vertex:
        '#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif',
      displacementmap_vertex:
        '#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif',
      emissivemap_fragment:
        '#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif',
      emissivemap_pars_fragment: '#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif',
      encodings_fragment: 'gl_FragColor = linearToOutputTexel( gl_FragColor );',
      encodings_pars_fragment:
        'vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}',
      envmap_fragment:
        '#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif',
      envmap_common_pars_fragment:
        '#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif',
      envmap_pars_fragment:
        '#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif',
      envmap_pars_vertex:
        '#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif',
      envmap_physical_pars_fragment:
        '#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif',
      envmap_vertex:
        '#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif',
      fog_vertex: '#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif',
      fog_pars_vertex: '#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif',
      fog_fragment:
        '#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif',
      fog_pars_fragment:
        '#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif',
      gradientmap_pars_fragment:
        '#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}',
      lightmap_fragment:
        '#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif',
      lightmap_pars_fragment:
        '#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif',
      lights_lambert_vertex:
        'vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif',
      lights_pars_begin:
        'uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif',
      lights_toon_fragment: 'ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;',
      lights_toon_pars_fragment:
        'varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)',
      lights_phong_fragment:
        'BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;',
      lights_phong_pars_fragment:
        'varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)',
      lights_physical_fragment:
        'PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif',
      lights_physical_pars_fragment:
        'struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(\t\t0, 1,\t\t0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}',
      lights_fragment_begin:
        '\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif',
      lights_fragment_maps:
        '#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif',
      lights_fragment_end:
        '#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif',
      logdepthbuf_fragment:
        '#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif',
      logdepthbuf_pars_fragment:
        '#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif',
      logdepthbuf_pars_vertex:
        '#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif',
      logdepthbuf_vertex:
        '#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif',
      map_fragment:
        '#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif',
      map_pars_fragment: '#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif',
      map_particle_fragment:
        '#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif',
      map_particle_pars_fragment:
        '#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif',
      metalnessmap_fragment:
        'float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif',
      metalnessmap_pars_fragment: '#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif',
      morphnormal_vertex:
        '#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif',
      morphtarget_pars_vertex:
        '#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\n\t\t\tfloat texelIndex = float( vertexIndex * stride + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV ).xyz;\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif',
      morphtarget_vertex:
        '#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\t#ifndef USE_MORPHNORMALS\n\t\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n\t\t\t#else\n\t\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n\t\t\t#endif\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif',
      normal_fragment_begin:
        'float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;',
      normal_fragment_maps:
        '#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif',
      normal_pars_fragment:
        '#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif',
      normal_pars_vertex:
        '#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif',
      normal_vertex:
        '#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif',
      normalmap_pars_fragment:
        '#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif',
      clearcoat_normal_fragment_begin: '#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif',
      clearcoat_normal_fragment_maps:
        '#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif',
      clearcoat_pars_fragment:
        '#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif',
      output_fragment:
        '#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );',
      packing:
        'vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}',
      premultiplied_alpha_fragment: '#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif',
      project_vertex:
        'vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;',
      dithering_fragment: '#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif',
      dithering_pars_fragment:
        '#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif',
      roughnessmap_fragment:
        'float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif',
      roughnessmap_pars_fragment: '#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif',
      shadowmap_pars_fragment:
        '#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t\tf.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t\tf.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif',
      shadowmap_pars_vertex:
        '#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif',
      shadowmap_vertex:
        '#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif',
      shadowmask_pars_fragment:
        'float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}',
      skinbase_vertex:
        '#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif',
      skinning_pars_vertex:
        '#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif',
      skinning_vertex:
        '#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif',
      skinnormal_vertex:
        '#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif',
      specularmap_fragment:
        'float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif',
      specularmap_pars_fragment: '#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif',
      tonemapping_fragment:
        '#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif',
      tonemapping_pars_fragment:
        '#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(\t1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,\t1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,\t1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }',
      transmission_fragment:
        '#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif',
      transmission_pars_fragment:
        '#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif',
      uv_pars_fragment: '#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif',
      uv_pars_vertex:
        '#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif',
      uv_vertex: '#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif',
      uv2_pars_fragment: '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif',
      uv2_pars_vertex:
        '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif',
      uv2_vertex:
        '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif',
      worldpos_vertex:
        '#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif',
      background_vert:
        'varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}',
      background_frag:
        'uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}',
      cube_vert:
        'varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}',
      cube_frag:
        '#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}',
      depth_vert:
        '#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}',
      depth_frag:
        '#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}',
      distanceRGBA_vert:
        '#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}',
      distanceRGBA_frag:
        '#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}',
      equirect_vert:
        'varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}',
      equirect_frag:
        'uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}',
      linedashed_vert:
        'uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}',
      linedashed_frag:
        'uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}',
      meshbasic_vert:
        '#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}',
      meshbasic_frag:
        'uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}',
      meshlambert_vert:
        '#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}',
      meshlambert_frag:
        'uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}',
      meshmatcap_vert:
        '#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}',
      meshmatcap_frag:
        '#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}',
      meshnormal_vert:
        '#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}',
      meshnormal_frag:
        '#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}',
      meshphong_vert:
        '#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}',
      meshphong_frag:
        '#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}',
      meshphysical_vert:
        '#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}',
      meshphysical_frag:
        '#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}',
      meshtoon_vert:
        '#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}',
      meshtoon_frag:
        '#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}',
      points_vert:
        'uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}',
      points_frag:
        'uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}',
      shadow_vert:
        '#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}',
      shadow_frag:
        'uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}',
      sprite_vert:
        'uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}',
      sprite_frag:
        'uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}',
    },
    un = {
      common: {
        diffuse: { value: new zt(16777215) },
        opacity: { value: 1 },
        map: { value: null },
        uvTransform: { value: new lt() },
        uv2Transform: { value: new lt() },
        alphaMap: { value: null },
        alphaTest: { value: 0 },
      },
      specularmap: { specularMap: { value: null } },
      envmap: {
        envMap: { value: null },
        flipEnvMap: { value: -1 },
        reflectivity: { value: 1 },
        ior: { value: 1.5 },
        refractionRatio: { value: 0.98 },
      },
      aomap: { aoMap: { value: null }, aoMapIntensity: { value: 1 } },
      lightmap: { lightMap: { value: null }, lightMapIntensity: { value: 1 } },
      emissivemap: { emissiveMap: { value: null } },
      bumpmap: { bumpMap: { value: null }, bumpScale: { value: 1 } },
      normalmap: { normalMap: { value: null }, normalScale: { value: new Lt(1, 1) } },
      displacementmap: {
        displacementMap: { value: null },
        displacementScale: { value: 1 },
        displacementBias: { value: 0 },
      },
      roughnessmap: { roughnessMap: { value: null } },
      metalnessmap: { metalnessMap: { value: null } },
      gradientmap: { gradientMap: { value: null } },
      fog: {
        fogDensity: { value: 25e-5 },
        fogNear: { value: 1 },
        fogFar: { value: 2e3 },
        fogColor: { value: new zt(16777215) },
      },
      lights: {
        ambientLightColor: { value: [] },
        lightProbe: { value: [] },
        directionalLights: { value: [], properties: { direction: {}, color: {} } },
        directionalLightShadows: {
          value: [],
          properties: { shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {} },
        },
        directionalShadowMap: { value: [] },
        directionalShadowMatrix: { value: [] },
        spotLights: {
          value: [],
          properties: { color: {}, position: {}, direction: {}, distance: {}, coneCos: {}, penumbraCos: {}, decay: {} },
        },
        spotLightShadows: {
          value: [],
          properties: { shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {} },
        },
        spotShadowMap: { value: [] },
        spotShadowMatrix: { value: [] },
        pointLights: { value: [], properties: { color: {}, position: {}, decay: {}, distance: {} } },
        pointLightShadows: {
          value: [],
          properties: {
            shadowBias: {},
            shadowNormalBias: {},
            shadowRadius: {},
            shadowMapSize: {},
            shadowCameraNear: {},
            shadowCameraFar: {},
          },
        },
        pointShadowMap: { value: [] },
        pointShadowMatrix: { value: [] },
        hemisphereLights: { value: [], properties: { direction: {}, skyColor: {}, groundColor: {} } },
        rectAreaLights: { value: [], properties: { color: {}, position: {}, width: {}, height: {} } },
        ltc_1: { value: null },
        ltc_2: { value: null },
      },
      points: {
        diffuse: { value: new zt(16777215) },
        opacity: { value: 1 },
        size: { value: 1 },
        scale: { value: 1 },
        map: { value: null },
        alphaMap: { value: null },
        alphaTest: { value: 0 },
        uvTransform: { value: new lt() },
      },
      sprite: {
        diffuse: { value: new zt(16777215) },
        opacity: { value: 1 },
        center: { value: new Lt(0.5, 0.5) },
        rotation: { value: 0 },
        map: { value: null },
        alphaMap: { value: null },
        alphaTest: { value: 0 },
        uvTransform: { value: new lt() },
      },
    },
    dn = {
      basic: {
        uniforms: ye([un.common, un.specularmap, un.envmap, un.aomap, un.lightmap, un.fog]),
        vertexShader: hn.meshbasic_vert,
        fragmentShader: hn.meshbasic_frag,
      },
      lambert: {
        uniforms: ye([
          un.common,
          un.specularmap,
          un.envmap,
          un.aomap,
          un.lightmap,
          un.emissivemap,
          un.fog,
          un.lights,
          { emissive: { value: new zt(0) } },
        ]),
        vertexShader: hn.meshlambert_vert,
        fragmentShader: hn.meshlambert_frag,
      },
      phong: {
        uniforms: ye([
          un.common,
          un.specularmap,
          un.envmap,
          un.aomap,
          un.lightmap,
          un.emissivemap,
          un.bumpmap,
          un.normalmap,
          un.displacementmap,
          un.fog,
          un.lights,
          { emissive: { value: new zt(0) }, specular: { value: new zt(1118481) }, shininess: { value: 30 } },
        ]),
        vertexShader: hn.meshphong_vert,
        fragmentShader: hn.meshphong_frag,
      },
      standard: {
        uniforms: ye([
          un.common,
          un.envmap,
          un.aomap,
          un.lightmap,
          un.emissivemap,
          un.bumpmap,
          un.normalmap,
          un.displacementmap,
          un.roughnessmap,
          un.metalnessmap,
          un.fog,
          un.lights,
          {
            emissive: { value: new zt(0) },
            roughness: { value: 1 },
            metalness: { value: 0 },
            envMapIntensity: { value: 1 },
          },
        ]),
        vertexShader: hn.meshphysical_vert,
        fragmentShader: hn.meshphysical_frag,
      },
      toon: {
        uniforms: ye([
          un.common,
          un.aomap,
          un.lightmap,
          un.emissivemap,
          un.bumpmap,
          un.normalmap,
          un.displacementmap,
          un.gradientmap,
          un.fog,
          un.lights,
          { emissive: { value: new zt(0) } },
        ]),
        vertexShader: hn.meshtoon_vert,
        fragmentShader: hn.meshtoon_frag,
      },
      matcap: {
        uniforms: ye([un.common, un.bumpmap, un.normalmap, un.displacementmap, un.fog, { matcap: { value: null } }]),
        vertexShader: hn.meshmatcap_vert,
        fragmentShader: hn.meshmatcap_frag,
      },
      points: { uniforms: ye([un.points, un.fog]), vertexShader: hn.points_vert, fragmentShader: hn.points_frag },
      dashed: {
        uniforms: ye([un.common, un.fog, { scale: { value: 1 }, dashSize: { value: 1 }, totalSize: { value: 2 } }]),
        vertexShader: hn.linedashed_vert,
        fragmentShader: hn.linedashed_frag,
      },
      depth: {
        uniforms: ye([un.common, un.displacementmap]),
        vertexShader: hn.depth_vert,
        fragmentShader: hn.depth_frag,
      },
      normal: {
        uniforms: ye([un.common, un.bumpmap, un.normalmap, un.displacementmap, { opacity: { value: 1 } }]),
        vertexShader: hn.meshnormal_vert,
        fragmentShader: hn.meshnormal_frag,
      },
      sprite: { uniforms: ye([un.sprite, un.fog]), vertexShader: hn.sprite_vert, fragmentShader: hn.sprite_frag },
      background: {
        uniforms: { uvTransform: { value: new lt() }, t2D: { value: null } },
        vertexShader: hn.background_vert,
        fragmentShader: hn.background_frag,
      },
      cube: {
        uniforms: ye([un.envmap, { opacity: { value: 1 } }]),
        vertexShader: hn.cube_vert,
        fragmentShader: hn.cube_frag,
      },
      equirect: {
        uniforms: { tEquirect: { value: null } },
        vertexShader: hn.equirect_vert,
        fragmentShader: hn.equirect_frag,
      },
      distanceRGBA: {
        uniforms: ye([
          un.common,
          un.displacementmap,
          { referencePosition: { value: new B() }, nearDistance: { value: 1 }, farDistance: { value: 1e3 } },
        ]),
        vertexShader: hn.distanceRGBA_vert,
        fragmentShader: hn.distanceRGBA_frag,
      },
      shadow: {
        uniforms: ye([un.lights, un.fog, { color: { value: new zt(0) }, opacity: { value: 1 } }]),
        vertexShader: hn.shadow_vert,
        fragmentShader: hn.shadow_frag,
      },
    }
  function pn(t, e, n, i, r, s) {
    const o = new zt(0)
    let l,
      c,
      h = !0 === r ? 0 : 1,
      u = null,
      d = 0,
      p = null
    function m(t, e) {
      n.buffers.color.setClear(t.r, t.g, t.b, e, s)
    }
    return {
      getClearColor: function () {
        return o
      },
      setClearColor: function (t, e = 1) {
        o.set(t), (h = e), m(o, h)
      },
      getClearAlpha: function () {
        return h
      },
      setClearAlpha: function (t) {
        ;(h = t), m(o, h)
      },
      render: function (n, r) {
        let s = !1,
          f = !0 === r.isScene ? r.background : null
        f && f.isTexture && (f = e.get(f))
        const g = t.xr,
          v = g.getSession && g.getSession()
        v && 'additive' === v.environmentBlendMode && (f = null),
          null === f ? m(o, h) : f && f.isColor && (m(f, 1), (s = !0)),
          (t.autoClear || s) && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil),
          f && (f.isCubeTexture || f.mapping === a)
            ? (void 0 === c &&
                ((c = new ln(
                  new ge(1, 1, 1),
                  new be({
                    name: 'BackgroundCubeMaterial',
                    uniforms: Me(dn.cube.uniforms),
                    vertexShader: dn.cube.vertexShader,
                    fragmentShader: dn.cube.fragmentShader,
                    side: 1,
                    depthTest: !1,
                    depthWrite: !1,
                    fog: !1,
                  })
                )),
                c.geometry.deleteAttribute('normal'),
                c.geometry.deleteAttribute('uv'),
                (c.onBeforeRender = function (t, e, n) {
                  this.matrixWorld.copyPosition(n.matrixWorld)
                }),
                Object.defineProperty(c.material, 'envMap', {
                  get: function () {
                    return this.uniforms.envMap.value
                  },
                }),
                i.update(c)),
              (c.material.uniforms.envMap.value = f),
              (c.material.uniforms.flipEnvMap.value = f.isCubeTexture && !1 === f.isRenderTargetTexture ? -1 : 1),
              (u === f && d === f.version && p === t.toneMapping) ||
                ((c.material.needsUpdate = !0), (u = f), (d = f.version), (p = t.toneMapping)),
              n.unshift(c, c.geometry, c.material, 0, 0, null))
            : f &&
              f.isTexture &&
              (void 0 === l &&
                ((l = new ln(
                  new ve(2, 2),
                  new be({
                    name: 'BackgroundMaterial',
                    uniforms: Me(dn.background.uniforms),
                    vertexShader: dn.background.vertexShader,
                    fragmentShader: dn.background.fragmentShader,
                    side: 0,
                    depthTest: !1,
                    depthWrite: !1,
                    fog: !1,
                  })
                )),
                l.geometry.deleteAttribute('normal'),
                Object.defineProperty(l.material, 'map', {
                  get: function () {
                    return this.uniforms.t2D.value
                  },
                }),
                i.update(l)),
              (l.material.uniforms.t2D.value = f),
              !0 === f.matrixAutoUpdate && f.updateMatrix(),
              l.material.uniforms.uvTransform.value.copy(f.matrix),
              (u === f && d === f.version && p === t.toneMapping) ||
                ((l.material.needsUpdate = !0), (u = f), (d = f.version), (p = t.toneMapping)),
              n.unshift(l, l.geometry, l.material, 0, 0, null))
      },
    }
  }
  function mn(t, e, n, i) {
    const r = t.getParameter(34921),
      a = i.isWebGL2 ? null : e.get('OES_vertex_array_object'),
      s = i.isWebGL2 || null !== a,
      o = {},
      l = d(null)
    let c = l
    function h(e) {
      return i.isWebGL2 ? t.bindVertexArray(e) : a.bindVertexArrayOES(e)
    }
    function u(e) {
      return i.isWebGL2 ? t.deleteVertexArray(e) : a.deleteVertexArrayOES(e)
    }
    function d(t) {
      const e = [],
        n = [],
        i = []
      for (let t = 0; t < r; t++) (e[t] = 0), (n[t] = 0), (i[t] = 0)
      return {
        geometry: null,
        program: null,
        wireframe: !1,
        newAttributes: e,
        enabledAttributes: n,
        attributeDivisors: i,
        object: t,
        attributes: {},
        index: null,
      }
    }
    function p() {
      const t = c.newAttributes
      for (let e = 0, n = t.length; e < n; e++) t[e] = 0
    }
    function m(t) {
      f(t, 0)
    }
    function f(n, r) {
      const a = c.newAttributes,
        s = c.enabledAttributes,
        o = c.attributeDivisors
      if (((a[n] = 1), 0 === s[n] && (t.enableVertexAttribArray(n), (s[n] = 1)), o[n] !== r)) {
        ;(i.isWebGL2 ? t : e.get('ANGLE_instanced_arrays'))[
          i.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'
        ](n, r),
          (o[n] = r)
      }
    }
    function g() {
      const e = c.newAttributes,
        n = c.enabledAttributes
      for (let i = 0, r = n.length; i < r; i++) n[i] !== e[i] && (t.disableVertexAttribArray(i), (n[i] = 0))
    }
    function v(e, n, r, a, s, o) {
      !0 !== i.isWebGL2 || (5124 !== r && 5125 !== r)
        ? t.vertexAttribPointer(e, n, r, a, s, o)
        : t.vertexAttribIPointer(e, n, r, s, o)
    }
    function _() {
      x(), c !== l && ((c = l), h(c.object))
    }
    function x() {
      ;(l.geometry = null), (l.program = null), (l.wireframe = !1)
    }
    return {
      setup: function (r, l, u, _, x) {
        let M = !1
        if (s) {
          const e = (function (e, n, r) {
            const s = !0 === r.wireframe
            let l = o[e.id]
            void 0 === l && ((l = {}), (o[e.id] = l))
            let c = l[n.id]
            void 0 === c && ((c = {}), (l[n.id] = c))
            let h = c[s]
            void 0 === h && ((h = d(i.isWebGL2 ? t.createVertexArray() : a.createVertexArrayOES())), (c[s] = h))
            return h
          })(_, u, l)
          c !== e && ((c = e), h(c.object)),
            (M = (function (t, e) {
              const n = c.attributes,
                i = t.attributes
              let r = 0
              for (const t in i) {
                const e = n[t],
                  a = i[t]
                if (void 0 === e) return !0
                if (e.attribute !== a) return !0
                if (e.data !== a.data) return !0
                r++
              }
              return c.attributesNum !== r || c.index !== e
            })(_, x)),
            M &&
              (function (t, e) {
                const n = {},
                  i = t.attributes
                let r = 0
                for (const t in i) {
                  const e = i[t],
                    a = {}
                  ;(a.attribute = e), e.data && (a.data = e.data), (n[t] = a), r++
                }
                ;(c.attributes = n), (c.attributesNum = r), (c.index = e)
              })(_, x)
        } else {
          const t = !0 === l.wireframe
          ;(c.geometry === _.id && c.program === u.id && c.wireframe === t) ||
            ((c.geometry = _.id), (c.program = u.id), (c.wireframe = t), (M = !0))
        }
        !0 === r.isInstancedMesh && (M = !0),
          null !== x && n.update(x, 34963),
          M &&
            (!(function (r, a, s, o) {
              if (
                !1 === i.isWebGL2 &&
                (r.isInstancedMesh || o.isInstancedBufferGeometry) &&
                null === e.get('ANGLE_instanced_arrays')
              )
                return
              p()
              const l = o.attributes,
                c = s.getAttributes(),
                h = a.defaultAttributeValues
              for (const e in c) {
                const i = c[e]
                if (i.location >= 0) {
                  let a = l[e]
                  if (
                    (void 0 === a &&
                      ('instanceMatrix' === e && r.instanceMatrix && (a = r.instanceMatrix),
                      'instanceColor' === e && r.instanceColor && (a = r.instanceColor)),
                    void 0 !== a)
                  ) {
                    const e = a.normalized,
                      s = a.itemSize,
                      l = n.get(a)
                    if (void 0 === l) continue
                    const c = l.buffer,
                      h = l.type,
                      u = l.bytesPerElement
                    if (a.isInterleavedBufferAttribute) {
                      const n = a.data,
                        l = n.stride,
                        d = a.offset
                      if (n && n.isInstancedInterleavedBuffer) {
                        for (let t = 0; t < i.locationSize; t++) f(i.location + t, n.meshPerAttribute)
                        !0 !== r.isInstancedMesh &&
                          void 0 === o._maxInstanceCount &&
                          (o._maxInstanceCount = n.meshPerAttribute * n.count)
                      } else for (let t = 0; t < i.locationSize; t++) m(i.location + t)
                      t.bindBuffer(34962, c)
                      for (let t = 0; t < i.locationSize; t++)
                        v(i.location + t, s / i.locationSize, h, e, l * u, (d + (s / i.locationSize) * t) * u)
                    } else {
                      if (a.isInstancedBufferAttribute) {
                        for (let t = 0; t < i.locationSize; t++) f(i.location + t, a.meshPerAttribute)
                        !0 !== r.isInstancedMesh &&
                          void 0 === o._maxInstanceCount &&
                          (o._maxInstanceCount = a.meshPerAttribute * a.count)
                      } else for (let t = 0; t < i.locationSize; t++) m(i.location + t)
                      t.bindBuffer(34962, c)
                      for (let t = 0; t < i.locationSize; t++)
                        v(i.location + t, s / i.locationSize, h, e, s * u, (s / i.locationSize) * t * u)
                    }
                  } else if (void 0 !== h) {
                    const n = h[e]
                    if (void 0 !== n)
                      switch (n.length) {
                        case 2:
                          t.vertexAttrib2fv(i.location, n)
                          break
                        case 3:
                          t.vertexAttrib3fv(i.location, n)
                          break
                        case 4:
                          t.vertexAttrib4fv(i.location, n)
                          break
                        default:
                          t.vertexAttrib1fv(i.location, n)
                      }
                  }
                }
              }
              g()
            })(r, l, u, _),
            null !== x && t.bindBuffer(34963, n.get(x).buffer))
      },
      reset: _,
      resetDefaultState: x,
      dispose: function () {
        _()
        for (const t in o) {
          const e = o[t]
          for (const t in e) {
            const n = e[t]
            for (const t in n) u(n[t].object), delete n[t]
            delete e[t]
          }
          delete o[t]
        }
      },
      releaseStatesOfGeometry: function (t) {
        if (void 0 === o[t.id]) return
        const e = o[t.id]
        for (const t in e) {
          const n = e[t]
          for (const t in n) u(n[t].object), delete n[t]
          delete e[t]
        }
        delete o[t.id]
      },
      releaseStatesOfProgram: function (t) {
        for (const e in o) {
          const n = o[e]
          if (void 0 === n[t.id]) continue
          const i = n[t.id]
          for (const t in i) u(i[t].object), delete i[t]
          delete n[t.id]
        }
      },
      initAttributes: p,
      enableAttribute: m,
      disableUnusedAttributes: g,
    }
  }
  function fn(t, e, n, i) {
    const r = i.isWebGL2
    let a
    ;(this.setMode = function (t) {
      a = t
    }),
      (this.render = function (e, i) {
        t.drawArrays(a, e, i), n.update(i, a, 1)
      }),
      (this.renderInstances = function (i, s, o) {
        if (0 === o) return
        let l, c
        if (r) (l = t), (c = 'drawArraysInstanced')
        else if (((l = e.get('ANGLE_instanced_arrays')), (c = 'drawArraysInstancedANGLE'), null === l))
          return void console.error(
            'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.'
          )
        l[c](a, i, s, o), n.update(s, a, o)
      })
  }
  function gn(t, e, n) {
    let i
    function r(e) {
      if ('highp' === e) {
        if (
          t.getShaderPrecisionFormat(35633, 36338).precision > 0 &&
          t.getShaderPrecisionFormat(35632, 36338).precision > 0
        )
          return 'highp'
        e = 'mediump'
      }
      return 'mediump' === e &&
        t.getShaderPrecisionFormat(35633, 36337).precision > 0 &&
        t.getShaderPrecisionFormat(35632, 36337).precision > 0
        ? 'mediump'
        : 'lowp'
    }
    const a =
      ('undefined' != typeof WebGL2RenderingContext && t instanceof WebGL2RenderingContext) ||
      ('undefined' != typeof WebGL2ComputeRenderingContext && t instanceof WebGL2ComputeRenderingContext)
    let s = void 0 !== n.precision ? n.precision : 'highp'
    const o = r(s)
    o !== s && (console.warn('THREE.WebGLRenderer:', s, 'not supported, using', o, 'instead.'), (s = o))
    const l = a || e.has('WEBGL_draw_buffers'),
      c = !0 === n.logarithmicDepthBuffer,
      h = t.getParameter(34930),
      u = t.getParameter(35660),
      d = t.getParameter(3379),
      p = t.getParameter(34076),
      m = t.getParameter(34921),
      f = t.getParameter(36347),
      g = t.getParameter(36348),
      v = t.getParameter(36349),
      _ = u > 0,
      x = a || e.has('OES_texture_float')
    return {
      isWebGL2: a,
      drawBuffers: l,
      getMaxAnisotropy: function () {
        if (void 0 !== i) return i
        if (!0 === e.has('EXT_texture_filter_anisotropic')) {
          const n = e.get('EXT_texture_filter_anisotropic')
          i = t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)
        } else i = 0
        return i
      },
      getMaxPrecision: r,
      precision: s,
      logarithmicDepthBuffer: c,
      maxTextures: h,
      maxVertexTextures: u,
      maxTextureSize: d,
      maxCubemapSize: p,
      maxAttributes: m,
      maxVertexUniforms: f,
      maxVaryings: g,
      maxFragmentUniforms: v,
      vertexTextures: _,
      floatFragmentTextures: x,
      floatVertexTextures: _ && x,
      maxSamples: a ? t.getParameter(36183) : 0,
    }
  }
  function vn(t) {
    const e = this
    let n = null,
      i = 0,
      r = !1,
      a = !1
    const s = new dt(),
      o = new lt(),
      l = { value: null, needsUpdate: !1 }
    function c() {
      l.value !== n && ((l.value = n), (l.needsUpdate = i > 0)), (e.numPlanes = i), (e.numIntersection = 0)
    }
    function h(t, n, i, r) {
      const a = null !== t ? t.length : 0
      let c = null
      if (0 !== a) {
        if (((c = l.value), !0 !== r || null === c)) {
          const e = i + 4 * a,
            r = n.matrixWorldInverse
          o.getNormalMatrix(r), (null === c || c.length < e) && (c = new Float32Array(e))
          for (let e = 0, n = i; e !== a; ++e, n += 4)
            s.copy(t[e]).applyMatrix4(r, o), s.normal.toArray(c, n), (c[n + 3] = s.constant)
        }
        ;(l.value = c), (l.needsUpdate = !0)
      }
      return (e.numPlanes = a), (e.numIntersection = 0), c
    }
    ;(this.uniform = l),
      (this.numPlanes = 0),
      (this.numIntersection = 0),
      (this.init = function (t, e, a) {
        const s = 0 !== t.length || e || 0 !== i || r
        return (r = e), (n = h(t, a, 0)), (i = t.length), s
      }),
      (this.beginShadows = function () {
        ;(a = !0), h(null)
      }),
      (this.endShadows = function () {
        ;(a = !1), c()
      }),
      (this.setState = function (e, s, o) {
        const u = e.clippingPlanes,
          d = e.clipIntersection,
          p = e.clipShadows,
          m = t.get(e)
        if (!r || null === u || 0 === u.length || (a && !p)) a ? h(null) : c()
        else {
          const t = a ? 0 : i,
            e = 4 * t
          let r = m.clippingState || null
          ;(l.value = r), (r = h(u, s, e, o))
          for (let t = 0; t !== e; ++t) r[t] = n[t]
          ;(m.clippingState = r), (this.numIntersection = d ? this.numPlanes : 0), (this.numPlanes += t)
        }
      })
  }
  let _n
  dn.physical = {
    uniforms: ye([
      dn.standard.uniforms,
      {
        clearcoat: { value: 0 },
        clearcoatMap: { value: null },
        clearcoatRoughness: { value: 0 },
        clearcoatRoughnessMap: { value: null },
        clearcoatNormalScale: { value: new Lt(1, 1) },
        clearcoatNormalMap: { value: null },
        sheen: { value: 0 },
        sheenColor: { value: new zt(0) },
        sheenColorMap: { value: null },
        sheenRoughness: { value: 1 },
        sheenRoughnessMap: { value: null },
        transmission: { value: 0 },
        transmissionMap: { value: null },
        transmissionSamplerSize: { value: new Lt() },
        transmissionSamplerMap: { value: null },
        thickness: { value: 0 },
        thicknessMap: { value: null },
        attenuationDistance: { value: 0 },
        attenuationColor: { value: new zt(0) },
        specularIntensity: { value: 1 },
        specularIntensityMap: { value: null },
        specularColor: { value: new zt(1, 1, 1) },
        specularColorMap: { value: null },
      },
    ]),
    vertexShader: hn.meshphysical_vert,
    fragmentShader: hn.meshphysical_frag,
  }
  class xn {
    static getDataURL(t) {
      if (/^data:/i.test(t.src)) return t.src
      if ('undefined' == typeof HTMLCanvasElement) return t.src
      let e
      if (t instanceof HTMLCanvasElement) e = t
      else {
        void 0 === _n && (_n = oe('canvas')), (_n.width = t.width), (_n.height = t.height)
        const n = _n.getContext('2d')
        t instanceof ImageData ? n.putImageData(t, 0, 0) : n.drawImage(t, 0, 0, t.width, t.height), (e = _n)
      }
      return e.width > 2048 || e.height > 2048
        ? (console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', t),
          e.toDataURL('image/jpeg', 0.6))
        : e.toDataURL('image/png')
    }
    static sRGBToLinear(t) {
      if (
        ('undefined' != typeof HTMLImageElement && t instanceof HTMLImageElement) ||
        ('undefined' != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement) ||
        ('undefined' != typeof ImageBitmap && t instanceof ImageBitmap)
      ) {
        const e = oe('canvas')
        ;(e.width = t.width), (e.height = t.height)
        const n = e.getContext('2d')
        n.drawImage(t, 0, 0, t.width, t.height)
        const i = n.getImageData(0, 0, t.width, t.height),
          r = i.data
        for (let t = 0; t < r.length; t++) r[t] = 255 * It(r[t] / 255)
        return n.putImageData(i, 0, 0), e
      }
      if (t.data) {
        const e = t.data.slice(0)
        for (let t = 0; t < e.length; t++)
          e instanceof Uint8Array || e instanceof Uint8ClampedArray
            ? (e[t] = Math.floor(255 * It(e[t] / 255)))
            : (e[t] = It(e[t]))
        return { data: e, width: t.width, height: t.height }
      }
      return (
        console.warn('THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.'), t
      )
    }
  }
  let Mn = 0
  class yn extends At {
    constructor(
      t = yn.DEFAULT_IMAGE,
      e = yn.DEFAULT_MAPPING,
      n = 1001,
      i = 1001,
      r = 1006,
      a = 1008,
      s = 1023,
      o = 1009,
      l = 1,
      c = 3e3
    ) {
      super(),
        Object.defineProperty(this, 'id', { value: Mn++ }),
        (this.uuid = I()),
        (this.name = ''),
        (this.image = t),
        (this.mipmaps = []),
        (this.mapping = e),
        (this.wrapS = n),
        (this.wrapT = i),
        (this.magFilter = r),
        (this.minFilter = a),
        (this.anisotropy = l),
        (this.format = s),
        (this.internalFormat = null),
        (this.type = o),
        (this.offset = new Lt(0, 0)),
        (this.repeat = new Lt(1, 1)),
        (this.center = new Lt(0, 0)),
        (this.rotation = 0),
        (this.matrixAutoUpdate = !0),
        (this.matrix = new lt()),
        (this.generateMipmaps = !0),
        (this.premultiplyAlpha = !1),
        (this.flipY = !0),
        (this.unpackAlignment = 4),
        (this.encoding = c),
        (this.userData = {}),
        (this.version = 0),
        (this.onUpdate = null),
        (this.isRenderTargetTexture = !1),
        (this.needsPMREMUpdate = !1)
    }
    updateMatrix() {
      this.matrix.setUvTransform(
        this.offset.x,
        this.offset.y,
        this.repeat.x,
        this.repeat.y,
        this.rotation,
        this.center.x,
        this.center.y
      )
    }
    clone() {
      return new this.constructor().copy(this)
    }
    copy(t) {
      return (
        (this.name = t.name),
        (this.image = t.image),
        (this.mipmaps = t.mipmaps.slice(0)),
        (this.mapping = t.mapping),
        (this.wrapS = t.wrapS),
        (this.wrapT = t.wrapT),
        (this.magFilter = t.magFilter),
        (this.minFilter = t.minFilter),
        (this.anisotropy = t.anisotropy),
        (this.format = t.format),
        (this.internalFormat = t.internalFormat),
        (this.type = t.type),
        this.offset.copy(t.offset),
        this.repeat.copy(t.repeat),
        this.center.copy(t.center),
        (this.rotation = t.rotation),
        (this.matrixAutoUpdate = t.matrixAutoUpdate),
        this.matrix.copy(t.matrix),
        (this.generateMipmaps = t.generateMipmaps),
        (this.premultiplyAlpha = t.premultiplyAlpha),
        (this.flipY = t.flipY),
        (this.unpackAlignment = t.unpackAlignment),
        (this.encoding = t.encoding),
        (this.userData = JSON.parse(JSON.stringify(t.userData))),
        this
      )
    }
    toJSON(t) {
      const e = void 0 === t || 'string' == typeof t
      if (!e && void 0 !== t.textures[this.uuid]) return t.textures[this.uuid]
      const n = {
        metadata: { version: 4.5, type: 'Texture', generator: 'Texture.toJSON' },
        uuid: this.uuid,
        name: this.name,
        mapping: this.mapping,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        center: [this.center.x, this.center.y],
        rotation: this.rotation,
        wrap: [this.wrapS, this.wrapT],
        format: this.format,
        type: this.type,
        encoding: this.encoding,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY,
        premultiplyAlpha: this.premultiplyAlpha,
        unpackAlignment: this.unpackAlignment,
      }
      if (void 0 !== this.image) {
        const i = this.image
        if ((void 0 === i.uuid && (i.uuid = I()), !e && void 0 === t.images[i.uuid])) {
          let e
          if (Array.isArray(i)) {
            e = []
            for (let t = 0, n = i.length; t < n; t++) i[t].isDataTexture ? e.push(Sn(i[t].image)) : e.push(Sn(i[t]))
          } else e = Sn(i)
          t.images[i.uuid] = { uuid: i.uuid, url: e }
        }
        n.image = i.uuid
      }
      return '{}' !== JSON.stringify(this.userData) && (n.userData = this.userData), e || (t.textures[this.uuid] = n), n
    }
    dispose() {
      this.dispatchEvent({ type: 'dispose' })
    }
    transformUv(t) {
      if (300 !== this.mapping) return t
      if ((t.applyMatrix3(this.matrix), t.x < 0 || t.x > 1))
        switch (this.wrapS) {
          case s:
            t.x = t.x - Math.floor(t.x)
            break
          case o:
            t.x = t.x < 0 ? 0 : 1
            break
          case l:
            1 === Math.abs(Math.floor(t.x) % 2) ? (t.x = Math.ceil(t.x) - t.x) : (t.x = t.x - Math.floor(t.x))
        }
      if (t.y < 0 || t.y > 1)
        switch (this.wrapT) {
          case s:
            t.y = t.y - Math.floor(t.y)
            break
          case o:
            t.y = t.y < 0 ? 0 : 1
            break
          case l:
            1 === Math.abs(Math.floor(t.y) % 2) ? (t.y = Math.ceil(t.y) - t.y) : (t.y = t.y - Math.floor(t.y))
        }
      return this.flipY && (t.y = 1 - t.y), t
    }
    set needsUpdate(t) {
      !0 === t && this.version++
    }
  }
  function Sn(t) {
    return ('undefined' != typeof HTMLImageElement && t instanceof HTMLImageElement) ||
      ('undefined' != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement) ||
      ('undefined' != typeof ImageBitmap && t instanceof ImageBitmap)
      ? xn.getDataURL(t)
      : t.data
      ? { data: Array.prototype.slice.call(t.data), width: t.width, height: t.height, type: t.data.constructor.name }
      : (console.warn('THREE.Texture: Unable to serialize Texture.'), {})
  }
  ;(yn.DEFAULT_IMAGE = void 0), (yn.DEFAULT_MAPPING = 300), (yn.prototype.isTexture = !0)
  class bn extends At {
    constructor(t, e, n = {}) {
      super(),
        (this.width = t),
        (this.height = e),
        (this.depth = 1),
        (this.scissor = new wt(0, 0, t, e)),
        (this.scissorTest = !1),
        (this.viewport = new wt(0, 0, t, e)),
        (this.texture = new yn(
          void 0,
          n.mapping,
          n.wrapS,
          n.wrapT,
          n.magFilter,
          n.minFilter,
          n.format,
          n.type,
          n.anisotropy,
          n.encoding
        )),
        (this.texture.isRenderTargetTexture = !0),
        (this.texture.image = { width: t, height: e, depth: 1 }),
        (this.texture.generateMipmaps = void 0 !== n.generateMipmaps && n.generateMipmaps),
        (this.texture.internalFormat = void 0 !== n.internalFormat ? n.internalFormat : null),
        (this.texture.minFilter = void 0 !== n.minFilter ? n.minFilter : h),
        (this.depthBuffer = void 0 === n.depthBuffer || n.depthBuffer),
        (this.stencilBuffer = void 0 !== n.stencilBuffer && n.stencilBuffer),
        (this.depthTexture = void 0 !== n.depthTexture ? n.depthTexture : null)
    }
    setTexture(t) {
      ;(t.image = { width: this.width, height: this.height, depth: this.depth }), (this.texture = t)
    }
    setSize(t, e, n = 1) {
      ;(this.width === t && this.height === e && this.depth === n) ||
        ((this.width = t),
        (this.height = e),
        (this.depth = n),
        (this.texture.image.width = t),
        (this.texture.image.height = e),
        (this.texture.image.depth = n),
        this.dispose()),
        this.viewport.set(0, 0, t, e),
        this.scissor.set(0, 0, t, e)
    }
    clone() {
      return new this.constructor().copy(this)
    }
    copy(t) {
      return (
        (this.width = t.width),
        (this.height = t.height),
        (this.depth = t.depth),
        this.viewport.copy(t.viewport),
        (this.texture = t.texture.clone()),
        (this.texture.image = Object.assign({}, t.texture.image)),
        (this.depthBuffer = t.depthBuffer),
        (this.stencilBuffer = t.stencilBuffer),
        (this.depthTexture = t.depthTexture),
        this
      )
    }
    dispose() {
      this.dispatchEvent({ type: 'dispose' })
    }
  }
  bn.prototype.isWebGLRenderTarget = !0
  class wn extends ae {
    constructor() {
      super(),
        (this.type = 'Camera'),
        (this.matrixWorldInverse = new gt()),
        (this.projectionMatrix = new gt()),
        (this.projectionMatrixInverse = new gt())
    }
    copy(t, e) {
      return (
        super.copy(t, e),
        this.matrixWorldInverse.copy(t.matrixWorldInverse),
        this.projectionMatrix.copy(t.projectionMatrix),
        this.projectionMatrixInverse.copy(t.projectionMatrixInverse),
        this
      )
    }
    getWorldDirection(t) {
      this.updateWorldMatrix(!0, !1)
      const e = this.matrixWorld.elements
      return t.set(-e[8], -e[9], -e[10]).normalize()
    }
    updateMatrixWorld(t) {
      super.updateMatrixWorld(t), this.matrixWorldInverse.copy(this.matrixWorld).invert()
    }
    updateWorldMatrix(t, e) {
      super.updateWorldMatrix(t, e), this.matrixWorldInverse.copy(this.matrixWorld).invert()
    }
    clone() {
      return new this.constructor().copy(this)
    }
  }
  wn.prototype.isCamera = !0
  class Tn extends wn {
    constructor(t = 50, e = 1, n = 0.1, i = 2e3) {
      super(),
        (this.type = 'PerspectiveCamera'),
        (this.fov = t),
        (this.zoom = 1),
        (this.near = n),
        (this.far = i),
        (this.focus = 10),
        (this.aspect = e),
        (this.view = null),
        (this.filmGauge = 35),
        (this.filmOffset = 0),
        this.updateProjectionMatrix()
    }
    copy(t, e) {
      return (
        super.copy(t, e),
        (this.fov = t.fov),
        (this.zoom = t.zoom),
        (this.near = t.near),
        (this.far = t.far),
        (this.focus = t.focus),
        (this.aspect = t.aspect),
        (this.view = null === t.view ? null : Object.assign({}, t.view)),
        (this.filmGauge = t.filmGauge),
        (this.filmOffset = t.filmOffset),
        this
      )
    }
    setFocalLength(t) {
      const e = (0.5 * this.getFilmHeight()) / t
      ;(this.fov = 2 * P * Math.atan(e)), this.updateProjectionMatrix()
    }
    getFocalLength() {
      const t = Math.tan(0.5 * R * this.fov)
      return (0.5 * this.getFilmHeight()) / t
    }
    getEffectiveFOV() {
      return 2 * P * Math.atan(Math.tan(0.5 * R * this.fov) / this.zoom)
    }
    getFilmWidth() {
      return this.filmGauge * Math.min(this.aspect, 1)
    }
    getFilmHeight() {
      return this.filmGauge / Math.max(this.aspect, 1)
    }
    setViewOffset(t, e, n, i, r, a) {
      ;(this.aspect = t / e),
        null === this.view &&
          (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }),
        (this.view.enabled = !0),
        (this.view.fullWidth = t),
        (this.view.fullHeight = e),
        (this.view.offsetX = n),
        (this.view.offsetY = i),
        (this.view.width = r),
        (this.view.height = a),
        this.updateProjectionMatrix()
    }
    clearViewOffset() {
      null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix()
    }
    updateProjectionMatrix() {
      const t = this.near
      let e = (t * Math.tan(0.5 * R * this.fov)) / this.zoom,
        n = 2 * e,
        i = this.aspect * n,
        r = -0.5 * i
      const a = this.view
      if (null !== this.view && this.view.enabled) {
        const t = a.fullWidth,
          s = a.fullHeight
        ;(r += (a.offsetX * i) / t), (e -= (a.offsetY * n) / s), (i *= a.width / t), (n *= a.height / s)
      }
      const s = this.filmOffset
      0 !== s && (r += (t * s) / this.getFilmWidth()),
        this.projectionMatrix.makePerspective(r, r + i, e, e - n, t, this.far),
        this.projectionMatrixInverse.copy(this.projectionMatrix).invert()
    }
    toJSON(t) {
      const e = super.toJSON(t)
      return (
        (e.object.fov = this.fov),
        (e.object.zoom = this.zoom),
        (e.object.near = this.near),
        (e.object.far = this.far),
        (e.object.focus = this.focus),
        (e.object.aspect = this.aspect),
        null !== this.view && (e.object.view = Object.assign({}, this.view)),
        (e.object.filmGauge = this.filmGauge),
        (e.object.filmOffset = this.filmOffset),
        e
      )
    }
  }
  Tn.prototype.isPerspectiveCamera = !0
  const En = 90
  class Ln extends ae {
    constructor(t, e, n) {
      if ((super(), (this.type = 'CubeCamera'), !0 !== n.isWebGLCubeRenderTarget))
        return void console.error(
          'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.'
        )
      this.renderTarget = n
      const i = new Tn(En, 1, t, e)
      ;(i.layers = this.layers), i.up.set(0, -1, 0), i.lookAt(new B(1, 0, 0)), this.add(i)
      const r = new Tn(En, 1, t, e)
      ;(r.layers = this.layers), r.up.set(0, -1, 0), r.lookAt(new B(-1, 0, 0)), this.add(r)
      const a = new Tn(En, 1, t, e)
      ;(a.layers = this.layers), a.up.set(0, 0, 1), a.lookAt(new B(0, 1, 0)), this.add(a)
      const s = new Tn(En, 1, t, e)
      ;(s.layers = this.layers), s.up.set(0, 0, -1), s.lookAt(new B(0, -1, 0)), this.add(s)
      const o = new Tn(En, 1, t, e)
      ;(o.layers = this.layers), o.up.set(0, -1, 0), o.lookAt(new B(0, 0, 1)), this.add(o)
      const l = new Tn(En, 1, t, e)
      ;(l.layers = this.layers), l.up.set(0, -1, 0), l.lookAt(new B(0, 0, -1)), this.add(l)
    }
    update(t, e) {
      null === this.parent && this.updateMatrixWorld()
      const n = this.renderTarget,
        [i, r, a, s, o, l] = this.children,
        c = t.xr.enabled,
        h = t.getRenderTarget()
      t.xr.enabled = !1
      const u = n.texture.generateMipmaps
      ;(n.texture.generateMipmaps = !1),
        t.setRenderTarget(n, 0),
        t.render(e, i),
        t.setRenderTarget(n, 1),
        t.render(e, r),
        t.setRenderTarget(n, 2),
        t.render(e, a),
        t.setRenderTarget(n, 3),
        t.render(e, s),
        t.setRenderTarget(n, 4),
        t.render(e, o),
        (n.texture.generateMipmaps = u),
        t.setRenderTarget(n, 5),
        t.render(e, l),
        t.setRenderTarget(h),
        (t.xr.enabled = c),
        (n.texture.needsPMREMUpdate = !0)
    }
  }
  class An extends yn {
    constructor(t, e, n, r, a, s, o, l, c, h) {
      super((t = void 0 !== t ? t : []), (e = void 0 !== e ? e : i), n, r, a, s, o, l, c, h), (this.flipY = !1)
    }
    get images() {
      return this.image
    }
    set images(t) {
      this.image = t
    }
  }
  An.prototype.isCubeTexture = !0
  class Cn extends bn {
    constructor(t, e, n) {
      Number.isInteger(e) &&
        (console.warn(
          'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )'
        ),
        (e = n)),
        super(t, t, e),
        (e = e || {}),
        (this.texture = new An(
          void 0,
          e.mapping,
          e.wrapS,
          e.wrapT,
          e.magFilter,
          e.minFilter,
          e.format,
          e.type,
          e.anisotropy,
          e.encoding
        )),
        (this.texture.isRenderTargetTexture = !0),
        (this.texture.generateMipmaps = void 0 !== e.generateMipmaps && e.generateMipmaps),
        (this.texture.minFilter = void 0 !== e.minFilter ? e.minFilter : h)
    }
    fromEquirectangularTexture(t, e) {
      ;(this.texture.type = e.type),
        (this.texture.format = _),
        (this.texture.encoding = e.encoding),
        (this.texture.generateMipmaps = e.generateMipmaps),
        (this.texture.minFilter = e.minFilter),
        (this.texture.magFilter = e.magFilter)
      const n = {
          uniforms: { tEquirect: { value: null } },
          vertexShader:
            '\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t',
          fragmentShader:
            '\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t',
        },
        i = new ge(5, 5, 5),
        r = new be({
          name: 'CubemapFromEquirect',
          uniforms: Me(n.uniforms),
          vertexShader: n.vertexShader,
          fragmentShader: n.fragmentShader,
          side: 1,
          blending: 0,
        })
      r.uniforms.tEquirect.value = e
      const a = new ln(i, r),
        s = e.minFilter
      e.minFilter === u && (e.minFilter = h)
      return new Ln(1, 10, this).update(t, a), (e.minFilter = s), a.geometry.dispose(), a.material.dispose(), this
    }
    clear(t, e, n, i) {
      const r = t.getRenderTarget()
      for (let r = 0; r < 6; r++) t.setRenderTarget(this, r), t.clear(e, n, i)
      t.setRenderTarget(r)
    }
  }
  function Dn(t) {
    let e = new WeakMap()
    function n(t, e) {
      return 303 === e ? (t.mapping = i) : 304 === e && (t.mapping = r), t
    }
    function a(t) {
      const n = t.target
      n.removeEventListener('dispose', a)
      const i = e.get(n)
      void 0 !== i && (e.delete(n), i.dispose())
    }
    return {
      get: function (i) {
        if (i && i.isTexture && !1 === i.isRenderTargetTexture) {
          const r = i.mapping
          if (303 === r || 304 === r) {
            if (e.has(i)) {
              return n(e.get(i).texture, i.mapping)
            }
            {
              const r = i.image
              if (r && r.height > 0) {
                const s = new Cn(r.height / 2)
                return (
                  s.fromEquirectangularTexture(t, i),
                  e.set(i, s),
                  i.addEventListener('dispose', a),
                  n(s.texture, i.mapping)
                )
              }
              return null
            }
          }
        }
        return i
      },
      dispose: function () {
        e = new WeakMap()
      },
    }
  }
  Cn.prototype.isWebGLCubeRenderTarget = !0
  class Rn extends wn {
    constructor(t = -1, e = 1, n = 1, i = -1, r = 0.1, a = 2e3) {
      super(),
        (this.type = 'OrthographicCamera'),
        (this.zoom = 1),
        (this.view = null),
        (this.left = t),
        (this.right = e),
        (this.top = n),
        (this.bottom = i),
        (this.near = r),
        (this.far = a),
        this.updateProjectionMatrix()
    }
    copy(t, e) {
      return (
        super.copy(t, e),
        (this.left = t.left),
        (this.right = t.right),
        (this.top = t.top),
        (this.bottom = t.bottom),
        (this.near = t.near),
        (this.far = t.far),
        (this.zoom = t.zoom),
        (this.view = null === t.view ? null : Object.assign({}, t.view)),
        this
      )
    }
    setViewOffset(t, e, n, i, r, a) {
      null === this.view &&
        (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }),
        (this.view.enabled = !0),
        (this.view.fullWidth = t),
        (this.view.fullHeight = e),
        (this.view.offsetX = n),
        (this.view.offsetY = i),
        (this.view.width = r),
        (this.view.height = a),
        this.updateProjectionMatrix()
    }
    clearViewOffset() {
      null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix()
    }
    updateProjectionMatrix() {
      const t = (this.right - this.left) / (2 * this.zoom),
        e = (this.top - this.bottom) / (2 * this.zoom),
        n = (this.right + this.left) / 2,
        i = (this.top + this.bottom) / 2
      let r = n - t,
        a = n + t,
        s = i + e,
        o = i - e
      if (null !== this.view && this.view.enabled) {
        const t = (this.right - this.left) / this.view.fullWidth / this.zoom,
          e = (this.top - this.bottom) / this.view.fullHeight / this.zoom
        ;(r += t * this.view.offsetX),
          (a = r + t * this.view.width),
          (s -= e * this.view.offsetY),
          (o = s - e * this.view.height)
      }
      this.projectionMatrix.makeOrthographic(r, a, s, o, this.near, this.far),
        this.projectionMatrixInverse.copy(this.projectionMatrix).invert()
    }
    toJSON(t) {
      const e = super.toJSON(t)
      return (
        (e.object.zoom = this.zoom),
        (e.object.left = this.left),
        (e.object.right = this.right),
        (e.object.top = this.top),
        (e.object.bottom = this.bottom),
        (e.object.near = this.near),
        (e.object.far = this.far),
        null !== this.view && (e.object.view = Object.assign({}, this.view)),
        e
      )
    }
  }
  Rn.prototype.isOrthographicCamera = !0
  class Pn extends be {
    constructor(t) {
      super(t), (this.type = 'RawShaderMaterial')
    }
  }
  Pn.prototype.isRawShaderMaterial = !0
  const In = Math.pow(2, 8),
    Nn = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582],
    zn = 5 + Nn.length,
    On = 20,
    Un = new Rn(),
    { _lodPlanes: Fn, _sizeLods: Bn, _sigmas: Gn } = Xn(),
    Hn = new zt()
  let Vn = null
  const kn = (1 + Math.sqrt(5)) / 2,
    Wn = 1 / kn,
    jn = [
      new B(1, 1, 1),
      new B(-1, 1, 1),
      new B(1, 1, -1),
      new B(-1, 1, -1),
      new B(0, kn, Wn),
      new B(0, kn, -Wn),
      new B(Wn, 0, kn),
      new B(-Wn, 0, kn),
      new B(kn, Wn, 0),
      new B(-kn, Wn, 0),
    ]
  class qn {
    constructor(t) {
      ;(this._renderer = t),
        (this._pingPongRenderTarget = null),
        (this._blurMaterial = (function (t) {
          const e = new Float32Array(t),
            n = new B(0, 1, 0)
          return new Pn({
            name: 'SphericalGaussianBlur',
            defines: { n: t },
            uniforms: {
              envMap: { value: null },
              samples: { value: 1 },
              weights: { value: e },
              latitudinal: { value: !1 },
              dTheta: { value: 0 },
              mipInt: { value: 0 },
              poleAxis: { value: n },
            },
            vertexShader: Qn(),
            fragmentShader:
              "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",
            blending: 0,
            depthTest: !1,
            depthWrite: !1,
          })
        })(On)),
        (this._equirectShader = null),
        (this._cubemapShader = null),
        this._compileMaterial(this._blurMaterial)
    }
    fromScene(t, e = 0, n = 0.1, i = 100) {
      Vn = this._renderer.getRenderTarget()
      const r = this._allocateTargets()
      return this._sceneToCubeUV(t, n, i, r), e > 0 && this._blur(r, 0, 0, e), this._applyPMREM(r), this._cleanup(r), r
    }
    fromEquirectangular(t, e = null) {
      return this._fromTexture(t, e)
    }
    fromCubemap(t, e = null) {
      return this._fromTexture(t, e)
    }
    compileCubemapShader() {
      null === this._cubemapShader && ((this._cubemapShader = Kn()), this._compileMaterial(this._cubemapShader))
    }
    compileEquirectangularShader() {
      null === this._equirectShader && ((this._equirectShader = Jn()), this._compileMaterial(this._equirectShader))
    }
    dispose() {
      this._blurMaterial.dispose(),
        null !== this._pingPongRenderTarget && this._pingPongRenderTarget.dispose(),
        null !== this._cubemapShader && this._cubemapShader.dispose(),
        null !== this._equirectShader && this._equirectShader.dispose()
      for (let t = 0; t < Fn.length; t++) Fn[t].dispose()
    }
    _cleanup(t) {
      this._renderer.setRenderTarget(Vn), (t.scissorTest = !1), Zn(t, 0, 0, t.width, t.height)
    }
    _fromTexture(t, e) {
      Vn = this._renderer.getRenderTarget()
      const n = e || this._allocateTargets(t)
      return this._textureToCubeUV(t, n), this._applyPMREM(n), this._cleanup(n), n
    }
    _allocateTargets(t) {
      const e = { magFilter: h, minFilter: h, generateMipmaps: !1, type: g, format: _, encoding: T, depthBuffer: !1 },
        n = Yn(e)
      return (n.depthBuffer = !t), null === this._pingPongRenderTarget && (this._pingPongRenderTarget = Yn(e)), n
    }
    _compileMaterial(t) {
      const e = new ln(Fn[0], t)
      this._renderer.compile(e, Un)
    }
    _sceneToCubeUV(t, e, n, i) {
      const r = new Tn(90, 1, e, n),
        a = [1, -1, 1, 1, 1, 1],
        s = [1, 1, 1, -1, -1, -1],
        o = this._renderer,
        l = o.autoClear,
        c = o.toneMapping
      o.getClearColor(Hn), (o.toneMapping = 0), (o.autoClear = !1)
      const h = new ke({ name: 'PMREM.Background', side: 1, depthWrite: !1, depthTest: !1 }),
        u = new ln(new ge(), h)
      let d = !1
      const p = t.background
      p ? p.isColor && (h.color.copy(p), (t.background = null), (d = !0)) : (h.color.copy(Hn), (d = !0))
      for (let e = 0; e < 6; e++) {
        const n = e % 3
        0 === n
          ? (r.up.set(0, a[e], 0), r.lookAt(s[e], 0, 0))
          : 1 === n
          ? (r.up.set(0, 0, a[e]), r.lookAt(0, s[e], 0))
          : (r.up.set(0, a[e], 0), r.lookAt(0, 0, s[e])),
          Zn(i, n * In, e > 2 ? In : 0, In, In),
          o.setRenderTarget(i),
          d && o.render(u, r),
          o.render(t, r)
      }
      u.geometry.dispose(), u.material.dispose(), (o.toneMapping = c), (o.autoClear = l), (t.background = p)
    }
    _textureToCubeUV(t, e) {
      const n = this._renderer,
        a = t.mapping === i || t.mapping === r
      a
        ? (null === this._cubemapShader && (this._cubemapShader = Kn()),
          (this._cubemapShader.uniforms.flipEnvMap.value = !1 === t.isRenderTargetTexture ? -1 : 1))
        : null === this._equirectShader && (this._equirectShader = Jn())
      const s = a ? this._cubemapShader : this._equirectShader,
        o = new ln(Fn[0], s),
        l = s.uniforms
      ;(l.envMap.value = t),
        a || l.texelSize.value.set(1 / t.image.width, 1 / t.image.height),
        Zn(e, 0, 0, 3 * In, 2 * In),
        n.setRenderTarget(e),
        n.render(o, Un)
    }
    _applyPMREM(t) {
      const e = this._renderer,
        n = e.autoClear
      e.autoClear = !1
      for (let e = 1; e < zn; e++) {
        const n = Math.sqrt(Gn[e] * Gn[e] - Gn[e - 1] * Gn[e - 1]),
          i = jn[(e - 1) % jn.length]
        this._blur(t, e - 1, e, n, i)
      }
      e.autoClear = n
    }
    _blur(t, e, n, i, r) {
      const a = this._pingPongRenderTarget
      this._halfBlur(t, a, e, n, i, 'latitudinal', r), this._halfBlur(a, t, n, n, i, 'longitudinal', r)
    }
    _halfBlur(t, e, n, i, r, a, s) {
      const o = this._renderer,
        l = this._blurMaterial
      'latitudinal' !== a &&
        'longitudinal' !== a &&
        console.error('blur direction must be either latitudinal or longitudinal!')
      const c = new ln(Fn[i], l),
        h = l.uniforms,
        u = Bn[n] - 1,
        d = isFinite(r) ? Math.PI / (2 * u) : (2 * Math.PI) / 39,
        p = r / d,
        m = isFinite(r) ? 1 + Math.floor(3 * p) : On
      m > On &&
        console.warn(
          `sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to 20`
        )
      const f = []
      let g = 0
      for (let t = 0; t < On; ++t) {
        const e = t / p,
          n = Math.exp((-e * e) / 2)
        f.push(n), 0 === t ? (g += n) : t < m && (g += 2 * n)
      }
      for (let t = 0; t < f.length; t++) f[t] = f[t] / g
      ;(h.envMap.value = t.texture),
        (h.samples.value = m),
        (h.weights.value = f),
        (h.latitudinal.value = 'latitudinal' === a),
        s && (h.poleAxis.value = s),
        (h.dTheta.value = d),
        (h.mipInt.value = 8 - n)
      const v = Bn[i]
      Zn(e, 3 * Math.max(0, In - 2 * v), (0 === i ? 0 : 2 * In) + 2 * v * (i > 4 ? i - 8 + 4 : 0), 3 * v, 2 * v),
        o.setRenderTarget(e),
        o.render(c, Un)
    }
  }
  function Xn() {
    const t = [],
      e = [],
      n = []
    let i = 8
    for (let r = 0; r < zn; r++) {
      const a = Math.pow(2, i)
      e.push(a)
      let s = 1 / a
      r > 4 ? (s = Nn[r - 8 + 4 - 1]) : 0 === r && (s = 0), n.push(s)
      const o = 1 / (a - 1),
        l = -o / 2,
        c = 1 + o / 2,
        h = [l, l, c, l, c, c, l, l, c, c, l, c],
        u = 6,
        d = 6,
        p = 3,
        m = 2,
        f = 1,
        g = new Float32Array(p * d * u),
        v = new Float32Array(m * d * u),
        _ = new Float32Array(f * d * u)
      for (let t = 0; t < u; t++) {
        const e = ((t % 3) * 2) / 3 - 1,
          n = t > 2 ? 0 : -1,
          i = [e, n, 0, e + 2 / 3, n, 0, e + 2 / 3, n + 1, 0, e, n, 0, e + 2 / 3, n + 1, 0, e, n + 1, 0]
        g.set(i, p * d * t), v.set(h, m * d * t)
        const r = [t, t, t, t, t, t]
        _.set(r, f * d * t)
      }
      const x = new fe()
      x.setAttribute('position', new Ft(g, p)),
        x.setAttribute('uv', new Ft(v, m)),
        x.setAttribute('faceIndex', new Ft(_, f)),
        t.push(x),
        i > 4 && i--
    }
    return { _lodPlanes: t, _sizeLods: e, _sigmas: n }
  }
  function Yn(t) {
    const e = new bn(3 * In, 3 * In, t)
    return (e.texture.mapping = a), (e.texture.name = 'PMREM.cubeUv'), (e.scissorTest = !0), e
  }
  function Zn(t, e, n, i, r) {
    t.viewport.set(e, n, i, r), t.scissor.set(e, n, i, r)
  }
  function Jn() {
    const t = new Lt(1, 1)
    return new Pn({
      name: 'EquirectangularToCubeUV',
      uniforms: { envMap: { value: null }, texelSize: { value: t } },
      vertexShader: Qn(),
      fragmentShader:
        '\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = texture2D ( envMap, uv ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = texture2D ( envMap, uv ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = texture2D ( envMap, uv ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = texture2D ( envMap, uv ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t}\n\t\t',
      blending: 0,
      depthTest: !1,
      depthWrite: !1,
    })
  }
  function Kn() {
    return new Pn({
      name: 'CubemapToCubeUV',
      uniforms: { envMap: { value: null }, flipEnvMap: { value: -1 } },
      vertexShader: Qn(),
      fragmentShader:
        '\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t',
      blending: 0,
      depthTest: !1,
      depthWrite: !1,
    })
  }
  function Qn() {
    return '\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t'
  }
  function $n(t) {
    let e = new WeakMap(),
      n = null
    function a(t) {
      const n = t.target
      n.removeEventListener('dispose', a)
      const i = e.get(n)
      void 0 !== i && (e.delete(n), i.dispose())
    }
    return {
      get: function (s) {
        if (s && s.isTexture) {
          const o = s.mapping,
            l = 303 === o || 304 === o,
            c = o === i || o === r
          if (l || c) {
            if (s.isRenderTargetTexture && !0 === s.needsPMREMUpdate) {
              s.needsPMREMUpdate = !1
              let i = e.get(s)
              return (
                null === n && (n = new qn(t)),
                (i = l ? n.fromEquirectangular(s, i) : n.fromCubemap(s, i)),
                e.set(s, i),
                i.texture
              )
            }
            if (e.has(s)) return e.get(s).texture
            {
              const i = s.image
              if (
                (l && i && i.height > 0) ||
                (c &&
                  i &&
                  (function (t) {
                    let e = 0
                    const n = 6
                    for (let i = 0; i < n; i++) void 0 !== t[i] && e++
                    return e === n
                  })(i))
              ) {
                null === n && (n = new qn(t))
                const i = l ? n.fromEquirectangular(s) : n.fromCubemap(s)
                return e.set(s, i), s.addEventListener('dispose', a), i.texture
              }
              return null
            }
          }
        }
        return s
      },
      dispose: function () {
        ;(e = new WeakMap()), null !== n && (n.dispose(), (n = null))
      },
    }
  }
  function ti(t) {
    const e = {}
    function n(n) {
      if (void 0 !== e[n]) return e[n]
      let i
      switch (n) {
        case 'WEBGL_depth_texture':
          i =
            t.getExtension('WEBGL_depth_texture') ||
            t.getExtension('MOZ_WEBGL_depth_texture') ||
            t.getExtension('WEBKIT_WEBGL_depth_texture')
          break
        case 'EXT_texture_filter_anisotropic':
          i =
            t.getExtension('EXT_texture_filter_anisotropic') ||
            t.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
            t.getExtension('WEBKIT_EXT_texture_filter_anisotropic')
          break
        case 'WEBGL_compressed_texture_s3tc':
          i =
            t.getExtension('WEBGL_compressed_texture_s3tc') ||
            t.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
            t.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc')
          break
        case 'WEBGL_compressed_texture_pvrtc':
          i =
            t.getExtension('WEBGL_compressed_texture_pvrtc') || t.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc')
          break
        default:
          i = t.getExtension(n)
      }
      return (e[n] = i), i
    }
    return {
      has: function (t) {
        return null !== n(t)
      },
      init: function (t) {
        t.isWebGL2
          ? n('EXT_color_buffer_float')
          : (n('WEBGL_depth_texture'),
            n('OES_texture_float'),
            n('OES_texture_half_float'),
            n('OES_texture_half_float_linear'),
            n('OES_standard_derivatives'),
            n('OES_element_index_uint'),
            n('OES_vertex_array_object'),
            n('ANGLE_instanced_arrays')),
          n('OES_texture_float_linear'),
          n('EXT_color_buffer_half_float'),
          n('WEBGL_multisampled_render_to_texture')
      },
      get: function (t) {
        const e = n(t)
        return null === e && console.warn('THREE.WebGLRenderer: ' + t + ' extension not supported.'), e
      },
    }
  }
  function ei(t, e, n, i) {
    const r = {},
      a = new WeakMap()
    function s(t) {
      const o = t.target
      null !== o.index && e.remove(o.index)
      for (const t in o.attributes) e.remove(o.attributes[t])
      o.removeEventListener('dispose', s), delete r[o.id]
      const l = a.get(o)
      l && (e.remove(l), a.delete(o)),
        i.releaseStatesOfGeometry(o),
        !0 === o.isInstancedBufferGeometry && delete o._maxInstanceCount,
        n.memory.geometries--
    }
    function o(t) {
      const n = [],
        i = t.index,
        r = t.attributes.position
      let s = 0
      if (null !== i) {
        const t = i.array
        s = i.version
        for (let e = 0, i = t.length; e < i; e += 3) {
          const i = t[e + 0],
            r = t[e + 1],
            a = t[e + 2]
          n.push(i, r, r, a, a, i)
        }
      } else {
        const t = r.array
        s = r.version
        for (let e = 0, i = t.length / 3 - 1; e < i; e += 3) {
          const t = e + 0,
            i = e + 1,
            r = e + 2
          n.push(t, i, i, r, r, t)
        }
      }
      const o = new (se(n) > 65535 ? Gt : Bt)(n, 1)
      o.version = s
      const l = a.get(t)
      l && e.remove(l), a.set(t, o)
    }
    return {
      get: function (t, e) {
        return !0 === r[e.id] || (e.addEventListener('dispose', s), (r[e.id] = !0), n.memory.geometries++), e
      },
      update: function (t) {
        const n = t.attributes
        for (const t in n) e.update(n[t], 34962)
        const i = t.morphAttributes
        for (const t in i) {
          const n = i[t]
          for (let t = 0, i = n.length; t < i; t++) e.update(n[t], 34962)
        }
      },
      getWireframeAttribute: function (t) {
        const e = a.get(t)
        if (e) {
          const n = t.index
          null !== n && e.version < n.version && o(t)
        } else o(t)
        return a.get(t)
      },
    }
  }
  function ni(t, e, n, i) {
    const r = i.isWebGL2
    let a, s, o
    ;(this.setMode = function (t) {
      a = t
    }),
      (this.setIndex = function (t) {
        ;(s = t.type), (o = t.bytesPerElement)
      }),
      (this.render = function (e, i) {
        t.drawElements(a, i, s, e * o), n.update(i, a, 1)
      }),
      (this.renderInstances = function (i, l, c) {
        if (0 === c) return
        let h, u
        if (r) (h = t), (u = 'drawElementsInstanced')
        else if (((h = e.get('ANGLE_instanced_arrays')), (u = 'drawElementsInstancedANGLE'), null === h))
          return void console.error(
            'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.'
          )
        h[u](a, l, s, i * o, c), n.update(l, a, c)
      })
  }
  function ii(t) {
    const e = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 }
    return {
      memory: { geometries: 0, textures: 0 },
      render: e,
      programs: null,
      autoReset: !0,
      reset: function () {
        e.frame++, (e.calls = 0), (e.triangles = 0), (e.points = 0), (e.lines = 0)
      },
      update: function (t, n, i) {
        switch ((e.calls++, n)) {
          case 4:
            e.triangles += i * (t / 3)
            break
          case 1:
            e.lines += i * (t / 2)
            break
          case 3:
            e.lines += i * (t - 1)
            break
          case 2:
            e.lines += i * t
            break
          case 0:
            e.points += i * t
            break
          default:
            console.error('THREE.WebGLInfo: Unknown draw mode:', n)
        }
      },
    }
  }
  class ri extends yn {
    constructor(t = null, e = 1, n = 1, i = 1) {
      super(null),
        (this.image = { data: t, width: e, height: n, depth: i }),
        (this.magFilter = c),
        (this.minFilter = c),
        (this.wrapR = o),
        (this.generateMipmaps = !1),
        (this.flipY = !1),
        (this.unpackAlignment = 1)
    }
  }
  function ai(t, e) {
    return t[0] - e[0]
  }
  function si(t, e) {
    return Math.abs(e[1]) - Math.abs(t[1])
  }
  function oi(t, e) {
    let n = 1
    const i = e.isInterleavedBufferAttribute ? e.data.array : e.array
    i instanceof Int8Array
      ? (n = 127)
      : i instanceof Int16Array
      ? (n = 32767)
      : i instanceof Int32Array
      ? (n = 2147483647)
      : console.error('THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', i),
      t.divideScalar(n)
  }
  function li(t, e, n) {
    const i = {},
      r = new Float32Array(8),
      a = new WeakMap(),
      s = new B(),
      o = []
    for (let t = 0; t < 8; t++) o[t] = [t, 0]
    return {
      update: function (l, c, h, u) {
        const d = l.morphTargetInfluences
        if (!0 === e.isWebGL2) {
          const i = c.morphAttributes.position.length
          let r = a.get(c)
          if (void 0 === r || r.count !== i) {
            void 0 !== r && r.texture.dispose()
            const t = void 0 !== c.morphAttributes.normal,
              n = c.morphAttributes.position,
              o = c.morphAttributes.normal || [],
              l = !0 === t ? 2 : 1
            let h = c.attributes.position.count * l,
              u = 1
            h > e.maxTextureSize && ((u = Math.ceil(h / e.maxTextureSize)), (h = e.maxTextureSize))
            const d = new Float32Array(h * u * 4 * i),
              p = new ri(d, h, u, i)
            ;(p.format = _), (p.type = f), (p.needsUpdate = !0)
            const m = 4 * l
            for (let e = 0; e < i; e++) {
              const i = n[e],
                r = o[e],
                a = h * u * 4 * e
              for (let e = 0; e < i.count; e++) {
                s.fromBufferAttribute(i, e), !0 === i.normalized && oi(s, i)
                const n = e * m
                ;(d[a + n + 0] = s.x),
                  (d[a + n + 1] = s.y),
                  (d[a + n + 2] = s.z),
                  (d[a + n + 3] = 0),
                  !0 === t &&
                    (s.fromBufferAttribute(r, e),
                    !0 === r.normalized && oi(s, r),
                    (d[a + n + 4] = s.x),
                    (d[a + n + 5] = s.y),
                    (d[a + n + 6] = s.z),
                    (d[a + n + 7] = 0))
              }
            }
            function g() {
              p.dispose(), a.delete(c), c.removeEventListener('dispose', g)
            }
            ;(r = { count: i, texture: p, size: new Lt(h, u) }), a.set(c, r), c.addEventListener('dispose', g)
          }
          let o = 0
          for (let t = 0; t < d.length; t++) o += d[t]
          const l = c.morphTargetsRelative ? 1 : 1 - o
          u.getUniforms().setValue(t, 'morphTargetBaseInfluence', l),
            u.getUniforms().setValue(t, 'morphTargetInfluences', d),
            u.getUniforms().setValue(t, 'morphTargetsTexture', r.texture, n),
            u.getUniforms().setValue(t, 'morphTargetsTextureSize', r.size)
        } else {
          const e = void 0 === d ? 0 : d.length
          let n = i[c.id]
          if (void 0 === n || n.length !== e) {
            n = []
            for (let t = 0; t < e; t++) n[t] = [t, 0]
            i[c.id] = n
          }
          for (let t = 0; t < e; t++) {
            const e = n[t]
            ;(e[0] = t), (e[1] = d[t])
          }
          n.sort(si)
          for (let t = 0; t < 8; t++)
            t < e && n[t][1]
              ? ((o[t][0] = n[t][0]), (o[t][1] = n[t][1]))
              : ((o[t][0] = Number.MAX_SAFE_INTEGER), (o[t][1] = 0))
          o.sort(ai)
          const a = c.morphAttributes.position,
            s = c.morphAttributes.normal
          let l = 0
          for (let t = 0; t < 8; t++) {
            const e = o[t],
              n = e[0],
              i = e[1]
            n !== Number.MAX_SAFE_INTEGER && i
              ? (a && c.getAttribute('morphTarget' + t) !== a[n] && c.setAttribute('morphTarget' + t, a[n]),
                s && c.getAttribute('morphNormal' + t) !== s[n] && c.setAttribute('morphNormal' + t, s[n]),
                (r[t] = i),
                (l += i))
              : (a && !0 === c.hasAttribute('morphTarget' + t) && c.deleteAttribute('morphTarget' + t),
                s && !0 === c.hasAttribute('morphNormal' + t) && c.deleteAttribute('morphNormal' + t),
                (r[t] = 0))
          }
          const h = c.morphTargetsRelative ? 1 : 1 - l
          u.getUniforms().setValue(t, 'morphTargetBaseInfluence', h),
            u.getUniforms().setValue(t, 'morphTargetInfluences', r)
        }
      },
    }
  }
  ri.prototype.isDataTexture2DArray = !0
  class ci extends bn {
    constructor(t, e, n = {}) {
      super(t, e, n),
        (this.samples = 4),
        (this.ignoreDepthForMultisampleCopy = void 0 === n.ignoreDepth || n.ignoreDepth),
        (this.useRenderToTexture = void 0 !== n.useRenderToTexture && n.useRenderToTexture),
        (this.useRenderbuffer = !1 === this.useRenderToTexture)
    }
    copy(t) {
      return (
        super.copy.call(this, t),
        (this.samples = t.samples),
        (this.useRenderToTexture = t.useRenderToTexture),
        (this.useRenderbuffer = t.useRenderbuffer),
        this
      )
    }
  }
  function hi(t, e, n, i) {
    let r = new WeakMap()
    function a(t) {
      const e = t.target
      e.removeEventListener('dispose', a),
        n.remove(e.instanceMatrix),
        null !== e.instanceColor && n.remove(e.instanceColor)
    }
    return {
      update: function (t) {
        const s = i.render.frame,
          o = t.geometry,
          l = e.get(t, o)
        return (
          r.get(l) !== s && (e.update(l), r.set(l, s)),
          t.isInstancedMesh &&
            (!1 === t.hasEventListener('dispose', a) && t.addEventListener('dispose', a),
            n.update(t.instanceMatrix, 34962),
            null !== t.instanceColor && n.update(t.instanceColor, 34962)),
          l
        )
      },
      dispose: function () {
        r = new WeakMap()
      },
    }
  }
  ci.prototype.isWebGLMultisampleRenderTarget = !0
  class ui extends yn {
    constructor(t = null, e = 1, n = 1, i = 1) {
      super(null),
        (this.image = { data: t, width: e, height: n, depth: i }),
        (this.magFilter = c),
        (this.minFilter = c),
        (this.wrapR = o),
        (this.generateMipmaps = !1),
        (this.flipY = !1),
        (this.unpackAlignment = 1)
    }
  }
  ui.prototype.isDataTexture3D = !0
  const di = new yn(),
    pi = new ri(),
    mi = new ui(),
    fi = new An(),
    gi = [],
    vi = [],
    _i = new Float32Array(16),
    xi = new Float32Array(9),
    Mi = new Float32Array(4)
  function yi(t, e, n) {
    const i = t[0]
    if (i <= 0 || i > 0) return t
    const r = e * n
    let a = gi[r]
    if ((void 0 === a && ((a = new Float32Array(r)), (gi[r] = a)), 0 !== e)) {
      i.toArray(a, 0)
      for (let i = 1, r = 0; i !== e; ++i) (r += n), t[i].toArray(a, r)
    }
    return a
  }
  function Si(t, e) {
    if (t.length !== e.length) return !1
    for (let n = 0, i = t.length; n < i; n++) if (t[n] !== e[n]) return !1
    return !0
  }
  function bi(t, e) {
    for (let n = 0, i = e.length; n < i; n++) t[n] = e[n]
  }
  function wi(t, e) {
    let n = vi[e]
    void 0 === n && ((n = new Int32Array(e)), (vi[e] = n))
    for (let i = 0; i !== e; ++i) n[i] = t.allocateTextureUnit()
    return n
  }
  function Ti(t, e) {
    const n = this.cache
    n[0] !== e && (t.uniform1f(this.addr, e), (n[0] = e))
  }
  function Ei(t, e) {
    const n = this.cache
    if (void 0 !== e.x) (n[0] === e.x && n[1] === e.y) || (t.uniform2f(this.addr, e.x, e.y), (n[0] = e.x), (n[1] = e.y))
    else {
      if (Si(n, e)) return
      t.uniform2fv(this.addr, e), bi(n, e)
    }
  }
  function Li(t, e) {
    const n = this.cache
    if (void 0 !== e.x)
      (n[0] === e.x && n[1] === e.y && n[2] === e.z) ||
        (t.uniform3f(this.addr, e.x, e.y, e.z), (n[0] = e.x), (n[1] = e.y), (n[2] = e.z))
    else if (void 0 !== e.r)
      (n[0] === e.r && n[1] === e.g && n[2] === e.b) ||
        (t.uniform3f(this.addr, e.r, e.g, e.b), (n[0] = e.r), (n[1] = e.g), (n[2] = e.b))
    else {
      if (Si(n, e)) return
      t.uniform3fv(this.addr, e), bi(n, e)
    }
  }
  function Ai(t, e) {
    const n = this.cache
    if (void 0 !== e.x)
      (n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w) ||
        (t.uniform4f(this.addr, e.x, e.y, e.z, e.w), (n[0] = e.x), (n[1] = e.y), (n[2] = e.z), (n[3] = e.w))
    else {
      if (Si(n, e)) return
      t.uniform4fv(this.addr, e), bi(n, e)
    }
  }
  function Ci(t, e) {
    const n = this.cache,
      i = e.elements
    if (void 0 === i) {
      if (Si(n, e)) return
      t.uniformMatrix2fv(this.addr, !1, e), bi(n, e)
    } else {
      if (Si(n, i)) return
      Mi.set(i), t.uniformMatrix2fv(this.addr, !1, Mi), bi(n, i)
    }
  }
  function Di(t, e) {
    const n = this.cache,
      i = e.elements
    if (void 0 === i) {
      if (Si(n, e)) return
      t.uniformMatrix3fv(this.addr, !1, e), bi(n, e)
    } else {
      if (Si(n, i)) return
      xi.set(i), t.uniformMatrix3fv(this.addr, !1, xi), bi(n, i)
    }
  }
  function Ri(t, e) {
    const n = this.cache,
      i = e.elements
    if (void 0 === i) {
      if (Si(n, e)) return
      t.uniformMatrix4fv(this.addr, !1, e), bi(n, e)
    } else {
      if (Si(n, i)) return
      _i.set(i), t.uniformMatrix4fv(this.addr, !1, _i), bi(n, i)
    }
  }
  function Pi(t, e) {
    const n = this.cache
    n[0] !== e && (t.uniform1i(this.addr, e), (n[0] = e))
  }
  function Ii(t, e) {
    const n = this.cache
    Si(n, e) || (t.uniform2iv(this.addr, e), bi(n, e))
  }
  function Ni(t, e) {
    const n = this.cache
    Si(n, e) || (t.uniform3iv(this.addr, e), bi(n, e))
  }
  function zi(t, e) {
    const n = this.cache
    Si(n, e) || (t.uniform4iv(this.addr, e), bi(n, e))
  }
  function Oi(t, e) {
    const n = this.cache
    n[0] !== e && (t.uniform1ui(this.addr, e), (n[0] = e))
  }
  function Ui(t, e) {
    const n = this.cache
    Si(n, e) || (t.uniform2uiv(this.addr, e), bi(n, e))
  }
  function Fi(t, e) {
    const n = this.cache
    Si(n, e) || (t.uniform3uiv(this.addr, e), bi(n, e))
  }
  function Bi(t, e) {
    const n = this.cache
    Si(n, e) || (t.uniform4uiv(this.addr, e), bi(n, e))
  }
  function Gi(t, e, n) {
    const i = this.cache,
      r = n.allocateTextureUnit()
    i[0] !== r && (t.uniform1i(this.addr, r), (i[0] = r)), n.safeSetTexture2D(e || di, r)
  }
  function Hi(t, e, n) {
    const i = this.cache,
      r = n.allocateTextureUnit()
    i[0] !== r && (t.uniform1i(this.addr, r), (i[0] = r)), n.setTexture3D(e || mi, r)
  }
  function Vi(t, e, n) {
    const i = this.cache,
      r = n.allocateTextureUnit()
    i[0] !== r && (t.uniform1i(this.addr, r), (i[0] = r)), n.safeSetTextureCube(e || fi, r)
  }
  function ki(t, e, n) {
    const i = this.cache,
      r = n.allocateTextureUnit()
    i[0] !== r && (t.uniform1i(this.addr, r), (i[0] = r)), n.setTexture2DArray(e || pi, r)
  }
  function Wi(t, e) {
    t.uniform1fv(this.addr, e)
  }
  function ji(t, e) {
    const n = yi(e, this.size, 2)
    t.uniform2fv(this.addr, n)
  }
  function qi(t, e) {
    const n = yi(e, this.size, 3)
    t.uniform3fv(this.addr, n)
  }
  function Xi(t, e) {
    const n = yi(e, this.size, 4)
    t.uniform4fv(this.addr, n)
  }
  function Yi(t, e) {
    const n = yi(e, this.size, 4)
    t.uniformMatrix2fv(this.addr, !1, n)
  }
  function Zi(t, e) {
    const n = yi(e, this.size, 9)
    t.uniformMatrix3fv(this.addr, !1, n)
  }
  function Ji(t, e) {
    const n = yi(e, this.size, 16)
    t.uniformMatrix4fv(this.addr, !1, n)
  }
  function Ki(t, e) {
    t.uniform1iv(this.addr, e)
  }
  function Qi(t, e) {
    t.uniform2iv(this.addr, e)
  }
  function $i(t, e) {
    t.uniform3iv(this.addr, e)
  }
  function tr(t, e) {
    t.uniform4iv(this.addr, e)
  }
  function er(t, e) {
    t.uniform1uiv(this.addr, e)
  }
  function nr(t, e) {
    t.uniform2uiv(this.addr, e)
  }
  function ir(t, e) {
    t.uniform3uiv(this.addr, e)
  }
  function rr(t, e) {
    t.uniform4uiv(this.addr, e)
  }
  function ar(t, e, n) {
    const i = e.length,
      r = wi(n, i)
    t.uniform1iv(this.addr, r)
    for (let t = 0; t !== i; ++t) n.safeSetTexture2D(e[t] || di, r[t])
  }
  function sr(t, e, n) {
    const i = e.length,
      r = wi(n, i)
    t.uniform1iv(this.addr, r)
    for (let t = 0; t !== i; ++t) n.setTexture3D(e[t] || mi, r[t])
  }
  function or(t, e, n) {
    const i = e.length,
      r = wi(n, i)
    t.uniform1iv(this.addr, r)
    for (let t = 0; t !== i; ++t) n.safeSetTextureCube(e[t] || fi, r[t])
  }
  function lr(t, e, n) {
    const i = e.length,
      r = wi(n, i)
    t.uniform1iv(this.addr, r)
    for (let t = 0; t !== i; ++t) n.setTexture2DArray(e[t] || pi, r[t])
  }
  function cr(t, e, n) {
    ;(this.id = t),
      (this.addr = n),
      (this.cache = []),
      (this.setValue = (function (t) {
        switch (t) {
          case 5126:
            return Ti
          case 35664:
            return Ei
          case 35665:
            return Li
          case 35666:
            return Ai
          case 35674:
            return Ci
          case 35675:
            return Di
          case 35676:
            return Ri
          case 5124:
          case 35670:
            return Pi
          case 35667:
          case 35671:
            return Ii
          case 35668:
          case 35672:
            return Ni
          case 35669:
          case 35673:
            return zi
          case 5125:
            return Oi
          case 36294:
            return Ui
          case 36295:
            return Fi
          case 36296:
            return Bi
          case 35678:
          case 36198:
          case 36298:
          case 36306:
          case 35682:
            return Gi
          case 35679:
          case 36299:
          case 36307:
            return Hi
          case 35680:
          case 36300:
          case 36308:
          case 36293:
            return Vi
          case 36289:
          case 36303:
          case 36311:
          case 36292:
            return ki
        }
      })(e.type))
  }
  function hr(t, e, n) {
    ;(this.id = t),
      (this.addr = n),
      (this.cache = []),
      (this.size = e.size),
      (this.setValue = (function (t) {
        switch (t) {
          case 5126:
            return Wi
          case 35664:
            return ji
          case 35665:
            return qi
          case 35666:
            return Xi
          case 35674:
            return Yi
          case 35675:
            return Zi
          case 35676:
            return Ji
          case 5124:
          case 35670:
            return Ki
          case 35667:
          case 35671:
            return Qi
          case 35668:
          case 35672:
            return $i
          case 35669:
          case 35673:
            return tr
          case 5125:
            return er
          case 36294:
            return nr
          case 36295:
            return ir
          case 36296:
            return rr
          case 35678:
          case 36198:
          case 36298:
          case 36306:
          case 35682:
            return ar
          case 35679:
          case 36299:
          case 36307:
            return sr
          case 35680:
          case 36300:
          case 36308:
          case 36293:
            return or
          case 36289:
          case 36303:
          case 36311:
          case 36292:
            return lr
        }
      })(e.type))
  }
  function ur(t) {
    ;(this.id = t), (this.seq = []), (this.map = {})
  }
  ;(hr.prototype.updateCache = function (t) {
    const e = this.cache
    t instanceof Float32Array && e.length !== t.length && (this.cache = new Float32Array(t.length)), bi(e, t)
  }),
    (ur.prototype.setValue = function (t, e, n) {
      const i = this.seq
      for (let r = 0, a = i.length; r !== a; ++r) {
        const a = i[r]
        a.setValue(t, e[a.id], n)
      }
    })
  const dr = /(\w+)(\])?(\[|\.)?/g
  function pr(t, e) {
    t.seq.push(e), (t.map[e.id] = e)
  }
  function mr(t, e, n) {
    const i = t.name,
      r = i.length
    for (dr.lastIndex = 0; ; ) {
      const a = dr.exec(i),
        s = dr.lastIndex
      let o = a[1]
      const l = ']' === a[2],
        c = a[3]
      if ((l && (o |= 0), void 0 === c || ('[' === c && s + 2 === r))) {
        pr(n, void 0 === c ? new cr(o, t, e) : new hr(o, t, e))
        break
      }
      {
        let t = n.map[o]
        void 0 === t && ((t = new ur(o)), pr(n, t)), (n = t)
      }
    }
  }
  function fr(t, e) {
    ;(this.seq = []), (this.map = {})
    const n = t.getProgramParameter(e, 35718)
    for (let i = 0; i < n; ++i) {
      const n = t.getActiveUniform(e, i)
      mr(n, t.getUniformLocation(e, n.name), this)
    }
  }
  function gr(t, e, n) {
    const i = t.createShader(e)
    return t.shaderSource(i, n), t.compileShader(i), i
  }
  ;(fr.prototype.setValue = function (t, e, n, i) {
    const r = this.map[e]
    void 0 !== r && r.setValue(t, n, i)
  }),
    (fr.prototype.setOptional = function (t, e, n) {
      const i = e[n]
      void 0 !== i && this.setValue(t, n, i)
    }),
    (fr.upload = function (t, e, n, i) {
      for (let r = 0, a = e.length; r !== a; ++r) {
        const a = e[r],
          s = n[a.id]
        !1 !== s.needsUpdate && a.setValue(t, s.value, i)
      }
    }),
    (fr.seqWithValue = function (t, e) {
      const n = []
      for (let i = 0, r = t.length; i !== r; ++i) {
        const r = t[i]
        r.id in e && n.push(r)
      }
      return n
    })
  let vr = 0
  function _r(t, e, n) {
    const i = t.getShaderParameter(e, 35713),
      r = t.getShaderInfoLog(e).trim()
    return i && '' === r
      ? ''
      : n.toUpperCase() +
          '\n\n' +
          r +
          '\n\n' +
          (function (t) {
            const e = t.split('\n')
            for (let t = 0; t < e.length; t++) e[t] = t + 1 + ': ' + e[t]
            return e.join('\n')
          })(t.getShaderSource(e))
  }
  function xr(t, e) {
    const n = (function (t) {
      switch (t) {
        case T:
          return ['Linear', '( value )']
        case E:
          return ['sRGB', '( value )']
        default:
          return console.warn('THREE.WebGLProgram: Unsupported encoding:', t), ['Linear', '( value )']
      }
    })(e)
    return 'vec4 ' + t + '( vec4 value ) { return LinearTo' + n[0] + n[1] + '; }'
  }
  function Mr(t, e) {
    let n
    switch (e) {
      case 1:
        n = 'Linear'
        break
      case 2:
        n = 'Reinhard'
        break
      case 3:
        n = 'OptimizedCineon'
        break
      case 4:
        n = 'ACESFilmic'
        break
      case 5:
        n = 'Custom'
        break
      default:
        console.warn('THREE.WebGLProgram: Unsupported toneMapping:', e), (n = 'Linear')
    }
    return 'vec3 ' + t + '( vec3 color ) { return ' + n + 'ToneMapping( color ); }'
  }
  function yr(t) {
    return '' !== t
  }
  function Sr(t, e) {
    return t
      .replace(/NUM_DIR_LIGHTS/g, e.numDirLights)
      .replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights)
      .replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights)
      .replace(/NUM_POINT_LIGHTS/g, e.numPointLights)
      .replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights)
      .replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows)
      .replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows)
      .replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows)
  }
  function br(t, e) {
    return t
      .replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes)
      .replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection)
  }
  const wr = /^[ \t]*#include +<([\w\d./]+)>/gm
  function Tr(t) {
    return t.replace(wr, Er)
  }
  function Er(t, e) {
    const n = hn[e]
    if (void 0 === n) throw new Error('Can not resolve #include <' + e + '>')
    return Tr(n)
  }
  const Lr = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,
    Ar =
      /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g
  function Cr(t) {
    return t.replace(Ar, Rr).replace(Lr, Dr)
  }
  function Dr(t, e, n, i) {
    return (
      console.warn(
        'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.'
      ),
      Rr(t, e, n, i)
    )
  }
  function Rr(t, e, n, i) {
    let r = ''
    for (let t = parseInt(e); t < parseInt(n); t++)
      r += i.replace(/\[\s*i\s*\]/g, '[ ' + t + ' ]').replace(/UNROLLED_LOOP_INDEX/g, t)
    return r
  }
  function Pr(t) {
    let e = 'precision ' + t.precision + ' float;\nprecision ' + t.precision + ' int;'
    return (
      'highp' === t.precision
        ? (e += '\n#define HIGH_PRECISION')
        : 'mediump' === t.precision
        ? (e += '\n#define MEDIUM_PRECISION')
        : 'lowp' === t.precision && (e += '\n#define LOW_PRECISION'),
      e
    )
  }
  function Ir(t, e, n, s) {
    const o = t.getContext(),
      l = n.defines
    let c = n.vertexShader,
      h = n.fragmentShader
    const u = (function (t) {
        let e = 'SHADOWMAP_TYPE_BASIC'
        return (
          1 === t.shadowMapType
            ? (e = 'SHADOWMAP_TYPE_PCF')
            : 2 === t.shadowMapType
            ? (e = 'SHADOWMAP_TYPE_PCF_SOFT')
            : 3 === t.shadowMapType && (e = 'SHADOWMAP_TYPE_VSM'),
          e
        )
      })(n),
      d = (function (t) {
        let e = 'ENVMAP_TYPE_CUBE'
        if (t.envMap)
          switch (t.envMapMode) {
            case i:
            case r:
              e = 'ENVMAP_TYPE_CUBE'
              break
            case a:
            case 307:
              e = 'ENVMAP_TYPE_CUBE_UV'
          }
        return e
      })(n),
      p = (function (t) {
        let e = 'ENVMAP_MODE_REFLECTION'
        if (t.envMap)
          switch (t.envMapMode) {
            case r:
            case 307:
              e = 'ENVMAP_MODE_REFRACTION'
          }
        return e
      })(n),
      m = (function (t) {
        let e = 'ENVMAP_BLENDING_NONE'
        if (t.envMap)
          switch (t.combine) {
            case 0:
              e = 'ENVMAP_BLENDING_MULTIPLY'
              break
            case 1:
              e = 'ENVMAP_BLENDING_MIX'
              break
            case 2:
              e = 'ENVMAP_BLENDING_ADD'
          }
        return e
      })(n),
      f = n.isWebGL2
        ? ''
        : (function (t) {
            return [
              t.extensionDerivatives ||
              t.envMapCubeUV ||
              t.bumpMap ||
              t.tangentSpaceNormalMap ||
              t.clearcoatNormalMap ||
              t.flatShading ||
              'physical' === t.shaderID
                ? '#extension GL_OES_standard_derivatives : enable'
                : '',
              (t.extensionFragDepth || t.logarithmicDepthBuffer) && t.rendererExtensionFragDepth
                ? '#extension GL_EXT_frag_depth : enable'
                : '',
              t.extensionDrawBuffers && t.rendererExtensionDrawBuffers
                ? '#extension GL_EXT_draw_buffers : require'
                : '',
              (t.extensionShaderTextureLOD || t.envMap || t.transmission) && t.rendererExtensionShaderTextureLod
                ? '#extension GL_EXT_shader_texture_lod : enable'
                : '',
            ]
              .filter(yr)
              .join('\n')
          })(n),
      g = (function (t) {
        const e = []
        for (const n in t) {
          const i = t[n]
          !1 !== i && e.push('#define ' + n + ' ' + i)
        }
        return e.join('\n')
      })(l),
      v = o.createProgram()
    let _,
      x,
      M = n.glslVersion ? '#version ' + n.glslVersion + '\n' : ''
    n.isRawShaderMaterial
      ? ((_ = [g].filter(yr).join('\n')),
        _.length > 0 && (_ += '\n'),
        (x = [f, g].filter(yr).join('\n')),
        x.length > 0 && (x += '\n'))
      : ((_ = [
          Pr(n),
          '#define SHADER_NAME ' + n.shaderName,
          g,
          n.instancing ? '#define USE_INSTANCING' : '',
          n.instancingColor ? '#define USE_INSTANCING_COLOR' : '',
          n.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',
          '#define MAX_BONES ' + n.maxBones,
          n.useFog && n.fog ? '#define USE_FOG' : '',
          n.useFog && n.fogExp2 ? '#define FOG_EXP2' : '',
          n.map ? '#define USE_MAP' : '',
          n.envMap ? '#define USE_ENVMAP' : '',
          n.envMap ? '#define ' + p : '',
          n.lightMap ? '#define USE_LIGHTMAP' : '',
          n.aoMap ? '#define USE_AOMAP' : '',
          n.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
          n.bumpMap ? '#define USE_BUMPMAP' : '',
          n.normalMap ? '#define USE_NORMALMAP' : '',
          n.normalMap && n.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '',
          n.normalMap && n.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '',
          n.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
          n.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
          n.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
          n.displacementMap && n.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
          n.specularMap ? '#define USE_SPECULARMAP' : '',
          n.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
          n.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',
          n.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
          n.metalnessMap ? '#define USE_METALNESSMAP' : '',
          n.alphaMap ? '#define USE_ALPHAMAP' : '',
          n.transmission ? '#define USE_TRANSMISSION' : '',
          n.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
          n.thicknessMap ? '#define USE_THICKNESSMAP' : '',
          n.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
          n.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',
          n.vertexTangents ? '#define USE_TANGENT' : '',
          n.vertexColors ? '#define USE_COLOR' : '',
          n.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
          n.vertexUvs ? '#define USE_UV' : '',
          n.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
          n.flatShading ? '#define FLAT_SHADED' : '',
          n.skinning ? '#define USE_SKINNING' : '',
          n.useVertexTexture ? '#define BONE_TEXTURE' : '',
          n.morphTargets ? '#define USE_MORPHTARGETS' : '',
          n.morphNormals && !1 === n.flatShading ? '#define USE_MORPHNORMALS' : '',
          n.morphTargets && n.isWebGL2 ? '#define MORPHTARGETS_TEXTURE' : '',
          n.morphTargets && n.isWebGL2 ? '#define MORPHTARGETS_COUNT ' + n.morphTargetsCount : '',
          n.doubleSided ? '#define DOUBLE_SIDED' : '',
          n.flipSided ? '#define FLIP_SIDED' : '',
          n.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
          n.shadowMapEnabled ? '#define ' + u : '',
          n.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
          n.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
          n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '',
          'uniform mat4 modelMatrix;',
          'uniform mat4 modelViewMatrix;',
          'uniform mat4 projectionMatrix;',
          'uniform mat4 viewMatrix;',
          'uniform mat3 normalMatrix;',
          'uniform vec3 cameraPosition;',
          'uniform bool isOrthographic;',
          '#ifdef USE_INSTANCING',
          '\tattribute mat4 instanceMatrix;',
          '#endif',
          '#ifdef USE_INSTANCING_COLOR',
          '\tattribute vec3 instanceColor;',
          '#endif',
          'attribute vec3 position;',
          'attribute vec3 normal;',
          'attribute vec2 uv;',
          '#ifdef USE_TANGENT',
          '\tattribute vec4 tangent;',
          '#endif',
          '#if defined( USE_COLOR_ALPHA )',
          '\tattribute vec4 color;',
          '#elif defined( USE_COLOR )',
          '\tattribute vec3 color;',
          '#endif',
          '#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',
          '\tattribute vec3 morphTarget0;',
          '\tattribute vec3 morphTarget1;',
          '\tattribute vec3 morphTarget2;',
          '\tattribute vec3 morphTarget3;',
          '\t#ifdef USE_MORPHNORMALS',
          '\t\tattribute vec3 morphNormal0;',
          '\t\tattribute vec3 morphNormal1;',
          '\t\tattribute vec3 morphNormal2;',
          '\t\tattribute vec3 morphNormal3;',
          '\t#else',
          '\t\tattribute vec3 morphTarget4;',
          '\t\tattribute vec3 morphTarget5;',
          '\t\tattribute vec3 morphTarget6;',
          '\t\tattribute vec3 morphTarget7;',
          '\t#endif',
          '#endif',
          '#ifdef USE_SKINNING',
          '\tattribute vec4 skinIndex;',
          '\tattribute vec4 skinWeight;',
          '#endif',
          '\n',
        ]
          .filter(yr)
          .join('\n')),
        (x = [
          f,
          Pr(n),
          '#define SHADER_NAME ' + n.shaderName,
          g,
          n.useFog && n.fog ? '#define USE_FOG' : '',
          n.useFog && n.fogExp2 ? '#define FOG_EXP2' : '',
          n.map ? '#define USE_MAP' : '',
          n.matcap ? '#define USE_MATCAP' : '',
          n.envMap ? '#define USE_ENVMAP' : '',
          n.envMap ? '#define ' + d : '',
          n.envMap ? '#define ' + p : '',
          n.envMap ? '#define ' + m : '',
          n.lightMap ? '#define USE_LIGHTMAP' : '',
          n.aoMap ? '#define USE_AOMAP' : '',
          n.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
          n.bumpMap ? '#define USE_BUMPMAP' : '',
          n.normalMap ? '#define USE_NORMALMAP' : '',
          n.normalMap && n.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '',
          n.normalMap && n.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '',
          n.clearcoat ? '#define USE_CLEARCOAT' : '',
          n.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
          n.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
          n.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
          n.specularMap ? '#define USE_SPECULARMAP' : '',
          n.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
          n.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',
          n.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
          n.metalnessMap ? '#define USE_METALNESSMAP' : '',
          n.alphaMap ? '#define USE_ALPHAMAP' : '',
          n.alphaTest ? '#define USE_ALPHATEST' : '',
          n.sheen ? '#define USE_SHEEN' : '',
          n.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
          n.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',
          n.transmission ? '#define USE_TRANSMISSION' : '',
          n.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
          n.thicknessMap ? '#define USE_THICKNESSMAP' : '',
          n.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',
          n.vertexTangents ? '#define USE_TANGENT' : '',
          n.vertexColors || n.instancingColor ? '#define USE_COLOR' : '',
          n.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
          n.vertexUvs ? '#define USE_UV' : '',
          n.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
          n.gradientMap ? '#define USE_GRADIENTMAP' : '',
          n.flatShading ? '#define FLAT_SHADED' : '',
          n.doubleSided ? '#define DOUBLE_SIDED' : '',
          n.flipSided ? '#define FLIP_SIDED' : '',
          n.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
          n.shadowMapEnabled ? '#define ' + u : '',
          n.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',
          n.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',
          n.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
          n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '',
          (n.extensionShaderTextureLOD || n.envMap) && n.rendererExtensionShaderTextureLod
            ? '#define TEXTURE_LOD_EXT'
            : '',
          'uniform mat4 viewMatrix;',
          'uniform vec3 cameraPosition;',
          'uniform bool isOrthographic;',
          0 !== n.toneMapping ? '#define TONE_MAPPING' : '',
          0 !== n.toneMapping ? hn.tonemapping_pars_fragment : '',
          0 !== n.toneMapping ? Mr('toneMapping', n.toneMapping) : '',
          n.dithering ? '#define DITHERING' : '',
          n.alphaWrite ? '' : '#define OPAQUE',
          hn.encodings_pars_fragment,
          xr('linearToOutputTexel', n.outputEncoding),
          n.depthPacking ? '#define DEPTH_PACKING ' + n.depthPacking : '',
          '\n',
        ]
          .filter(yr)
          .join('\n'))),
      (c = Tr(c)),
      (c = Sr(c, n)),
      (c = br(c, n)),
      (h = Tr(h)),
      (h = Sr(h, n)),
      (h = br(h, n)),
      (c = Cr(c)),
      (h = Cr(h)),
      n.isWebGL2 &&
        !0 !== n.isRawShaderMaterial &&
        ((M = '#version 300 es\n'),
        (_ =
          [
            'precision mediump sampler2DArray;',
            '#define attribute in',
            '#define varying out',
            '#define texture2D texture',
          ].join('\n') +
          '\n' +
          _),
        (x =
          [
            '#define varying in',
            n.glslVersion === A ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',
            n.glslVersion === A ? '' : '#define gl_FragColor pc_fragColor',
            '#define gl_FragDepthEXT gl_FragDepth',
            '#define texture2D texture',
            '#define textureCube texture',
            '#define texture2DProj textureProj',
            '#define texture2DLodEXT textureLod',
            '#define texture2DProjLodEXT textureProjLod',
            '#define textureCubeLodEXT textureLod',
            '#define texture2DGradEXT textureGrad',
            '#define texture2DProjGradEXT textureProjGrad',
            '#define textureCubeGradEXT textureGrad',
          ].join('\n') +
          '\n' +
          x))
    const y = M + x + h,
      S = gr(o, 35633, M + _ + c),
      b = gr(o, 35632, y)
    if (
      (o.attachShader(v, S),
      o.attachShader(v, b),
      void 0 !== n.index0AttributeName
        ? o.bindAttribLocation(v, 0, n.index0AttributeName)
        : !0 === n.morphTargets && o.bindAttribLocation(v, 0, 'position'),
      o.linkProgram(v),
      t.debug.checkShaderErrors)
    ) {
      const t = o.getProgramInfoLog(v).trim(),
        e = o.getShaderInfoLog(S).trim(),
        n = o.getShaderInfoLog(b).trim()
      let i = !0,
        r = !0
      if (!1 === o.getProgramParameter(v, 35714)) {
        i = !1
        const e = _r(o, S, 'vertex'),
          n = _r(o, b, 'fragment')
        console.error(
          'THREE.WebGLProgram: Shader Error ' +
            o.getError() +
            ' - VALIDATE_STATUS ' +
            o.getProgramParameter(v, 35715) +
            '\n\nProgram Info Log: ' +
            t +
            '\n' +
            e +
            '\n' +
            n
        )
      } else '' !== t ? console.warn('THREE.WebGLProgram: Program Info Log:', t) : ('' !== e && '' !== n) || (r = !1)
      r &&
        (this.diagnostics = {
          runnable: i,
          programLog: t,
          vertexShader: { log: e, prefix: _ },
          fragmentShader: { log: n, prefix: x },
        })
    }
    let w, T
    return (
      o.deleteShader(S),
      o.deleteShader(b),
      (this.getUniforms = function () {
        return void 0 === w && (w = new fr(o, v)), w
      }),
      (this.getAttributes = function () {
        return (
          void 0 === T &&
            (T = (function (t, e) {
              const n = {},
                i = t.getProgramParameter(e, 35721)
              for (let r = 0; r < i; r++) {
                const i = t.getActiveAttrib(e, r),
                  a = i.name
                let s = 1
                35674 === i.type && (s = 2),
                  35675 === i.type && (s = 3),
                  35676 === i.type && (s = 4),
                  (n[a] = { type: i.type, location: t.getAttribLocation(e, a), locationSize: s })
              }
              return n
            })(o, v)),
          T
        )
      }),
      (this.destroy = function () {
        s.releaseStatesOfProgram(this), o.deleteProgram(v), (this.program = void 0)
      }),
      (this.name = n.shaderName),
      (this.id = vr++),
      (this.cacheKey = e),
      (this.usedTimes = 1),
      (this.program = v),
      (this.vertexShader = S),
      (this.fragmentShader = b),
      this
    )
  }
  let Nr = 0
  class zr {
    constructor() {
      ;(this.shaderCache = new Map()), (this.materialCache = new Map())
    }
    update(t) {
      const e = t.vertexShader,
        n = t.fragmentShader,
        i = this._getShaderStage(e),
        r = this._getShaderStage(n),
        a = this._getShaderCacheForMaterial(t)
      return !1 === a.has(i) && (a.add(i), i.usedTimes++), !1 === a.has(r) && (a.add(r), r.usedTimes++), this
    }
    remove(t) {
      const e = this.materialCache.get(t)
      for (const t of e) t.usedTimes--, 0 === t.usedTimes && this.shaderCache.delete(t)
      return this.materialCache.delete(t), this
    }
    getVertexShaderID(t) {
      return this._getShaderStage(t.vertexShader).id
    }
    getFragmentShaderID(t) {
      return this._getShaderStage(t.fragmentShader).id
    }
    dispose() {
      this.shaderCache.clear(), this.materialCache.clear()
    }
    _getShaderCacheForMaterial(t) {
      const e = this.materialCache
      return !1 === e.has(t) && e.set(t, new Set()), e.get(t)
    }
    _getShaderStage(t) {
      const e = this.shaderCache
      if (!1 === e.has(t)) {
        const n = new Or()
        e.set(t, n)
      }
      return e.get(t)
    }
  }
  class Or {
    constructor() {
      ;(this.id = Nr++), (this.usedTimes = 0)
    }
  }
  function Ur(t, e, n, i, r, s, o) {
    const l = new jt(),
      c = new zr(),
      h = [],
      u = r.isWebGL2,
      d = r.logarithmicDepthBuffer,
      p = r.floatVertexTextures,
      m = r.maxVertexUniforms,
      f = r.vertexTextures
    let g = r.precision
    const v = {
      MeshDepthMaterial: 'depth',
      MeshDistanceMaterial: 'distanceRGBA',
      MeshNormalMaterial: 'normal',
      MeshBasicMaterial: 'basic',
      MeshLambertMaterial: 'lambert',
      MeshPhongMaterial: 'phong',
      MeshToonMaterial: 'toon',
      MeshStandardMaterial: 'physical',
      MeshPhysicalMaterial: 'physical',
      MeshMatcapMaterial: 'matcap',
      LineBasicMaterial: 'basic',
      LineDashedMaterial: 'dashed',
      PointsMaterial: 'points',
      ShadowMaterial: 'shadow',
      SpriteMaterial: 'sprite',
    }
    return {
      getParameters: function (s, l, h, _, x) {
        const M = _.fog,
          y = s.isMeshStandardMaterial ? _.environment : null,
          S = (s.isMeshStandardMaterial ? n : e).get(s.envMap || y),
          b = v[s.type],
          w = x.isSkinnedMesh
            ? (function (t) {
                const e = t.skeleton.bones
                if (p) return 1024
                {
                  const t = m,
                    n = Math.floor((t - 20) / 4),
                    i = Math.min(n, e.length)
                  return i < e.length
                    ? (console.warn(
                        'THREE.WebGLRenderer: Skeleton has ' + e.length + ' bones. This GPU supports ' + i + '.'
                      ),
                      0)
                    : i
                }
              })(x)
            : 0
        let L, A, C, D
        if (
          (null !== s.precision &&
            ((g = r.getMaxPrecision(s.precision)),
            g !== s.precision &&
              console.warn('THREE.WebGLProgram.getParameters:', s.precision, 'not supported, using', g, 'instead.')),
          b)
        ) {
          const t = dn[b]
          ;(L = t.vertexShader), (A = t.fragmentShader)
        } else
          (L = s.vertexShader),
            (A = s.fragmentShader),
            c.update(s),
            (C = c.getVertexShaderID(s)),
            (D = c.getFragmentShaderID(s))
        const R = t.getRenderTarget(),
          P = s.alphaTest > 0,
          I = s.clearcoat > 0
        return {
          isWebGL2: u,
          shaderID: b,
          shaderName: s.type,
          vertexShader: L,
          fragmentShader: A,
          defines: s.defines,
          customVertexShaderID: C,
          customFragmentShaderID: D,
          isRawShaderMaterial: !0 === s.isRawShaderMaterial,
          glslVersion: s.glslVersion,
          precision: g,
          instancing: !0 === x.isInstancedMesh,
          instancingColor: !0 === x.isInstancedMesh && null !== x.instanceColor,
          supportsVertexTextures: f,
          outputEncoding: null === R ? t.outputEncoding : !0 === R.isXRRenderTarget ? R.texture.encoding : T,
          map: !!s.map,
          matcap: !!s.matcap,
          envMap: !!S,
          envMapMode: S && S.mapping,
          envMapCubeUV: !!S && (S.mapping === a || 307 === S.mapping),
          lightMap: !!s.lightMap,
          aoMap: !!s.aoMap,
          emissiveMap: !!s.emissiveMap,
          bumpMap: !!s.bumpMap,
          normalMap: !!s.normalMap,
          objectSpaceNormalMap: 1 === s.normalMapType,
          tangentSpaceNormalMap: 0 === s.normalMapType,
          decodeVideoTexture: !!s.map && !0 === s.map.isVideoTexture && s.map.encoding === E,
          clearcoat: I,
          clearcoatMap: I && !!s.clearcoatMap,
          clearcoatRoughnessMap: I && !!s.clearcoatRoughnessMap,
          clearcoatNormalMap: I && !!s.clearcoatNormalMap,
          displacementMap: !!s.displacementMap,
          roughnessMap: !!s.roughnessMap,
          metalnessMap: !!s.metalnessMap,
          specularMap: !!s.specularMap,
          specularIntensityMap: !!s.specularIntensityMap,
          specularColorMap: !!s.specularColorMap,
          alphaMap: !!s.alphaMap,
          alphaTest: P,
          alphaWrite: s.alphaWrite || s.transparent,
          gradientMap: !!s.gradientMap,
          sheen: s.sheen > 0,
          sheenColorMap: !!s.sheenColorMap,
          sheenRoughnessMap: !!s.sheenRoughnessMap,
          transmission: s.transmission > 0,
          transmissionMap: !!s.transmissionMap,
          thicknessMap: !!s.thicknessMap,
          combine: s.combine,
          vertexTangents: !!s.normalMap && !!x.geometry && !!x.geometry.attributes.tangent,
          vertexColors: s.vertexColors,
          vertexAlphas:
            !0 === s.vertexColors &&
            !!x.geometry &&
            !!x.geometry.attributes.color &&
            4 === x.geometry.attributes.color.itemSize,
          vertexUvs: !!(
            s.map ||
            s.bumpMap ||
            s.normalMap ||
            s.specularMap ||
            s.alphaMap ||
            s.emissiveMap ||
            s.roughnessMap ||
            s.metalnessMap ||
            s.clearcoatMap ||
            s.clearcoatRoughnessMap ||
            s.clearcoatNormalMap ||
            s.displacementMap ||
            s.transmissionMap ||
            s.thicknessMap ||
            s.specularIntensityMap ||
            s.specularColorMap ||
            s.sheenColorMap ||
            s.sheenRoughnessMap
          ),
          uvsVertexOnly: !(
            s.map ||
            s.bumpMap ||
            s.normalMap ||
            s.specularMap ||
            s.alphaMap ||
            s.emissiveMap ||
            s.roughnessMap ||
            s.metalnessMap ||
            s.clearcoatNormalMap ||
            s.transmission > 0 ||
            s.transmissionMap ||
            s.thicknessMap ||
            s.specularIntensityMap ||
            s.specularColorMap ||
            s.sheen > 0 ||
            s.sheenColorMap ||
            s.sheenRoughnessMap ||
            !s.displacementMap
          ),
          fog: !!M,
          useFog: s.fog,
          fogExp2: M && M.isFogExp2,
          flatShading: !!s.flatShading,
          sizeAttenuation: s.sizeAttenuation,
          logarithmicDepthBuffer: d,
          skinning: !0 === x.isSkinnedMesh && w > 0,
          maxBones: w,
          useVertexTexture: p,
          morphTargets: !!x.geometry && !!x.geometry.morphAttributes.position,
          morphNormals: !!x.geometry && !!x.geometry.morphAttributes.normal,
          morphTargetsCount:
            x.geometry && x.geometry.morphAttributes.position ? x.geometry.morphAttributes.position.length : 0,
          numDirLights: l.directional.length,
          numPointLights: l.point.length,
          numSpotLights: l.spot.length,
          numRectAreaLights: l.rectArea.length,
          numHemiLights: l.hemi.length,
          numDirLightShadows: l.directionalShadowMap.length,
          numPointLightShadows: l.pointShadowMap.length,
          numSpotLightShadows: l.spotShadowMap.length,
          numClippingPlanes: o.numPlanes,
          numClipIntersection: o.numIntersection,
          dithering: s.dithering,
          shadowMapEnabled: t.shadowMap.enabled && h.length > 0,
          shadowMapType: t.shadowMap.type,
          toneMapping: s.toneMapped ? t.toneMapping : 0,
          physicallyCorrectLights: t.physicallyCorrectLights,
          premultipliedAlpha: s.premultipliedAlpha,
          doubleSided: 2 === s.side,
          flipSided: 1 === s.side,
          depthPacking: void 0 !== s.depthPacking && s.depthPacking,
          index0AttributeName: s.index0AttributeName,
          extensionDerivatives: s.extensions && s.extensions.derivatives,
          extensionFragDepth: s.extensions && s.extensions.fragDepth,
          extensionDrawBuffers: s.extensions && s.extensions.drawBuffers,
          extensionShaderTextureLOD: s.extensions && s.extensions.shaderTextureLOD,
          rendererExtensionFragDepth: u || i.has('EXT_frag_depth'),
          rendererExtensionDrawBuffers: u || i.has('WEBGL_draw_buffers'),
          rendererExtensionShaderTextureLod: u || i.has('EXT_shader_texture_lod'),
          customProgramCacheKey: s.customProgramCacheKey(),
        }
      },
      getProgramCacheKey: function (e) {
        const n = []
        if (
          (e.shaderID ? n.push(e.shaderID) : (n.push(e.customVertexShaderID), n.push(e.customFragmentShaderID)),
          void 0 !== e.defines)
        )
          for (const t in e.defines) n.push(t), n.push(e.defines[t])
        return (
          !1 === e.isRawShaderMaterial &&
            (!(function (t, e) {
              t.push(e.precision),
                t.push(e.outputEncoding),
                t.push(e.envMapMode),
                t.push(e.combine),
                t.push(e.vertexUvs),
                t.push(e.fogExp2),
                t.push(e.sizeAttenuation),
                t.push(e.maxBones),
                t.push(e.morphTargetsCount),
                t.push(e.numDirLights),
                t.push(e.numPointLights),
                t.push(e.numSpotLights),
                t.push(e.numHemiLights),
                t.push(e.numRectAreaLights),
                t.push(e.numDirLightShadows),
                t.push(e.numPointLightShadows),
                t.push(e.numSpotLightShadows),
                t.push(e.shadowMapType),
                t.push(e.toneMapping),
                t.push(e.numClippingPlanes),
                t.push(e.numClipIntersection),
                t.push(e.alphaWrite)
            })(n, e),
            (function (t, e) {
              l.disableAll(), e.isWebGL2 && l.enable(0)
              e.supportsVertexTextures && l.enable(1)
              e.instancing && l.enable(2)
              e.instancingColor && l.enable(3)
              e.map && l.enable(4)
              e.matcap && l.enable(5)
              e.envMap && l.enable(6)
              e.envMapCubeUV && l.enable(7)
              e.lightMap && l.enable(8)
              e.aoMap && l.enable(9)
              e.emissiveMap && l.enable(10)
              e.bumpMap && l.enable(11)
              e.normalMap && l.enable(12)
              e.objectSpaceNormalMap && l.enable(13)
              e.tangentSpaceNormalMap && l.enable(14)
              e.clearcoat && l.enable(15)
              e.clearcoatMap && l.enable(16)
              e.clearcoatRoughnessMap && l.enable(17)
              e.clearcoatNormalMap && l.enable(18)
              e.displacementMap && l.enable(19)
              e.specularMap && l.enable(20)
              e.roughnessMap && l.enable(21)
              e.metalnessMap && l.enable(22)
              e.gradientMap && l.enable(23)
              e.alphaMap && l.enable(24)
              e.alphaTest && l.enable(25)
              e.vertexColors && l.enable(26)
              e.vertexAlphas && l.enable(27)
              e.vertexUvs && l.enable(28)
              e.vertexTangents && l.enable(29)
              e.uvsVertexOnly && l.enable(30)
              e.fog && l.enable(31)
              t.push(l.mask), l.disableAll(), e.useFog && l.enable(0)
              e.flatShading && l.enable(1)
              e.logarithmicDepthBuffer && l.enable(2)
              e.skinning && l.enable(3)
              e.useVertexTexture && l.enable(4)
              e.morphTargets && l.enable(5)
              e.morphNormals && l.enable(6)
              e.premultipliedAlpha && l.enable(7)
              e.shadowMapEnabled && l.enable(8)
              e.physicallyCorrectLights && l.enable(9)
              e.doubleSided && l.enable(10)
              e.flipSided && l.enable(11)
              e.depthPacking && l.enable(12)
              e.dithering && l.enable(13)
              e.specularIntensityMap && l.enable(14)
              e.specularColorMap && l.enable(15)
              e.transmission && l.enable(16)
              e.transmissionMap && l.enable(17)
              e.thicknessMap && l.enable(18)
              e.sheen && l.enable(19)
              e.sheenColorMap && l.enable(20)
              e.sheenRoughnessMap && l.enable(21)
              e.decodeVideoTexture && l.enable(22)
              t.push(l.mask)
            })(n, e),
            n.push(t.outputEncoding)),
          n.push(e.customProgramCacheKey),
          n.join()
        )
      },
      getUniforms: function (t) {
        const e = v[t.type]
        let n
        if (e) {
          const t = dn[e]
          n = Se.clone(t.uniforms)
        } else n = t.uniforms
        return n
      },
      acquireProgram: function (e, n) {
        let i
        for (let t = 0, e = h.length; t < e; t++) {
          const e = h[t]
          if (e.cacheKey === n) {
            ;(i = e), ++i.usedTimes
            break
          }
        }
        return void 0 === i && ((i = new Ir(t, n, e, s)), h.push(i)), i
      },
      releaseProgram: function (t) {
        if (0 == --t.usedTimes) {
          const e = h.indexOf(t)
          ;(h[e] = h[h.length - 1]), h.pop(), t.destroy()
        }
      },
      releaseShaderCache: function (t) {
        c.remove(t)
      },
      programs: h,
      dispose: function () {
        c.dispose()
      },
    }
  }
  function Fr() {
    let t = new WeakMap()
    return {
      get: function (e) {
        let n = t.get(e)
        return void 0 === n && ((n = {}), t.set(e, n)), n
      },
      remove: function (e) {
        t.delete(e)
      },
      update: function (e, n, i) {
        t.get(e)[n] = i
      },
      dispose: function () {
        t = new WeakMap()
      },
    }
  }
  function Br(t, e) {
    return t.groupOrder !== e.groupOrder
      ? t.groupOrder - e.groupOrder
      : t.renderOrder !== e.renderOrder
      ? t.renderOrder - e.renderOrder
      : t.material.id !== e.material.id
      ? t.material.id - e.material.id
      : t.z !== e.z
      ? t.z - e.z
      : t.id - e.id
  }
  function Gr(t, e) {
    return t.groupOrder !== e.groupOrder
      ? t.groupOrder - e.groupOrder
      : t.renderOrder !== e.renderOrder
      ? t.renderOrder - e.renderOrder
      : t.z !== e.z
      ? e.z - t.z
      : t.id - e.id
  }
  function Hr() {
    const t = []
    let e = 0
    const n = [],
      i = [],
      r = []
    function a(n, i, r, a, s, o) {
      let l = t[e]
      return (
        void 0 === l
          ? ((l = {
              id: n.id,
              object: n,
              geometry: i,
              material: r,
              groupOrder: a,
              renderOrder: n.renderOrder,
              z: s,
              group: o,
            }),
            (t[e] = l))
          : ((l.id = n.id),
            (l.object = n),
            (l.geometry = i),
            (l.material = r),
            (l.groupOrder = a),
            (l.renderOrder = n.renderOrder),
            (l.z = s),
            (l.group = o)),
        e++,
        l
      )
    }
    return {
      opaque: n,
      transmissive: i,
      transparent: r,
      init: function () {
        ;(e = 0), (n.length = 0), (i.length = 0), (r.length = 0)
      },
      push: function (t, e, s, o, l, c) {
        const h = a(t, e, s, o, l, c)
        s.transmission > 0 ? i.push(h) : !0 === s.transparent ? r.push(h) : n.push(h)
      },
      unshift: function (t, e, s, o, l, c) {
        const h = a(t, e, s, o, l, c)
        s.transmission > 0 ? i.unshift(h) : !0 === s.transparent ? r.unshift(h) : n.unshift(h)
      },
      finish: function () {
        for (let n = e, i = t.length; n < i; n++) {
          const e = t[n]
          if (null === e.id) break
          ;(e.id = null), (e.object = null), (e.geometry = null), (e.material = null), (e.group = null)
        }
      },
      sort: function (t, e) {
        n.length > 1 && n.sort(t || Br), i.length > 1 && i.sort(e || Gr), r.length > 1 && r.sort(e || Gr)
      },
    }
  }
  function Vr() {
    let t = new WeakMap()
    return {
      get: function (e, n) {
        let i
        return (
          !1 === t.has(e)
            ? ((i = new Hr()), t.set(e, [i]))
            : n >= t.get(e).length
            ? ((i = new Hr()), t.get(e).push(i))
            : (i = t.get(e)[n]),
          i
        )
      },
      dispose: function () {
        t = new WeakMap()
      },
    }
  }
  function kr() {
    const t = {}
    return {
      get: function (e) {
        if (void 0 !== t[e.id]) return t[e.id]
        let n
        switch (e.type) {
          case 'DirectionalLight':
            n = { direction: new B(), color: new zt() }
            break
          case 'SpotLight':
            n = {
              position: new B(),
              direction: new B(),
              color: new zt(),
              distance: 0,
              coneCos: 0,
              penumbraCos: 0,
              decay: 0,
            }
            break
          case 'PointLight':
            n = { position: new B(), color: new zt(), distance: 0, decay: 0 }
            break
          case 'HemisphereLight':
            n = { direction: new B(), skyColor: new zt(), groundColor: new zt() }
            break
          case 'RectAreaLight':
            n = { color: new zt(), position: new B(), halfWidth: new B(), halfHeight: new B() }
        }
        return (t[e.id] = n), n
      },
    }
  }
  let Wr = 0
  function jr(t, e) {
    return (e.castShadow ? 1 : 0) - (t.castShadow ? 1 : 0)
  }
  function qr(t, e) {
    const n = new kr(),
      i = (function () {
        const t = {}
        return {
          get: function (e) {
            if (void 0 !== t[e.id]) return t[e.id]
            let n
            switch (e.type) {
              case 'DirectionalLight':
              case 'SpotLight':
                n = { shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new Lt() }
                break
              case 'PointLight':
                n = {
                  shadowBias: 0,
                  shadowNormalBias: 0,
                  shadowRadius: 1,
                  shadowMapSize: new Lt(),
                  shadowCameraNear: 1,
                  shadowCameraFar: 1e3,
                }
            }
            return (t[e.id] = n), n
          },
        }
      })(),
      r = {
        version: 0,
        hash: {
          directionalLength: -1,
          pointLength: -1,
          spotLength: -1,
          rectAreaLength: -1,
          hemiLength: -1,
          numDirectionalShadows: -1,
          numPointShadows: -1,
          numSpotShadows: -1,
        },
        ambient: [0, 0, 0],
        probe: [],
        directional: [],
        directionalShadow: [],
        directionalShadowMap: [],
        directionalShadowMatrix: [],
        spot: [],
        spotShadow: [],
        spotShadowMap: [],
        spotShadowMatrix: [],
        rectArea: [],
        rectAreaLTC1: null,
        rectAreaLTC2: null,
        point: [],
        pointShadow: [],
        pointShadowMap: [],
        pointShadowMatrix: [],
        hemi: [],
      }
    for (let t = 0; t < 9; t++) r.probe.push(new B())
    const a = new B(),
      s = new gt(),
      o = new gt()
    return {
      setup: function (a, s) {
        let o = 0,
          l = 0,
          c = 0
        for (let t = 0; t < 9; t++) r.probe[t].set(0, 0, 0)
        let h = 0,
          u = 0,
          d = 0,
          p = 0,
          m = 0,
          f = 0,
          g = 0,
          v = 0
        a.sort(jr)
        const _ = !0 !== s ? Math.PI : 1
        for (let t = 0, e = a.length; t < e; t++) {
          const e = a[t],
            s = e.color,
            x = e.intensity,
            M = e.distance,
            y = e.shadow && e.shadow.map ? e.shadow.map.texture : null
          if (e.isAmbientLight) (o += s.r * x * _), (l += s.g * x * _), (c += s.b * x * _)
          else if (e.isLightProbe) for (let t = 0; t < 9; t++) r.probe[t].addScaledVector(e.sh.coefficients[t], x)
          else if (e.isDirectionalLight) {
            const t = n.get(e)
            if ((t.color.copy(e.color).multiplyScalar(e.intensity * _), e.castShadow)) {
              const t = e.shadow,
                n = i.get(e)
              ;(n.shadowBias = t.bias),
                (n.shadowNormalBias = t.normalBias),
                (n.shadowRadius = t.radius),
                (n.shadowMapSize = t.mapSize),
                (r.directionalShadow[h] = n),
                (r.directionalShadowMap[h] = y),
                (r.directionalShadowMatrix[h] = e.shadow.matrix),
                f++
            }
            ;(r.directional[h] = t), h++
          } else if (e.isSpotLight) {
            const t = n.get(e)
            if (
              (t.position.setFromMatrixPosition(e.matrixWorld),
              t.color.copy(s).multiplyScalar(x * _),
              (t.distance = M),
              (t.coneCos = Math.cos(e.angle)),
              (t.penumbraCos = Math.cos(e.angle * (1 - e.penumbra))),
              (t.decay = e.decay),
              e.castShadow)
            ) {
              const t = e.shadow,
                n = i.get(e)
              ;(n.shadowBias = t.bias),
                (n.shadowNormalBias = t.normalBias),
                (n.shadowRadius = t.radius),
                (n.shadowMapSize = t.mapSize),
                (r.spotShadow[d] = n),
                (r.spotShadowMap[d] = y),
                (r.spotShadowMatrix[d] = e.shadow.matrix),
                v++
            }
            ;(r.spot[d] = t), d++
          } else if (e.isRectAreaLight) {
            const t = n.get(e)
            t.color.copy(s).multiplyScalar(x),
              t.halfWidth.set(0.5 * e.width, 0, 0),
              t.halfHeight.set(0, 0.5 * e.height, 0),
              (r.rectArea[p] = t),
              p++
          } else if (e.isPointLight) {
            const t = n.get(e)
            if (
              (t.color.copy(e.color).multiplyScalar(e.intensity * _),
              (t.distance = e.distance),
              (t.decay = e.decay),
              e.castShadow)
            ) {
              const t = e.shadow,
                n = i.get(e)
              ;(n.shadowBias = t.bias),
                (n.shadowNormalBias = t.normalBias),
                (n.shadowRadius = t.radius),
                (n.shadowMapSize = t.mapSize),
                (n.shadowCameraNear = t.camera.near),
                (n.shadowCameraFar = t.camera.far),
                (r.pointShadow[u] = n),
                (r.pointShadowMap[u] = y),
                (r.pointShadowMatrix[u] = e.shadow.matrix),
                g++
            }
            ;(r.point[u] = t), u++
          } else if (e.isHemisphereLight) {
            const t = n.get(e)
            t.skyColor.copy(e.color).multiplyScalar(x * _),
              t.groundColor.copy(e.groundColor).multiplyScalar(x * _),
              (r.hemi[m] = t),
              m++
          }
        }
        p > 0 &&
          (e.isWebGL2 || !0 === t.has('OES_texture_float_linear')
            ? ((r.rectAreaLTC1 = un.LTC_FLOAT_1), (r.rectAreaLTC2 = un.LTC_FLOAT_2))
            : !0 === t.has('OES_texture_half_float_linear')
            ? ((r.rectAreaLTC1 = un.LTC_HALF_1), (r.rectAreaLTC2 = un.LTC_HALF_2))
            : console.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.')),
          (r.ambient[0] = o),
          (r.ambient[1] = l),
          (r.ambient[2] = c)
        const x = r.hash
        ;(x.directionalLength === h &&
          x.pointLength === u &&
          x.spotLength === d &&
          x.rectAreaLength === p &&
          x.hemiLength === m &&
          x.numDirectionalShadows === f &&
          x.numPointShadows === g &&
          x.numSpotShadows === v) ||
          ((r.directional.length = h),
          (r.spot.length = d),
          (r.rectArea.length = p),
          (r.point.length = u),
          (r.hemi.length = m),
          (r.directionalShadow.length = f),
          (r.directionalShadowMap.length = f),
          (r.pointShadow.length = g),
          (r.pointShadowMap.length = g),
          (r.spotShadow.length = v),
          (r.spotShadowMap.length = v),
          (r.directionalShadowMatrix.length = f),
          (r.pointShadowMatrix.length = g),
          (r.spotShadowMatrix.length = v),
          (x.directionalLength = h),
          (x.pointLength = u),
          (x.spotLength = d),
          (x.rectAreaLength = p),
          (x.hemiLength = m),
          (x.numDirectionalShadows = f),
          (x.numPointShadows = g),
          (x.numSpotShadows = v),
          (r.version = Wr++))
      },
      setupView: function (t, e) {
        let n = 0,
          i = 0,
          l = 0,
          c = 0,
          h = 0
        const u = e.matrixWorldInverse
        for (let e = 0, d = t.length; e < d; e++) {
          const d = t[e]
          if (d.isDirectionalLight) {
            const t = r.directional[n]
            t.direction.setFromMatrixPosition(d.matrixWorld),
              a.setFromMatrixPosition(d.target.matrixWorld),
              t.direction.sub(a),
              t.direction.transformDirection(u),
              n++
          } else if (d.isSpotLight) {
            const t = r.spot[l]
            t.position.setFromMatrixPosition(d.matrixWorld),
              t.position.applyMatrix4(u),
              t.direction.setFromMatrixPosition(d.matrixWorld),
              a.setFromMatrixPosition(d.target.matrixWorld),
              t.direction.sub(a),
              t.direction.transformDirection(u),
              l++
          } else if (d.isRectAreaLight) {
            const t = r.rectArea[c]
            t.position.setFromMatrixPosition(d.matrixWorld),
              t.position.applyMatrix4(u),
              o.identity(),
              s.copy(d.matrixWorld),
              s.premultiply(u),
              o.extractRotation(s),
              t.halfWidth.set(0.5 * d.width, 0, 0),
              t.halfHeight.set(0, 0.5 * d.height, 0),
              t.halfWidth.applyMatrix4(o),
              t.halfHeight.applyMatrix4(o),
              c++
          } else if (d.isPointLight) {
            const t = r.point[i]
            t.position.setFromMatrixPosition(d.matrixWorld), t.position.applyMatrix4(u), i++
          } else if (d.isHemisphereLight) {
            const t = r.hemi[h]
            t.direction.setFromMatrixPosition(d.matrixWorld),
              t.direction.transformDirection(u),
              t.direction.normalize(),
              h++
          }
        }
      },
      state: r,
    }
  }
  function Xr(t, e) {
    const n = new qr(t, e),
      i = [],
      r = []
    return {
      init: function () {
        ;(i.length = 0), (r.length = 0)
      },
      state: { lightsArray: i, shadowsArray: r, lights: n },
      setupLights: function (t) {
        n.setup(i, t)
      },
      setupLightsView: function (t) {
        n.setupView(i, t)
      },
      pushLight: function (t) {
        i.push(t)
      },
      pushShadow: function (t) {
        r.push(t)
      },
    }
  }
  function Yr(t, e) {
    let n = new WeakMap()
    return {
      get: function (i, r = 0) {
        let a
        return (
          !1 === n.has(i)
            ? ((a = new Xr(t, e)), n.set(i, [a]))
            : r >= n.get(i).length
            ? ((a = new Xr(t, e)), n.get(i).push(a))
            : (a = n.get(i)[r]),
          a
        )
      },
      dispose: function () {
        n = new WeakMap()
      },
    }
  }
  class Zr extends xe {
    constructor(t) {
      super(),
        (this.type = 'MeshDepthMaterial'),
        (this.depthPacking = 3200),
        (this.map = null),
        (this.alphaMap = null),
        (this.displacementMap = null),
        (this.displacementScale = 1),
        (this.displacementBias = 0),
        (this.wireframe = !1),
        (this.wireframeLinewidth = 1),
        (this.fog = !1),
        this.setValues(t)
    }
    copy(t) {
      return (
        super.copy(t),
        (this.depthPacking = t.depthPacking),
        (this.map = t.map),
        (this.alphaMap = t.alphaMap),
        (this.displacementMap = t.displacementMap),
        (this.displacementScale = t.displacementScale),
        (this.displacementBias = t.displacementBias),
        (this.wireframe = t.wireframe),
        (this.wireframeLinewidth = t.wireframeLinewidth),
        this
      )
    }
  }
  Zr.prototype.isMeshDepthMaterial = !0
  class Jr extends xe {
    constructor(t) {
      super(),
        (this.type = 'MeshDistanceMaterial'),
        (this.referencePosition = new B()),
        (this.nearDistance = 1),
        (this.farDistance = 1e3),
        (this.map = null),
        (this.alphaMap = null),
        (this.displacementMap = null),
        (this.displacementScale = 1),
        (this.displacementBias = 0),
        (this.fog = !1),
        this.setValues(t)
    }
    copy(t) {
      return (
        super.copy(t),
        this.referencePosition.copy(t.referencePosition),
        (this.nearDistance = t.nearDistance),
        (this.farDistance = t.farDistance),
        (this.map = t.map),
        (this.alphaMap = t.alphaMap),
        (this.displacementMap = t.displacementMap),
        (this.displacementScale = t.displacementScale),
        (this.displacementBias = t.displacementBias),
        this
      )
    }
  }
  Jr.prototype.isMeshDistanceMaterial = !0
  function Kr(t, e, n) {
    let i = new ft()
    const r = new Lt(),
      a = new Lt(),
      s = new wt(),
      o = new Zr({ depthPacking: 3201 }),
      l = new Jr(),
      u = {},
      d = n.maxTextureSize,
      p = { 0: 1, 1: 0, 2: 2 },
      m = new be({
        defines: { VSM_SAMPLES: 8 },
        uniforms: { shadow_pass: { value: null }, resolution: { value: new Lt() }, radius: { value: 4 } },
        vertexShader: 'void main() {\n\tgl_Position = vec4( position, 1.0 );\n}',
        fragmentShader:
          'uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}',
      }),
      f = m.clone()
    f.defines.HORIZONTAL_PASS = 1
    const g = new fe()
    g.setAttribute('position', new Ft(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3))
    const v = new ln(g, m),
      x = this
    function M(n, i) {
      const r = e.update(v)
      m.defines.VSM_SAMPLES !== n.blurSamples &&
        ((m.defines.VSM_SAMPLES = n.blurSamples),
        (f.defines.VSM_SAMPLES = n.blurSamples),
        (m.needsUpdate = !0),
        (f.needsUpdate = !0)),
        (m.uniforms.shadow_pass.value = n.map.texture),
        (m.uniforms.resolution.value = n.mapSize),
        (m.uniforms.radius.value = n.radius),
        t.setRenderTarget(n.mapPass),
        t.clear(),
        t.renderBufferDirect(i, null, r, m, v, null),
        (f.uniforms.shadow_pass.value = n.mapPass.texture),
        (f.uniforms.resolution.value = n.mapSize),
        (f.uniforms.radius.value = n.radius),
        t.setRenderTarget(n.map),
        t.clear(),
        t.renderBufferDirect(i, null, r, f, v, null)
    }
    function y(e, n, i, r, a, s, c) {
      let h = null
      const d = !0 === r.isPointLight ? e.customDistanceMaterial : e.customDepthMaterial
      if (
        ((h = void 0 !== d ? d : !0 === r.isPointLight ? l : o),
        (t.localClippingEnabled && !0 === i.clipShadows && 0 !== i.clippingPlanes.length) ||
          (i.displacementMap && 0 !== i.displacementScale) ||
          (i.alphaMap && i.alphaTest > 0))
      ) {
        const t = h.uuid,
          e = i.uuid
        let n = u[t]
        void 0 === n && ((n = {}), (u[t] = n))
        let r = n[e]
        void 0 === r && ((r = h.clone()), (n[e] = r)), (h = r)
      }
      return (
        (h.visible = i.visible),
        (h.wireframe = i.wireframe),
        (h.side =
          3 === c ? (null !== i.shadowSide ? i.shadowSide : i.side) : null !== i.shadowSide ? i.shadowSide : p[i.side]),
        (h.alphaMap = i.alphaMap),
        (h.alphaTest = i.alphaTest),
        (h.clipShadows = i.clipShadows),
        (h.clippingPlanes = i.clippingPlanes),
        (h.clipIntersection = i.clipIntersection),
        (h.displacementMap = i.displacementMap),
        (h.displacementScale = i.displacementScale),
        (h.displacementBias = i.displacementBias),
        (h.wireframeLinewidth = i.wireframeLinewidth),
        (h.linewidth = i.linewidth),
        !0 === r.isPointLight &&
          !0 === h.isMeshDistanceMaterial &&
          (h.referencePosition.setFromMatrixPosition(r.matrixWorld), (h.nearDistance = a), (h.farDistance = s)),
        h
      )
    }
    function S(n, r, a, s, o) {
      if (!1 === n.visible) return
      if (
        n.layers.test(r.layers) &&
        (n.isMesh || n.isLine || n.isPoints) &&
        (n.castShadow || (n.receiveShadow && 3 === o)) &&
        (!n.frustumCulled || i.intersectsObject(n))
      ) {
        n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse, n.matrixWorld)
        const i = e.update(n),
          r = n.material
        if (Array.isArray(r)) {
          const e = i.groups
          for (let l = 0, c = e.length; l < c; l++) {
            const c = e[l],
              h = r[c.materialIndex]
            if (h && h.visible) {
              const e = y(n, 0, h, s, a.near, a.far, o)
              t.renderBufferDirect(a, null, i, e, n, c)
            }
          }
        } else if (r.visible) {
          const e = y(n, 0, r, s, a.near, a.far, o)
          t.renderBufferDirect(a, null, i, e, n, null)
        }
      }
      const l = n.children
      for (let t = 0, e = l.length; t < e; t++) S(l[t], r, a, s, o)
    }
    ;(this.enabled = !1),
      (this.autoUpdate = !0),
      (this.needsUpdate = !1),
      (this.type = 1),
      (this.render = function (e, n, o) {
        if (!1 === x.enabled) return
        if (!1 === x.autoUpdate && !1 === x.needsUpdate) return
        if (0 === e.length) return
        const l = t.getRenderTarget(),
          u = t.getActiveCubeFace(),
          p = t.getActiveMipmapLevel(),
          m = t.state
        m.setBlending(0), m.buffers.color.setClear(1, 1, 1, 1), m.buffers.depth.setTest(!0), m.setScissorTest(!1)
        for (let l = 0, u = e.length; l < u; l++) {
          const u = e[l],
            p = u.shadow
          if (void 0 === p) {
            console.warn('THREE.WebGLShadowMap:', u, 'has no shadow.')
            continue
          }
          if (!1 === p.autoUpdate && !1 === p.needsUpdate) continue
          r.copy(p.mapSize)
          const f = p.getFrameExtents()
          if (
            (r.multiply(f),
            a.copy(p.mapSize),
            (r.x > d || r.y > d) &&
              (r.x > d && ((a.x = Math.floor(d / f.x)), (r.x = a.x * f.x), (p.mapSize.x = a.x)),
              r.y > d && ((a.y = Math.floor(d / f.y)), (r.y = a.y * f.y), (p.mapSize.y = a.y))),
            null === p.map && !p.isPointLightShadow && 3 === this.type)
          ) {
            const t = { minFilter: h, magFilter: h, format: _ }
            ;(p.map = new bn(r.x, r.y, t)),
              (p.map.texture.name = u.name + '.shadowMap'),
              (p.mapPass = new bn(r.x, r.y, t)),
              p.camera.updateProjectionMatrix()
          }
          if (null === p.map) {
            const t = { minFilter: c, magFilter: c, format: _ }
            ;(p.map = new bn(r.x, r.y, t)),
              (p.map.texture.name = u.name + '.shadowMap'),
              p.camera.updateProjectionMatrix()
          }
          t.setRenderTarget(p.map), t.clear()
          const g = p.getViewportCount()
          for (let t = 0; t < g; t++) {
            const e = p.getViewport(t)
            s.set(a.x * e.x, a.y * e.y, a.x * e.z, a.y * e.w),
              m.viewport(s),
              p.updateMatrices(u, t),
              (i = p.getFrustum()),
              S(n, o, p.camera, u, this.type)
          }
          p.isPointLightShadow || 3 !== this.type || M(p, o), (p.needsUpdate = !1)
        }
        ;(x.needsUpdate = !1), t.setRenderTarget(l, u, p)
      })
  }
  function Qr(t, e, i) {
    const r = i.isWebGL2
    const a = new (function () {
        let e = !1
        const n = new wt()
        let i = null
        const r = new wt(0, 0, 0, 0)
        return {
          setMask: function (n) {
            i === n || e || (t.colorMask(n, n, n, n), (i = n))
          },
          setLocked: function (t) {
            e = t
          },
          setClear: function (e, i, a, s, o) {
            !0 === o && ((e *= s), (i *= s), (a *= s)),
              n.set(e, i, a, s),
              !1 === r.equals(n) && (t.clearColor(e, i, a, s), r.copy(n))
          },
          reset: function () {
            ;(e = !1), (i = null), r.set(-1, 0, 0, 0)
          },
        }
      })(),
      s = new (function () {
        let e = !1,
          n = null,
          i = null,
          r = null
        return {
          setTest: function (t) {
            t ? B(2929) : G(2929)
          },
          setMask: function (i) {
            n === i || e || (t.depthMask(i), (n = i))
          },
          setFunc: function (e) {
            if (i !== e) {
              if (e)
                switch (e) {
                  case 0:
                    t.depthFunc(512)
                    break
                  case 1:
                    t.depthFunc(519)
                    break
                  case 2:
                    t.depthFunc(513)
                    break
                  case 3:
                  default:
                    t.depthFunc(515)
                    break
                  case 4:
                    t.depthFunc(514)
                    break
                  case 5:
                    t.depthFunc(518)
                    break
                  case 6:
                    t.depthFunc(516)
                    break
                  case 7:
                    t.depthFunc(517)
                }
              else t.depthFunc(515)
              i = e
            }
          },
          setLocked: function (t) {
            e = t
          },
          setClear: function (e) {
            r !== e && (t.clearDepth(e), (r = e))
          },
          reset: function () {
            ;(e = !1), (n = null), (i = null), (r = null)
          },
        }
      })(),
      o = new (function () {
        let e = !1,
          n = null,
          i = null,
          r = null,
          a = null,
          s = null,
          o = null,
          l = null,
          c = null
        return {
          setTest: function (t) {
            e || (t ? B(2960) : G(2960))
          },
          setMask: function (i) {
            n === i || e || (t.stencilMask(i), (n = i))
          },
          setFunc: function (e, n, s) {
            ;(i === e && r === n && a === s) || (t.stencilFunc(e, n, s), (i = e), (r = n), (a = s))
          },
          setOp: function (e, n, i) {
            ;(s === e && o === n && l === i) || (t.stencilOp(e, n, i), (s = e), (o = n), (l = i))
          },
          setLocked: function (t) {
            e = t
          },
          setClear: function (e) {
            c !== e && (t.clearStencil(e), (c = e))
          },
          reset: function () {
            ;(e = !1), (n = null), (i = null), (r = null), (a = null), (s = null), (o = null), (l = null), (c = null)
          },
        }
      })()
    let l = {},
      c = {},
      h = new WeakMap(),
      u = [],
      d = null,
      p = !1,
      m = null,
      f = null,
      g = null,
      v = null,
      _ = null,
      x = null,
      M = null,
      y = !1,
      S = null,
      b = null,
      w = null,
      T = null,
      E = null
    const L = t.getParameter(35661)
    let A = !1,
      C = 0
    const D = t.getParameter(7938)
    ;-1 !== D.indexOf('WebGL')
      ? ((C = parseFloat(/^WebGL (\d)/.exec(D)[1])), (A = C >= 1))
      : -1 !== D.indexOf('OpenGL ES') && ((C = parseFloat(/^OpenGL ES (\d)/.exec(D)[1])), (A = C >= 2))
    let R = null,
      P = {}
    const I = t.getParameter(3088),
      N = t.getParameter(2978),
      z = new wt().fromArray(I),
      O = new wt().fromArray(N)
    function U(e, n, i) {
      const r = new Uint8Array(4),
        a = t.createTexture()
      t.bindTexture(e, a), t.texParameteri(e, 10241, 9728), t.texParameteri(e, 10240, 9728)
      for (let e = 0; e < i; e++) t.texImage2D(n + e, 0, 6408, 1, 1, 0, 6408, 5121, r)
      return a
    }
    const F = {}
    function B(e) {
      !0 !== l[e] && (t.enable(e), (l[e] = !0))
    }
    function G(e) {
      !1 !== l[e] && (t.disable(e), (l[e] = !1))
    }
    ;(F[3553] = U(3553, 3553, 1)),
      (F[34067] = U(34067, 34069, 6)),
      a.setClear(0, 0, 0, 1),
      s.setClear(1),
      o.setClear(0),
      B(2929),
      s.setFunc(3),
      W(!1),
      j(1),
      B(2884),
      k(0)
    const H = { [n]: 32774, 101: 32778, 102: 32779 }
    if (r) (H[103] = 32775), (H[104] = 32776)
    else {
      const t = e.get('EXT_blend_minmax')
      null !== t && ((H[103] = t.MIN_EXT), (H[104] = t.MAX_EXT))
    }
    const V = {
      200: 0,
      201: 1,
      202: 768,
      204: 770,
      210: 776,
      208: 774,
      206: 772,
      203: 769,
      205: 771,
      209: 775,
      207: 773,
    }
    function k(e, i, r, a, s, o, l, c) {
      if (0 !== e) {
        if ((!1 === p && (B(3042), (p = !0)), 5 === e))
          (s = s || i),
            (o = o || r),
            (l = l || a),
            (i === f && s === _) || (t.blendEquationSeparate(H[i], H[s]), (f = i), (_ = s)),
            (r === g && a === v && o === x && l === M) ||
              (t.blendFuncSeparate(V[r], V[a], V[o], V[l]), (g = r), (v = a), (x = o), (M = l)),
            (m = e),
            (y = null)
        else if (e !== m || c !== y) {
          if (((f === n && _ === n) || (t.blendEquation(32774), (f = n), (_ = n)), c))
            switch (e) {
              case 1:
                t.blendFuncSeparate(1, 771, 1, 771)
                break
              case 2:
                t.blendFunc(1, 1)
                break
              case 3:
                t.blendFuncSeparate(0, 769, 0, 1)
                break
              case 4:
                t.blendFuncSeparate(0, 768, 0, 770)
                break
              default:
                console.error('THREE.WebGLState: Invalid blending: ', e)
            }
          else
            switch (e) {
              case 1:
                t.blendFuncSeparate(770, 771, 1, 771)
                break
              case 2:
                t.blendFunc(770, 1)
                break
              case 3:
                t.blendFuncSeparate(0, 769, 0, 1)
                break
              case 4:
                t.blendFunc(0, 768)
                break
              default:
                console.error('THREE.WebGLState: Invalid blending: ', e)
            }
          ;(g = null), (v = null), (x = null), (M = null), (m = e), (y = c)
        }
      } else !0 === p && (G(3042), (p = !1))
    }
    function W(e) {
      S !== e && (e ? t.frontFace(2304) : t.frontFace(2305), (S = e))
    }
    function j(e) {
      0 !== e
        ? (B(2884), e !== b && (1 === e ? t.cullFace(1029) : 2 === e ? t.cullFace(1028) : t.cullFace(1032)))
        : G(2884),
        (b = e)
    }
    function q(e, n, i) {
      e ? (B(32823), (T === n && E === i) || (t.polygonOffset(n, i), (T = n), (E = i))) : G(32823)
    }
    function X(e) {
      void 0 === e && (e = 33984 + L - 1), R !== e && (t.activeTexture(e), (R = e))
    }
    return {
      buffers: { color: a, depth: s, stencil: o },
      enable: B,
      disable: G,
      bindFramebuffer: function (e, n) {
        return (
          c[e] !== n &&
          (t.bindFramebuffer(e, n), (c[e] = n), r && (36009 === e && (c[36160] = n), 36160 === e && (c[36009] = n)), !0)
        )
      },
      drawBuffers: function (n, r) {
        let a = u,
          s = !1
        if (n)
          if (((a = h.get(r)), void 0 === a && ((a = []), h.set(r, a)), n.isWebGLMultipleRenderTargets)) {
            const t = n.texture
            if (a.length !== t.length || 36064 !== a[0]) {
              for (let e = 0, n = t.length; e < n; e++) a[e] = 36064 + e
              ;(a.length = t.length), (s = !0)
            }
          } else 36064 !== a[0] && ((a[0] = 36064), (s = !0))
        else 1029 !== a[0] && ((a[0] = 1029), (s = !0))
        s && (i.isWebGL2 ? t.drawBuffers(a) : e.get('WEBGL_draw_buffers').drawBuffersWEBGL(a))
      },
      useProgram: function (e) {
        return d !== e && (t.useProgram(e), (d = e), !0)
      },
      setBlending: k,
      setMaterial: function (t, e) {
        2 === t.side ? G(2884) : B(2884)
        let n = 1 === t.side
        e && (n = !n),
          W(n),
          1 === t.blending && !1 === t.transparent
            ? k(0)
            : k(
                t.blending,
                t.blendEquation,
                t.blendSrc,
                t.blendDst,
                t.blendEquationAlpha,
                t.blendSrcAlpha,
                t.blendDstAlpha,
                t.premultipliedAlpha
              ),
          s.setFunc(t.depthFunc),
          s.setTest(t.depthTest),
          s.setMask(t.depthWrite),
          a.setMask(t.colorWrite)
        const i = t.stencilWrite
        o.setTest(i),
          i &&
            (o.setMask(t.stencilWriteMask),
            o.setFunc(t.stencilFunc, t.stencilRef, t.stencilFuncMask),
            o.setOp(t.stencilFail, t.stencilZFail, t.stencilZPass)),
          q(t.polygonOffset, t.polygonOffsetFactor, t.polygonOffsetUnits),
          !0 === t.alphaToCoverage ? B(32926) : G(32926)
      },
      setFlipSided: W,
      setCullFace: j,
      setLineWidth: function (e) {
        e !== w && (A && t.lineWidth(e), (w = e))
      },
      setPolygonOffset: q,
      setScissorTest: function (t) {
        t ? B(3089) : G(3089)
      },
      activeTexture: X,
      bindTexture: function (e, n) {
        null === R && X()
        let i = P[R]
        void 0 === i && ((i = { type: void 0, texture: void 0 }), (P[R] = i)),
          (i.type === e && i.texture === n) || (t.bindTexture(e, n || F[e]), (i.type = e), (i.texture = n))
      },
      unbindTexture: function () {
        const e = P[R]
        void 0 !== e && void 0 !== e.type && (t.bindTexture(e.type, null), (e.type = void 0), (e.texture = void 0))
      },
      compressedTexImage2D: function () {
        try {
          t.compressedTexImage2D.apply(t, arguments)
        } catch (t) {
          console.error('THREE.WebGLState:', t)
        }
      },
      texImage2D: function () {
        try {
          t.texImage2D.apply(t, arguments)
        } catch (t) {
          console.error('THREE.WebGLState:', t)
        }
      },
      texImage3D: function () {
        try {
          t.texImage3D.apply(t, arguments)
        } catch (t) {
          console.error('THREE.WebGLState:', t)
        }
      },
      texStorage2D: function () {
        try {
          t.texStorage2D.apply(t, arguments)
        } catch (t) {
          console.error('THREE.WebGLState:', t)
        }
      },
      texStorage3D: function () {
        try {
          t.texStorage3D.apply(t, arguments)
        } catch (t) {
          console.error('THREE.WebGLState:', t)
        }
      },
      texSubImage2D: function () {
        try {
          t.texSubImage2D.apply(t, arguments)
        } catch (t) {
          console.error('THREE.WebGLState:', t)
        }
      },
      texSubImage3D: function () {
        try {
          t.texSubImage3D.apply(t, arguments)
        } catch (t) {
          console.error('THREE.WebGLState:', t)
        }
      },
      compressedTexSubImage2D: function () {
        try {
          t.compressedTexSubImage2D.apply(t, arguments)
        } catch (t) {
          console.error('THREE.WebGLState:', t)
        }
      },
      scissor: function (e) {
        !1 === z.equals(e) && (t.scissor(e.x, e.y, e.z, e.w), z.copy(e))
      },
      viewport: function (e) {
        !1 === O.equals(e) && (t.viewport(e.x, e.y, e.z, e.w), O.copy(e))
      },
      reset: function () {
        t.disable(3042),
          t.disable(2884),
          t.disable(2929),
          t.disable(32823),
          t.disable(3089),
          t.disable(2960),
          t.disable(32926),
          t.blendEquation(32774),
          t.blendFunc(1, 0),
          t.blendFuncSeparate(1, 0, 1, 0),
          t.colorMask(!0, !0, !0, !0),
          t.clearColor(0, 0, 0, 0),
          t.depthMask(!0),
          t.depthFunc(513),
          t.clearDepth(1),
          t.stencilMask(4294967295),
          t.stencilFunc(519, 0, 4294967295),
          t.stencilOp(7680, 7680, 7680),
          t.clearStencil(0),
          t.cullFace(1029),
          t.frontFace(2305),
          t.polygonOffset(0, 0),
          t.activeTexture(33984),
          t.bindFramebuffer(36160, null),
          !0 === r && (t.bindFramebuffer(36009, null), t.bindFramebuffer(36008, null)),
          t.useProgram(null),
          t.lineWidth(1),
          t.scissor(0, 0, t.canvas.width, t.canvas.height),
          t.viewport(0, 0, t.canvas.width, t.canvas.height),
          (l = {}),
          (R = null),
          (P = {}),
          (c = {}),
          (h = new WeakMap()),
          (u = []),
          (d = null),
          (p = !1),
          (m = null),
          (f = null),
          (g = null),
          (v = null),
          (_ = null),
          (x = null),
          (M = null),
          (y = !1),
          (S = null),
          (b = null),
          (w = null),
          (T = null),
          (E = null),
          z.set(0, 0, t.canvas.width, t.canvas.height),
          O.set(0, 0, t.canvas.width, t.canvas.height),
          a.reset(),
          s.reset(),
          o.reset()
      },
    }
  }
  function $r(t, e, n, i, r, a, y) {
    const S = r.isWebGL2,
      b = r.maxTextures,
      w = r.maxCubemapSize,
      L = r.maxTextureSize,
      A = r.maxSamples,
      D = e.has('WEBGL_multisampled_render_to_texture') ? e.get('WEBGL_multisampled_render_to_texture') : void 0,
      R = new WeakMap()
    let P,
      I = !1
    try {
      I = 'undefined' != typeof OffscreenCanvas && null !== new OffscreenCanvas(1, 1).getContext('2d')
    } catch (t) {}
    function N(t, e) {
      return I ? new OffscreenCanvas(t, e) : oe('canvas')
    }
    function z(t, e, n, i) {
      let r = 1
      if (((t.width > i || t.height > i) && (r = i / Math.max(t.width, t.height)), r < 1 || !0 === e)) {
        if (
          ('undefined' != typeof HTMLImageElement && t instanceof HTMLImageElement) ||
          ('undefined' != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement) ||
          ('undefined' != typeof ImageBitmap && t instanceof ImageBitmap)
        ) {
          const i = e ? U : Math.floor,
            a = i(r * t.width),
            s = i(r * t.height)
          void 0 === P && (P = N(a, s))
          const o = n ? N(a, s) : P
          ;(o.width = a), (o.height = s)
          return (
            o.getContext('2d').drawImage(t, 0, 0, a, s),
            console.warn(
              'THREE.WebGLRenderer: Texture has been resized from (' +
                t.width +
                'x' +
                t.height +
                ') to (' +
                a +
                'x' +
                s +
                ').'
            ),
            o
          )
        }
        return (
          'data' in t &&
            console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + t.width + 'x' + t.height + ').'),
          t
        )
      }
      return t
    }
    function F(t) {
      return O(t.width) && O(t.height)
    }
    function B(t, e) {
      return t.generateMipmaps && e && t.minFilter !== c && t.minFilter !== h
    }
    function G(e) {
      t.generateMipmap(e)
    }
    function H(n, i, r, a, s = !1) {
      if (!1 === S) return i
      if (null !== n) {
        if (void 0 !== t[n]) return t[n]
        console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + n + "'")
      }
      let o = i
      return (
        6403 === i && (5126 === r && (o = 33326), 5131 === r && (o = 33325), 5121 === r && (o = 33321)),
        33319 === i && (5126 === r && (o = 33328), 5131 === r && (o = 33327), 5121 === r && (o = 33323)),
        6407 === i && (5126 === r && (o = 34837), 5131 === r && (o = 34843), 5121 === r && (o = 32849)),
        6408 === i &&
          (5126 === r && (o = 34836),
          5131 === r && (o = 34842),
          5121 === r && (o = a === E && !1 === s ? 35907 : 32856)),
        (33325 !== o && 33326 !== o && 33327 !== o && 33328 !== o && 34842 !== o && 34836 !== o) ||
          e.get('EXT_color_buffer_float'),
        o
      )
    }
    function V(t, e, n) {
      return !0 === B(t, n) || (t.isFramebufferTexture && t.minFilter !== c && t.minFilter !== h)
        ? Math.log2(Math.max(e.width, e.height)) + 1
        : void 0 !== t.mipmaps && t.mipmaps.length > 0
        ? t.mipmaps.length
        : t.isCompressedTexture && Array.isArray(t.image)
        ? e.mipmaps.length
        : 1
    }
    function k(t) {
      return t === c || 1004 === t || 1005 === t ? 9728 : 9729
    }
    function W(e) {
      const n = e.target
      n.removeEventListener('dispose', W),
        (function (e) {
          const n = i.get(e)
          if (void 0 === n.__webglInit) return
          t.deleteTexture(n.__webglTexture), i.remove(e)
        })(n),
        n.isVideoTexture && R.delete(n),
        y.memory.textures--
    }
    function j(e) {
      const n = e.target
      n.removeEventListener('dispose', j),
        (function (e) {
          const n = e.texture,
            r = i.get(e),
            a = i.get(n)
          if (!e) return
          void 0 !== a.__webglTexture && (t.deleteTexture(a.__webglTexture), y.memory.textures--)
          e.depthTexture && e.depthTexture.dispose()
          if (e.isWebGLCubeRenderTarget)
            for (let e = 0; e < 6; e++)
              t.deleteFramebuffer(r.__webglFramebuffer[e]),
                r.__webglDepthbuffer && t.deleteRenderbuffer(r.__webglDepthbuffer[e])
          else
            t.deleteFramebuffer(r.__webglFramebuffer),
              r.__webglDepthbuffer && t.deleteRenderbuffer(r.__webglDepthbuffer),
              r.__webglMultisampledFramebuffer && t.deleteFramebuffer(r.__webglMultisampledFramebuffer),
              r.__webglColorRenderbuffer && t.deleteRenderbuffer(r.__webglColorRenderbuffer),
              r.__webglDepthRenderbuffer && t.deleteRenderbuffer(r.__webglDepthRenderbuffer)
          if (e.isWebGLMultipleRenderTargets)
            for (let e = 0, r = n.length; e < r; e++) {
              const r = i.get(n[e])
              r.__webglTexture && (t.deleteTexture(r.__webglTexture), y.memory.textures--), i.remove(n[e])
            }
          i.remove(n), i.remove(e)
        })(n)
    }
    let q = 0
    function X(t, e) {
      const r = i.get(t)
      if (
        (t.isVideoTexture &&
          (function (t) {
            const e = y.render.frame
            R.get(t) !== e && (R.set(t, e), t.update())
          })(t),
        t.version > 0 && r.__version !== t.version)
      ) {
        const n = t.image
        if (void 0 === n) console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined')
        else {
          if (!1 !== n.complete) return void $(r, t, e)
          console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete')
        }
      }
      n.activeTexture(33984 + e), n.bindTexture(3553, r.__webglTexture)
    }
    function Y(e, r) {
      const s = i.get(e)
      e.version > 0 && s.__version !== e.version
        ? (function (e, i, r) {
            if (6 !== i.image.length) return
            Q(e, i),
              n.activeTexture(33984 + r),
              n.bindTexture(34067, e.__webglTexture),
              t.pixelStorei(37440, i.flipY),
              t.pixelStorei(37441, i.premultiplyAlpha),
              t.pixelStorei(3317, i.unpackAlignment),
              t.pixelStorei(37443, 0)
            const s = i && (i.isCompressedTexture || i.image[0].isCompressedTexture),
              o = i.image[0] && i.image[0].isDataTexture,
              l = []
            for (let t = 0; t < 6; t++)
              (l[t] = s || o ? (o ? i.image[t].image : i.image[t]) : z(i.image[t], !1, !0, w)), (l[t] = rt(i, l[t]))
            const c = l[0],
              h = F(c) || S,
              u = a.convert(i.format, i.encoding),
              d = a.convert(i.type),
              p = H(i.internalFormat, u, d, i.encoding),
              m = S && !0 !== i.isVideoTexture,
              f = void 0 === e.__version
            let g,
              v = V(i, c, h)
            if ((K(34067, i, h), s)) {
              m && f && n.texStorage2D(34067, v, p, c.width, c.height)
              for (let t = 0; t < 6; t++) {
                g = l[t].mipmaps
                for (let e = 0; e < g.length; e++) {
                  const r = g[e]
                  i.format !== _
                    ? null !== u
                      ? m
                        ? n.compressedTexSubImage2D(34069 + t, e, 0, 0, r.width, r.height, u, r.data)
                        : n.compressedTexImage2D(34069 + t, e, p, r.width, r.height, 0, r.data)
                      : console.warn(
                          'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()'
                        )
                    : m
                    ? n.texSubImage2D(34069 + t, e, 0, 0, r.width, r.height, u, d, r.data)
                    : n.texImage2D(34069 + t, e, p, r.width, r.height, 0, u, d, r.data)
                }
              }
            } else {
              ;(g = i.mipmaps), m && f && (g.length > 0 && v++, n.texStorage2D(34067, v, p, l[0].width, l[0].height))
              for (let t = 0; t < 6; t++)
                if (o) {
                  m
                    ? n.texSubImage2D(34069 + t, 0, 0, 0, l[t].width, l[t].height, u, d, l[t].data)
                    : n.texImage2D(34069 + t, 0, p, l[t].width, l[t].height, 0, u, d, l[t].data)
                  for (let e = 0; e < g.length; e++) {
                    const i = g[e].image[t].image
                    m
                      ? n.texSubImage2D(34069 + t, e + 1, 0, 0, i.width, i.height, u, d, i.data)
                      : n.texImage2D(34069 + t, e + 1, p, i.width, i.height, 0, u, d, i.data)
                  }
                } else {
                  m ? n.texSubImage2D(34069 + t, 0, 0, 0, u, d, l[t]) : n.texImage2D(34069 + t, 0, p, u, d, l[t])
                  for (let e = 0; e < g.length; e++) {
                    const i = g[e]
                    m
                      ? n.texSubImage2D(34069 + t, e + 1, 0, 0, u, d, i.image[t])
                      : n.texImage2D(34069 + t, e + 1, p, u, d, i.image[t])
                  }
                }
            }
            B(i, h) && G(34067)
            ;(e.__version = i.version), i.onUpdate && i.onUpdate(i)
          })(s, e, r)
        : (n.activeTexture(33984 + r), n.bindTexture(34067, s.__webglTexture))
    }
    const Z = { [s]: 10497, [o]: 33071, [l]: 33648 },
      J = { [c]: 9728, 1004: 9984, 1005: 9986, [h]: 9729, 1007: 9985, [u]: 9987 }
    function K(n, a, s) {
      if (
        (s
          ? (t.texParameteri(n, 10242, Z[a.wrapS]),
            t.texParameteri(n, 10243, Z[a.wrapT]),
            (32879 !== n && 35866 !== n) || t.texParameteri(n, 32882, Z[a.wrapR]),
            t.texParameteri(n, 10240, J[a.magFilter]),
            t.texParameteri(n, 10241, J[a.minFilter]))
          : (t.texParameteri(n, 10242, 33071),
            t.texParameteri(n, 10243, 33071),
            (32879 !== n && 35866 !== n) || t.texParameteri(n, 32882, 33071),
            (a.wrapS === o && a.wrapT === o) ||
              console.warn(
                'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.'
              ),
            t.texParameteri(n, 10240, k(a.magFilter)),
            t.texParameteri(n, 10241, k(a.minFilter)),
            a.minFilter !== c &&
              a.minFilter !== h &&
              console.warn(
                'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.'
              )),
        !0 === e.has('EXT_texture_filter_anisotropic'))
      ) {
        const s = e.get('EXT_texture_filter_anisotropic')
        if (a.type === f && !1 === e.has('OES_texture_float_linear')) return
        if (!1 === S && a.type === g && !1 === e.has('OES_texture_half_float_linear')) return
        ;(a.anisotropy > 1 || i.get(a).__currentAnisotropy) &&
          (t.texParameterf(n, s.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(a.anisotropy, r.getMaxAnisotropy())),
          (i.get(a).__currentAnisotropy = a.anisotropy))
      }
    }
    function Q(e, n) {
      void 0 === e.__webglInit &&
        ((e.__webglInit = !0),
        n.addEventListener('dispose', W),
        (e.__webglTexture = t.createTexture()),
        y.memory.textures++)
    }
    function $(e, i, r) {
      let s = 3553
      i.isDataTexture2DArray && (s = 35866),
        i.isDataTexture3D && (s = 32879),
        Q(e, i),
        n.activeTexture(33984 + r),
        n.bindTexture(s, e.__webglTexture),
        t.pixelStorei(37440, i.flipY),
        t.pixelStorei(37441, i.premultiplyAlpha),
        t.pixelStorei(3317, i.unpackAlignment),
        t.pixelStorei(37443, 0)
      const l =
        (function (t) {
          return !S && (t.wrapS !== o || t.wrapT !== o || (t.minFilter !== c && t.minFilter !== h))
        })(i) && !1 === F(i.image)
      let u = z(i.image, l, !1, L)
      u = rt(i, u)
      const d = F(u) || S,
        g = a.convert(i.format, i.encoding)
      let y,
        b = a.convert(i.type),
        w = H(i.internalFormat, g, b, i.encoding, i.isVideoTexture)
      K(s, i, d)
      const T = i.mipmaps,
        E = S && !0 !== i.isVideoTexture,
        A = void 0 === e.__version,
        C = V(i, u, d)
      if (i.isDepthTexture)
        (w = 6402),
          S
            ? (w = i.type === f ? 36012 : i.type === m ? 33190 : i.type === v ? 35056 : 33189)
            : i.type === f && console.error('WebGLRenderer: Floating point depth texture requires WebGL2.'),
          i.format === x &&
            6402 === w &&
            i.type !== p &&
            i.type !== m &&
            (console.warn(
              'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.'
            ),
            (i.type = p),
            (b = a.convert(i.type))),
          i.format === M &&
            6402 === w &&
            ((w = 34041),
            i.type !== v &&
              (console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.'),
              (i.type = v),
              (b = a.convert(i.type)))),
          E && A
            ? n.texStorage2D(3553, 1, w, u.width, u.height)
            : n.texImage2D(3553, 0, w, u.width, u.height, 0, g, b, null)
      else if (i.isDataTexture)
        if (T.length > 0 && d) {
          E && A && n.texStorage2D(3553, C, w, T[0].width, T[0].height)
          for (let t = 0, e = T.length; t < e; t++)
            (y = T[t]),
              E
                ? n.texSubImage2D(3553, 0, 0, 0, y.width, y.height, g, b, y.data)
                : n.texImage2D(3553, t, w, y.width, y.height, 0, g, b, y.data)
          i.generateMipmaps = !1
        } else
          E
            ? (A && n.texStorage2D(3553, C, w, u.width, u.height),
              n.texSubImage2D(3553, 0, 0, 0, u.width, u.height, g, b, u.data))
            : n.texImage2D(3553, 0, w, u.width, u.height, 0, g, b, u.data)
      else if (i.isCompressedTexture) {
        E && A && n.texStorage2D(3553, C, w, T[0].width, T[0].height)
        for (let t = 0, e = T.length; t < e; t++)
          (y = T[t]),
            i.format !== _
              ? null !== g
                ? E
                  ? n.compressedTexSubImage2D(3553, t, 0, 0, y.width, y.height, g, y.data)
                  : n.compressedTexImage2D(3553, t, w, y.width, y.height, 0, y.data)
                : console.warn(
                    'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()'
                  )
              : E
              ? n.texSubImage2D(3553, t, 0, 0, y.width, y.height, g, b, y.data)
              : n.texImage2D(3553, t, w, y.width, y.height, 0, g, b, y.data)
      } else if (i.isDataTexture2DArray)
        E
          ? (A && n.texStorage3D(35866, C, w, u.width, u.height, u.depth),
            n.texSubImage3D(35866, 0, 0, 0, 0, u.width, u.height, u.depth, g, b, u.data))
          : n.texImage3D(35866, 0, w, u.width, u.height, u.depth, 0, g, b, u.data)
      else if (i.isDataTexture3D)
        E
          ? (A && n.texStorage3D(32879, C, w, u.width, u.height, u.depth),
            n.texSubImage3D(32879, 0, 0, 0, 0, u.width, u.height, u.depth, g, b, u.data))
          : n.texImage3D(32879, 0, w, u.width, u.height, u.depth, 0, g, b, u.data)
      else if (i.isFramebufferTexture)
        E && A
          ? n.texStorage2D(3553, C, w, u.width, u.height)
          : n.texImage2D(3553, 0, w, u.width, u.height, 0, g, b, null)
      else if (T.length > 0 && d) {
        E && A && n.texStorage2D(3553, C, w, T[0].width, T[0].height)
        for (let t = 0, e = T.length; t < e; t++)
          (y = T[t]), E ? n.texSubImage2D(3553, t, 0, 0, g, b, y) : n.texImage2D(3553, t, w, g, b, y)
        i.generateMipmaps = !1
      } else
        E
          ? (A && n.texStorage2D(3553, C, w, u.width, u.height), n.texSubImage2D(3553, 0, 0, 0, g, b, u))
          : n.texImage2D(3553, 0, w, g, b, u)
      B(i, d) && G(s), (e.__version = i.version), i.onUpdate && i.onUpdate(i)
    }
    function tt(e, r, s, o, l) {
      const c = a.convert(s.format, s.encoding),
        h = a.convert(s.type),
        u = H(s.internalFormat, c, h, s.encoding)
      i.get(r).__hasExternalTextures ||
        (32879 === l || 35866 === l
          ? n.texImage3D(l, 0, u, r.width, r.height, r.depth, 0, c, h, null)
          : n.texImage2D(l, 0, u, r.width, r.height, 0, c, h, null)),
        n.bindFramebuffer(36160, e),
        r.useRenderToTexture
          ? D.framebufferTexture2DMultisampleEXT(36160, o, l, i.get(s).__webglTexture, 0, it(r))
          : t.framebufferTexture2D(36160, o, l, i.get(s).__webglTexture, 0),
        n.bindFramebuffer(36160, null)
    }
    function et(e, n, i) {
      if ((t.bindRenderbuffer(36161, e), n.depthBuffer && !n.stencilBuffer)) {
        let r = 33189
        if (i || n.useRenderToTexture) {
          const e = n.depthTexture
          e && e.isDepthTexture && (e.type === f ? (r = 36012) : e.type === m && (r = 33190))
          const i = it(n)
          n.useRenderToTexture
            ? D.renderbufferStorageMultisampleEXT(36161, i, r, n.width, n.height)
            : t.renderbufferStorageMultisample(36161, i, r, n.width, n.height)
        } else t.renderbufferStorage(36161, r, n.width, n.height)
        t.framebufferRenderbuffer(36160, 36096, 36161, e)
      } else if (n.depthBuffer && n.stencilBuffer) {
        const r = it(n)
        i && n.useRenderbuffer
          ? t.renderbufferStorageMultisample(36161, r, 35056, n.width, n.height)
          : n.useRenderToTexture
          ? D.renderbufferStorageMultisampleEXT(36161, r, 35056, n.width, n.height)
          : t.renderbufferStorage(36161, 34041, n.width, n.height),
          t.framebufferRenderbuffer(36160, 33306, 36161, e)
      } else {
        const e = !0 === n.isWebGLMultipleRenderTargets ? n.texture[0] : n.texture,
          r = a.convert(e.format, e.encoding),
          s = a.convert(e.type),
          o = H(e.internalFormat, r, s, e.encoding),
          l = it(n)
        i && n.useRenderbuffer
          ? t.renderbufferStorageMultisample(36161, l, o, n.width, n.height)
          : n.useRenderToTexture
          ? D.renderbufferStorageMultisampleEXT(36161, l, o, n.width, n.height)
          : t.renderbufferStorage(36161, o, n.width, n.height)
      }
      t.bindRenderbuffer(36161, null)
    }
    function nt(e) {
      const r = i.get(e),
        a = !0 === e.isWebGLCubeRenderTarget
      if (e.depthTexture && !r.__autoAllocateDepthBuffer) {
        if (a) throw new Error('target.depthTexture not supported in Cube render targets')
        !(function (e, r) {
          if (r && r.isWebGLCubeRenderTarget) throw new Error('Depth Texture with cube render targets is not supported')
          if ((n.bindFramebuffer(36160, e), !r.depthTexture || !r.depthTexture.isDepthTexture))
            throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture')
          ;(i.get(r.depthTexture).__webglTexture &&
            r.depthTexture.image.width === r.width &&
            r.depthTexture.image.height === r.height) ||
            ((r.depthTexture.image.width = r.width),
            (r.depthTexture.image.height = r.height),
            (r.depthTexture.needsUpdate = !0)),
            X(r.depthTexture, 0)
          const a = i.get(r.depthTexture).__webglTexture,
            s = it(r)
          if (r.depthTexture.format === x)
            r.useRenderToTexture
              ? D.framebufferTexture2DMultisampleEXT(36160, 36096, 3553, a, 0, s)
              : t.framebufferTexture2D(36160, 36096, 3553, a, 0)
          else {
            if (r.depthTexture.format !== M) throw new Error('Unknown depthTexture format')
            r.useRenderToTexture
              ? D.framebufferTexture2DMultisampleEXT(36160, 33306, 3553, a, 0, s)
              : t.framebufferTexture2D(36160, 33306, 3553, a, 0)
          }
        })(r.__webglFramebuffer, e)
      } else if (a) {
        r.__webglDepthbuffer = []
        for (let i = 0; i < 6; i++)
          n.bindFramebuffer(36160, r.__webglFramebuffer[i]),
            (r.__webglDepthbuffer[i] = t.createRenderbuffer()),
            et(r.__webglDepthbuffer[i], e, !1)
      } else
        n.bindFramebuffer(36160, r.__webglFramebuffer),
          (r.__webglDepthbuffer = t.createRenderbuffer()),
          et(r.__webglDepthbuffer, e, !1)
      n.bindFramebuffer(36160, null)
    }
    function it(t) {
      return S && (t.useRenderbuffer || t.useRenderToTexture) ? Math.min(A, t.samples) : 0
    }
    function rt(t, n) {
      const i = t.encoding,
        r = t.format,
        a = t.type
      return (
        !0 === t.isCompressedTexture ||
          !0 === t.isVideoTexture ||
          t.format === C ||
          (i !== T &&
            (i === E
              ? !1 === S
                ? !0 === e.has('EXT_sRGB') && r === _
                  ? ((t.format = C), (t.minFilter = h), (t.generateMipmaps = !1))
                  : (n = xn.sRGBToLinear(n))
                : (r === _ && a === d) ||
                  console.warn(
                    'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.'
                  )
              : console.error('THREE.WebGLTextures: Unsupported texture encoding:', i))),
        n
      )
    }
    let at = !1,
      st = !1
    ;(this.allocateTextureUnit = function () {
      const t = q
      return (
        t >= b &&
          console.warn('THREE.WebGLTextures: Trying to use ' + t + ' texture units while this GPU supports only ' + b),
        (q += 1),
        t
      )
    }),
      (this.resetTextureUnits = function () {
        q = 0
      }),
      (this.setTexture2D = X),
      (this.setTexture2DArray = function (t, e) {
        const r = i.get(t)
        t.version > 0 && r.__version !== t.version
          ? $(r, t, e)
          : (n.activeTexture(33984 + e), n.bindTexture(35866, r.__webglTexture))
      }),
      (this.setTexture3D = function (t, e) {
        const r = i.get(t)
        t.version > 0 && r.__version !== t.version
          ? $(r, t, e)
          : (n.activeTexture(33984 + e), n.bindTexture(32879, r.__webglTexture))
      }),
      (this.setTextureCube = Y),
      (this.rebindTextures = function (t, e, n) {
        const r = i.get(t)
        void 0 !== e && tt(r.__webglFramebuffer, t, t.texture, 36064, 3553), void 0 !== n && nt(t)
      }),
      (this.setupRenderTarget = function (e) {
        const s = e.texture,
          o = i.get(e),
          l = i.get(s)
        e.addEventListener('dispose', j),
          !0 !== e.isWebGLMultipleRenderTargets &&
            (void 0 === l.__webglTexture && (l.__webglTexture = t.createTexture()),
            (l.__version = s.version),
            y.memory.textures++)
        const c = !0 === e.isWebGLCubeRenderTarget,
          h = !0 === e.isWebGLMultipleRenderTargets,
          u = s.isDataTexture3D || s.isDataTexture2DArray,
          d = F(e) || S
        if (c) {
          o.__webglFramebuffer = []
          for (let e = 0; e < 6; e++) o.__webglFramebuffer[e] = t.createFramebuffer()
        } else if (((o.__webglFramebuffer = t.createFramebuffer()), h))
          if (r.drawBuffers) {
            const n = e.texture
            for (let e = 0, r = n.length; e < r; e++) {
              const r = i.get(n[e])
              void 0 === r.__webglTexture && ((r.__webglTexture = t.createTexture()), y.memory.textures++)
            }
          } else
            console.warn(
              'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.'
            )
        else if (e.useRenderbuffer)
          if (S) {
            ;(o.__webglMultisampledFramebuffer = t.createFramebuffer()),
              (o.__webglColorRenderbuffer = t.createRenderbuffer()),
              t.bindRenderbuffer(36161, o.__webglColorRenderbuffer)
            const i = a.convert(s.format, s.encoding),
              r = a.convert(s.type),
              l = H(s.internalFormat, i, r, s.encoding),
              c = it(e)
            t.renderbufferStorageMultisample(36161, c, l, e.width, e.height),
              n.bindFramebuffer(36160, o.__webglMultisampledFramebuffer),
              t.framebufferRenderbuffer(36160, 36064, 36161, o.__webglColorRenderbuffer),
              t.bindRenderbuffer(36161, null),
              e.depthBuffer &&
                ((o.__webglDepthRenderbuffer = t.createRenderbuffer()), et(o.__webglDepthRenderbuffer, e, !0)),
              n.bindFramebuffer(36160, null)
          } else console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.')
        if (c) {
          n.bindTexture(34067, l.__webglTexture), K(34067, s, d)
          for (let t = 0; t < 6; t++) tt(o.__webglFramebuffer[t], e, s, 36064, 34069 + t)
          B(s, d) && G(34067), n.unbindTexture()
        } else if (h) {
          const t = e.texture
          for (let r = 0, a = t.length; r < a; r++) {
            const a = t[r],
              s = i.get(a)
            n.bindTexture(3553, s.__webglTexture),
              K(3553, a, d),
              tt(o.__webglFramebuffer, e, a, 36064 + r, 3553),
              B(a, d) && G(3553)
          }
          n.unbindTexture()
        } else {
          let t = 3553
          if (u)
            if (S) {
              t = s.isDataTexture3D ? 32879 : 35866
            } else console.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.')
          n.bindTexture(t, l.__webglTexture),
            K(t, s, d),
            tt(o.__webglFramebuffer, e, s, 36064, t),
            B(s, d) && G(t),
            n.unbindTexture()
        }
        e.depthBuffer && nt(e)
      }),
      (this.updateRenderTargetMipmap = function (t) {
        const e = F(t) || S,
          r = !0 === t.isWebGLMultipleRenderTargets ? t.texture : [t.texture]
        for (let a = 0, s = r.length; a < s; a++) {
          const s = r[a]
          if (B(s, e)) {
            const e = t.isWebGLCubeRenderTarget ? 34067 : 3553,
              r = i.get(s).__webglTexture
            n.bindTexture(e, r), G(e), n.unbindTexture()
          }
        }
      }),
      (this.updateMultisampleRenderTarget = function (e) {
        if (e.useRenderbuffer)
          if (S) {
            const r = e.width,
              a = e.height
            let s = 16384
            const o = [36064],
              l = e.stencilBuffer ? 33306 : 36096
            e.depthBuffer && o.push(l),
              e.ignoreDepthForMultisampleCopy || (e.depthBuffer && (s |= 256), e.stencilBuffer && (s |= 1024))
            const c = i.get(e)
            n.bindFramebuffer(36008, c.__webglMultisampledFramebuffer),
              n.bindFramebuffer(36009, c.__webglFramebuffer),
              e.ignoreDepthForMultisampleCopy &&
                (t.invalidateFramebuffer(36008, [l]), t.invalidateFramebuffer(36009, [l])),
              t.blitFramebuffer(0, 0, r, a, 0, 0, r, a, s, 9728),
              t.invalidateFramebuffer(36008, o),
              n.bindFramebuffer(36008, null),
              n.bindFramebuffer(36009, c.__webglMultisampledFramebuffer)
          } else console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.')
      }),
      (this.setupDepthRenderbuffer = nt),
      (this.setupFrameBufferTexture = tt),
      (this.safeSetTexture2D = function (t, e) {
        t &&
          t.isWebGLRenderTarget &&
          (!1 === at &&
            (console.warn(
              "THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."
            ),
            (at = !0)),
          (t = t.texture)),
          X(t, e)
      }),
      (this.safeSetTextureCube = function (t, e) {
        t &&
          t.isWebGLCubeRenderTarget &&
          (!1 === st &&
            (console.warn(
              "THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."
            ),
            (st = !0)),
          (t = t.texture)),
          Y(t, e)
      })
  }
  function ta(t, e, n) {
    const i = n.isWebGL2
    return {
      convert: function (t, n = null) {
        let r
        if (t === d) return 5121
        if (1017 === t) return 32819
        if (1018 === t) return 32820
        if (1019 === t) return 33635
        if (1010 === t) return 5120
        if (1011 === t) return 5122
        if (t === p) return 5123
        if (1013 === t) return 5124
        if (t === m) return 5125
        if (t === f) return 5126
        if (t === g) return i ? 5131 : ((r = e.get('OES_texture_half_float')), null !== r ? r.HALF_FLOAT_OES : null)
        if (1021 === t) return 6406
        if (t === _) return 6408
        if (1024 === t) return 6409
        if (1025 === t) return 6410
        if (t === x) return 6402
        if (t === M) return 34041
        if (1028 === t) return 6403
        if (t === C) return (r = e.get('EXT_sRGB')), null !== r ? r.SRGB_ALPHA_EXT : null
        if (1029 === t) return 36244
        if (1030 === t) return 33319
        if (1031 === t) return 33320
        if (1033 === t) return 36249
        if (t === y || t === S || t === b || t === w)
          if (n === E) {
            if (((r = e.get('WEBGL_compressed_texture_s3tc_srgb')), null === r)) return null
            if (t === y) return r.COMPRESSED_SRGB_S3TC_DXT1_EXT
            if (t === S) return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
            if (t === b) return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
            if (t === w) return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
          } else {
            if (((r = e.get('WEBGL_compressed_texture_s3tc')), null === r)) return null
            if (t === y) return r.COMPRESSED_RGB_S3TC_DXT1_EXT
            if (t === S) return r.COMPRESSED_RGBA_S3TC_DXT1_EXT
            if (t === b) return r.COMPRESSED_RGBA_S3TC_DXT3_EXT
            if (t === w) return r.COMPRESSED_RGBA_S3TC_DXT5_EXT
          }
        if (35840 === t || 35841 === t || 35842 === t || 35843 === t) {
          if (((r = e.get('WEBGL_compressed_texture_pvrtc')), null === r)) return null
          if (35840 === t) return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG
          if (35841 === t) return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG
          if (35842 === t) return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG
          if (35843 === t) return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
        }
        if (36196 === t)
          return (r = e.get('WEBGL_compressed_texture_etc1')), null !== r ? r.COMPRESSED_RGB_ETC1_WEBGL : null
        if (37492 === t || 37496 === t) {
          if (((r = e.get('WEBGL_compressed_texture_etc')), null === r)) return null
          if (37492 === t) return n === E ? r.COMPRESSED_SRGB8_ETC2 : r.COMPRESSED_RGB8_ETC2
          if (37496 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : r.COMPRESSED_RGBA8_ETC2_EAC
        }
        if (
          37808 === t ||
          37809 === t ||
          37810 === t ||
          37811 === t ||
          37812 === t ||
          37813 === t ||
          37814 === t ||
          37815 === t ||
          37816 === t ||
          37817 === t ||
          37818 === t ||
          37819 === t ||
          37820 === t ||
          37821 === t
        ) {
          if (((r = e.get('WEBGL_compressed_texture_astc')), null === r)) return null
          if (37808 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : r.COMPRESSED_RGBA_ASTC_4x4_KHR
          if (37809 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : r.COMPRESSED_RGBA_ASTC_5x4_KHR
          if (37810 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : r.COMPRESSED_RGBA_ASTC_5x5_KHR
          if (37811 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : r.COMPRESSED_RGBA_ASTC_6x5_KHR
          if (37812 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : r.COMPRESSED_RGBA_ASTC_6x6_KHR
          if (37813 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : r.COMPRESSED_RGBA_ASTC_8x5_KHR
          if (37814 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : r.COMPRESSED_RGBA_ASTC_8x6_KHR
          if (37815 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : r.COMPRESSED_RGBA_ASTC_8x8_KHR
          if (37816 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : r.COMPRESSED_RGBA_ASTC_10x5_KHR
          if (37817 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : r.COMPRESSED_RGBA_ASTC_10x6_KHR
          if (37818 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : r.COMPRESSED_RGBA_ASTC_10x8_KHR
          if (37819 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : r.COMPRESSED_RGBA_ASTC_10x10_KHR
          if (37820 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : r.COMPRESSED_RGBA_ASTC_12x10_KHR
          if (37821 === t) return n === E ? r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : r.COMPRESSED_RGBA_ASTC_12x12_KHR
        }
        if (36492 === t) {
          if (((r = e.get('EXT_texture_compression_bptc')), null === r)) return null
          if (36492 === t) return n === E ? r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : r.COMPRESSED_RGBA_BPTC_UNORM_EXT
        }
        return t === v
          ? i
            ? 34042
            : ((r = e.get('WEBGL_depth_texture')), null !== r ? r.UNSIGNED_INT_24_8_WEBGL : null)
          : void 0
      },
    }
  }
  class ea extends Tn {
    constructor(t = []) {
      super(), (this.cameras = t)
    }
  }
  ea.prototype.isArrayCamera = !0
  class na extends ae {
    constructor() {
      super(), (this.type = 'Group')
    }
  }
  na.prototype.isGroup = !0
  const ia = { type: 'move' }
  class ra {
    constructor() {
      ;(this._targetRay = null), (this._grip = null), (this._hand = null)
    }
    getHandSpace() {
      return (
        null === this._hand &&
          ((this._hand = new na()),
          (this._hand.matrixAutoUpdate = !1),
          (this._hand.visible = !1),
          (this._hand.joints = {}),
          (this._hand.inputState = { pinching: !1 })),
        this._hand
      )
    }
    getTargetRaySpace() {
      return (
        null === this._targetRay &&
          ((this._targetRay = new na()),
          (this._targetRay.matrixAutoUpdate = !1),
          (this._targetRay.visible = !1),
          (this._targetRay.hasLinearVelocity = !1),
          (this._targetRay.linearVelocity = new B()),
          (this._targetRay.hasAngularVelocity = !1),
          (this._targetRay.angularVelocity = new B())),
        this._targetRay
      )
    }
    getGripSpace() {
      return (
        null === this._grip &&
          ((this._grip = new na()),
          (this._grip.matrixAutoUpdate = !1),
          (this._grip.visible = !1),
          (this._grip.hasLinearVelocity = !1),
          (this._grip.linearVelocity = new B()),
          (this._grip.hasAngularVelocity = !1),
          (this._grip.angularVelocity = new B())),
        this._grip
      )
    }
    dispatchEvent(t) {
      return (
        null !== this._targetRay && this._targetRay.dispatchEvent(t),
        null !== this._grip && this._grip.dispatchEvent(t),
        null !== this._hand && this._hand.dispatchEvent(t),
        this
      )
    }
    disconnect(t) {
      return (
        this.dispatchEvent({ type: 'disconnected', data: t }),
        null !== this._targetRay && (this._targetRay.visible = !1),
        null !== this._grip && (this._grip.visible = !1),
        null !== this._hand && (this._hand.visible = !1),
        this
      )
    }
    update(t, e, n) {
      let i = null,
        r = null,
        a = null
      const s = this._targetRay,
        o = this._grip,
        l = this._hand
      if (t && 'visible-blurred' !== e.session.visibilityState)
        if (
          (null !== s &&
            ((i = e.getPose(t.targetRaySpace, n)),
            null !== i &&
              (s.matrix.fromArray(i.transform.matrix),
              s.matrix.decompose(s.position, s.rotation, s.scale),
              i.linearVelocity
                ? ((s.hasLinearVelocity = !0), s.linearVelocity.copy(i.linearVelocity))
                : (s.hasLinearVelocity = !1),
              i.angularVelocity
                ? ((s.hasAngularVelocity = !0), s.angularVelocity.copy(i.angularVelocity))
                : (s.hasAngularVelocity = !1),
              this.dispatchEvent(ia))),
          l && t.hand)
        ) {
          a = !0
          for (const i of t.hand.values()) {
            const t = e.getJointPose(i, n)
            if (void 0 === l.joints[i.jointName]) {
              const t = new na()
              ;(t.matrixAutoUpdate = !1), (t.visible = !1), (l.joints[i.jointName] = t), l.add(t)
            }
            const r = l.joints[i.jointName]
            null !== t &&
              (r.matrix.fromArray(t.transform.matrix),
              r.matrix.decompose(r.position, r.rotation, r.scale),
              (r.jointRadius = t.radius)),
              (r.visible = null !== t)
          }
          const i = l.joints['index-finger-tip'],
            r = l.joints['thumb-tip'],
            s = i.position.distanceTo(r.position),
            o = 0.02,
            c = 0.005
          l.inputState.pinching && s > o + c
            ? ((l.inputState.pinching = !1),
              this.dispatchEvent({ type: 'pinchend', handedness: t.handedness, target: this }))
            : !l.inputState.pinching &&
              s <= o - c &&
              ((l.inputState.pinching = !0),
              this.dispatchEvent({ type: 'pinchstart', handedness: t.handedness, target: this }))
        } else
          null !== o &&
            t.gripSpace &&
            ((r = e.getPose(t.gripSpace, n)),
            null !== r &&
              (o.matrix.fromArray(r.transform.matrix),
              o.matrix.decompose(o.position, o.rotation, o.scale),
              r.linearVelocity
                ? ((o.hasLinearVelocity = !0), o.linearVelocity.copy(r.linearVelocity))
                : (o.hasLinearVelocity = !1),
              r.angularVelocity
                ? ((o.hasAngularVelocity = !0), o.angularVelocity.copy(r.angularVelocity))
                : (o.hasAngularVelocity = !1)))
      return (
        null !== s && (s.visible = null !== i),
        null !== o && (o.visible = null !== r),
        null !== l && (l.visible = null !== a),
        this
      )
    }
  }
  class aa extends yn {
    constructor(t, e, n, i, r, a, s, o, l, h) {
      if ((h = void 0 !== h ? h : x) !== x && h !== M)
        throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat')
      void 0 === n && h === x && (n = p),
        void 0 === n && h === M && (n = v),
        super(null, i, r, a, s, o, h, n, l),
        (this.image = { width: t, height: e }),
        (this.magFilter = void 0 !== s ? s : c),
        (this.minFilter = void 0 !== o ? o : c),
        (this.flipY = !1),
        (this.generateMipmaps = !1)
    }
  }
  aa.prototype.isDepthTexture = !0
  class sa extends At {
    constructor(t, e) {
      super()
      const n = this
      let i = null,
        r = 1,
        a = null,
        s = 'local-floor'
      const o = t.extensions.has('WEBGL_multisampled_render_to_texture')
      let l = null,
        c = null,
        h = null,
        u = null,
        m = !1,
        f = null
      const g = e.getContextAttributes()
      let y = null,
        S = null
      const b = [],
        w = new Map(),
        T = new Tn()
      T.layers.enable(1), (T.viewport = new wt())
      const L = new Tn()
      L.layers.enable(2), (L.viewport = new wt())
      const A = [T, L],
        C = new ea()
      C.layers.enable(1), C.layers.enable(2)
      let D = null,
        R = null
      function P(t) {
        const e = w.get(t.inputSource)
        e && e.dispatchEvent({ type: t.type, data: t.inputSource })
      }
      function I() {
        w.forEach(function (t, e) {
          t.disconnect(e)
        }),
          w.clear(),
          (D = null),
          (R = null),
          t.setRenderTarget(y),
          (u = null),
          (h = null),
          (c = null),
          (i = null),
          (S = null),
          G.stop(),
          (n.isPresenting = !1),
          n.dispatchEvent({ type: 'sessionend' })
      }
      function N(t) {
        const e = i.inputSources
        for (let t = 0; t < b.length; t++) w.set(e[t], b[t])
        for (let e = 0; e < t.removed.length; e++) {
          const n = t.removed[e],
            i = w.get(n)
          i && (i.dispatchEvent({ type: 'disconnected', data: n }), w.delete(n))
        }
        for (let e = 0; e < t.added.length; e++) {
          const n = t.added[e],
            i = w.get(n)
          i && i.dispatchEvent({ type: 'connected', data: n })
        }
      }
      ;(this.cameraAutoUpdate = !0),
        (this.enabled = !1),
        (this.isPresenting = !1),
        (this.getController = function (t) {
          let e = b[t]
          return void 0 === e && ((e = new ra()), (b[t] = e)), e.getTargetRaySpace()
        }),
        (this.getControllerGrip = function (t) {
          let e = b[t]
          return void 0 === e && ((e = new ra()), (b[t] = e)), e.getGripSpace()
        }),
        (this.getHand = function (t) {
          let e = b[t]
          return void 0 === e && ((e = new ra()), (b[t] = e)), e.getHandSpace()
        }),
        (this.setFramebufferScaleFactor = function (t) {
          ;(r = t),
            !0 === n.isPresenting &&
              console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.')
        }),
        (this.setReferenceSpaceType = function (t) {
          ;(s = t),
            !0 === n.isPresenting &&
              console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.')
        }),
        (this.getReferenceSpace = function () {
          return a
        }),
        (this.getBaseLayer = function () {
          return null !== h ? h : u
        }),
        (this.getBinding = function () {
          return c
        }),
        (this.getFrame = function () {
          return f
        }),
        (this.getSession = function () {
          return i
        }),
        (this.setSession = async function (l) {
          if (((i = l), null !== i)) {
            if (
              ((y = t.getRenderTarget()),
              i.addEventListener('select', P),
              i.addEventListener('selectstart', P),
              i.addEventListener('selectend', P),
              i.addEventListener('squeeze', P),
              i.addEventListener('squeezestart', P),
              i.addEventListener('squeezeend', P),
              i.addEventListener('end', I),
              i.addEventListener('inputsourceschange', N),
              !0 !== g.xrCompatible && (await e.makeXRCompatible()),
              void 0 === i.renderState.layers || !1 === t.capabilities.isWebGL2)
            ) {
              const n = {
                antialias: void 0 !== i.renderState.layers || g.antialias,
                alpha: g.alpha,
                depth: g.depth,
                stencil: g.stencil,
                framebufferScaleFactor: r,
              }
              ;(u = new XRWebGLLayer(i, e, n)),
                i.updateRenderState({ baseLayer: u }),
                (S = new bn(u.framebufferWidth, u.framebufferHeight, {
                  format: _,
                  type: d,
                  encoding: t.outputEncoding,
                }))
            } else {
              m = g.antialias
              let n = null,
                a = null,
                s = null
              g.depth && ((s = g.stencil ? 35056 : 33190), (n = g.stencil ? M : x), (a = g.stencil ? v : p))
              const l = { colorFormat: t.outputEncoding === E ? 35907 : 32856, depthFormat: s, scaleFactor: r }
              ;(c = new XRWebGLBinding(i, e)),
                (h = c.createProjectionLayer(l)),
                i.updateRenderState({ layers: [h] }),
                (S = m
                  ? new ci(h.textureWidth, h.textureHeight, {
                      format: _,
                      type: d,
                      depthTexture: new aa(
                        h.textureWidth,
                        h.textureHeight,
                        a,
                        void 0,
                        void 0,
                        void 0,
                        void 0,
                        void 0,
                        void 0,
                        n
                      ),
                      stencilBuffer: g.stencil,
                      ignoreDepth: h.ignoreDepthValues,
                      useRenderToTexture: o,
                      encoding: t.outputEncoding,
                    })
                  : new bn(h.textureWidth, h.textureHeight, {
                      format: _,
                      type: d,
                      depthTexture: new aa(
                        h.textureWidth,
                        h.textureHeight,
                        a,
                        void 0,
                        void 0,
                        void 0,
                        void 0,
                        void 0,
                        void 0,
                        n
                      ),
                      stencilBuffer: g.stencil,
                      ignoreDepth: h.ignoreDepthValues,
                      encoding: t.outputEncoding,
                    }))
            }
            ;(S.isXRRenderTarget = !0),
              this.setFoveation(1),
              (a = await i.requestReferenceSpace(s)),
              G.setContext(i),
              G.start(),
              (n.isPresenting = !0),
              n.dispatchEvent({ type: 'sessionstart' })
          }
        })
      const z = new B(),
        O = new B()
      function U(t, e) {
        null === e ? t.matrixWorld.copy(t.matrix) : t.matrixWorld.multiplyMatrices(e.matrixWorld, t.matrix),
          t.matrixWorldInverse.copy(t.matrixWorld).invert()
      }
      ;(this.updateCamera = function (t) {
        if (null === i) return
        ;(C.near = L.near = T.near = t.near),
          (C.far = L.far = T.far = t.far),
          (D === C.near && R === C.far) ||
            (i.updateRenderState({ depthNear: C.near, depthFar: C.far }), (D = C.near), (R = C.far))
        const e = t.parent,
          n = C.cameras
        U(C, e)
        for (let t = 0; t < n.length; t++) U(n[t], e)
        C.matrixWorld.decompose(C.position, C.quaternion, C.scale),
          t.position.copy(C.position),
          t.quaternion.copy(C.quaternion),
          t.scale.copy(C.scale),
          t.matrix.copy(C.matrix),
          t.matrixWorld.copy(C.matrixWorld)
        const r = t.children
        for (let t = 0, e = r.length; t < e; t++) r[t].updateMatrixWorld(!0)
        2 === n.length
          ? (function (t, e, n) {
              z.setFromMatrixPosition(e.matrixWorld), O.setFromMatrixPosition(n.matrixWorld)
              const i = z.distanceTo(O),
                r = e.projectionMatrix.elements,
                a = n.projectionMatrix.elements,
                s = r[14] / (r[10] - 1),
                o = r[14] / (r[10] + 1),
                l = (r[9] + 1) / r[5],
                c = (r[9] - 1) / r[5],
                h = (r[8] - 1) / r[0],
                u = (a[8] + 1) / a[0],
                d = s * h,
                p = s * u,
                m = i / (-h + u),
                f = m * -h
              e.matrixWorld.decompose(t.position, t.quaternion, t.scale),
                t.translateX(f),
                t.translateZ(m),
                t.matrixWorld.compose(t.position, t.quaternion, t.scale),
                t.matrixWorldInverse.copy(t.matrixWorld).invert()
              const g = s + m,
                v = o + m,
                _ = d - f,
                x = p + (i - f),
                M = ((l * o) / v) * g,
                y = ((c * o) / v) * g
              t.projectionMatrix.makePerspective(_, x, M, y, g, v)
            })(C, T, L)
          : C.projectionMatrix.copy(T.projectionMatrix)
      }),
        (this.getCamera = function () {
          return C
        }),
        (this.getFoveation = function () {
          return null !== h ? h.fixedFoveation : null !== u ? u.fixedFoveation : void 0
        }),
        (this.setFoveation = function (t) {
          null !== h && (h.fixedFoveation = t), null !== u && void 0 !== u.fixedFoveation && (u.fixedFoveation = t)
        })
      let F = null
      const G = new Tt()
      G.setAnimationLoop(function (e, n) {
        if (((l = n.getViewerPose(a)), (f = n), null !== l)) {
          const e = l.views
          null !== u && (t.setRenderTargetFramebuffer(S, u.framebuffer), t.setRenderTarget(S))
          let n = !1
          e.length !== C.cameras.length && ((C.cameras.length = 0), (n = !0))
          for (let i = 0; i < e.length; i++) {
            const r = e[i]
            let a = null
            if (null !== u) a = u.getViewport(r)
            else {
              const e = c.getViewSubImage(h, r)
              ;(a = e.viewport),
                0 === i &&
                  (t.setRenderTargetTextures(S, e.colorTexture, h.ignoreDepthValues ? void 0 : e.depthStencilTexture),
                  t.setRenderTarget(S))
            }
            const s = A[i]
            s.matrix.fromArray(r.transform.matrix),
              s.projectionMatrix.fromArray(r.projectionMatrix),
              s.viewport.set(a.x, a.y, a.width, a.height),
              0 === i && C.matrix.copy(s.matrix),
              !0 === n && C.cameras.push(s)
          }
        }
        const r = i.inputSources
        for (let t = 0; t < b.length; t++) {
          const e = b[t],
            i = r[t]
          e.update(i, n, a)
        }
        F && F(e, n), (f = null)
      }),
        (this.setAnimationLoop = function (t) {
          F = t
        }),
        (this.dispose = function () {})
    }
  }
  function oa(t) {
    function e(e, n) {
      ;(e.opacity.value = n.opacity),
        n.color && e.diffuse.value.copy(n.color),
        n.emissive && e.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity),
        n.map && (e.map.value = n.map),
        n.alphaMap && (e.alphaMap.value = n.alphaMap),
        n.specularMap && (e.specularMap.value = n.specularMap),
        n.alphaTest > 0 && (e.alphaTest.value = n.alphaTest)
      const i = t.get(n).envMap
      let r, a
      i &&
        ((e.envMap.value = i),
        (e.flipEnvMap.value = i.isCubeTexture && !1 === i.isRenderTargetTexture ? -1 : 1),
        (e.reflectivity.value = n.reflectivity),
        (e.ior.value = n.ior),
        (e.refractionRatio.value = n.refractionRatio)),
        n.lightMap && ((e.lightMap.value = n.lightMap), (e.lightMapIntensity.value = n.lightMapIntensity)),
        n.aoMap && ((e.aoMap.value = n.aoMap), (e.aoMapIntensity.value = n.aoMapIntensity)),
        n.map
          ? (r = n.map)
          : n.specularMap
          ? (r = n.specularMap)
          : n.displacementMap
          ? (r = n.displacementMap)
          : n.normalMap
          ? (r = n.normalMap)
          : n.bumpMap
          ? (r = n.bumpMap)
          : n.roughnessMap
          ? (r = n.roughnessMap)
          : n.metalnessMap
          ? (r = n.metalnessMap)
          : n.alphaMap
          ? (r = n.alphaMap)
          : n.emissiveMap
          ? (r = n.emissiveMap)
          : n.clearcoatMap
          ? (r = n.clearcoatMap)
          : n.clearcoatNormalMap
          ? (r = n.clearcoatNormalMap)
          : n.clearcoatRoughnessMap
          ? (r = n.clearcoatRoughnessMap)
          : n.specularIntensityMap
          ? (r = n.specularIntensityMap)
          : n.specularColorMap
          ? (r = n.specularColorMap)
          : n.transmissionMap
          ? (r = n.transmissionMap)
          : n.thicknessMap
          ? (r = n.thicknessMap)
          : n.sheenColorMap
          ? (r = n.sheenColorMap)
          : n.sheenRoughnessMap && (r = n.sheenRoughnessMap),
        void 0 !== r &&
          (r.isWebGLRenderTarget && (r = r.texture),
          !0 === r.matrixAutoUpdate && r.updateMatrix(),
          e.uvTransform.value.copy(r.matrix)),
        n.aoMap ? (a = n.aoMap) : n.lightMap && (a = n.lightMap),
        void 0 !== a &&
          (a.isWebGLRenderTarget && (a = a.texture),
          !0 === a.matrixAutoUpdate && a.updateMatrix(),
          e.uv2Transform.value.copy(a.matrix))
    }
    function n(e, n) {
      ;(e.roughness.value = n.roughness),
        (e.metalness.value = n.metalness),
        n.roughnessMap && (e.roughnessMap.value = n.roughnessMap),
        n.metalnessMap && (e.metalnessMap.value = n.metalnessMap),
        n.emissiveMap && (e.emissiveMap.value = n.emissiveMap),
        n.bumpMap &&
          ((e.bumpMap.value = n.bumpMap), (e.bumpScale.value = n.bumpScale), 1 === n.side && (e.bumpScale.value *= -1)),
        n.normalMap &&
          ((e.normalMap.value = n.normalMap),
          e.normalScale.value.copy(n.normalScale),
          1 === n.side && e.normalScale.value.negate()),
        n.displacementMap &&
          ((e.displacementMap.value = n.displacementMap),
          (e.displacementScale.value = n.displacementScale),
          (e.displacementBias.value = n.displacementBias))
      t.get(n).envMap && (e.envMapIntensity.value = n.envMapIntensity)
    }
    return {
      refreshFogUniforms: function (t, e) {
        t.fogColor.value.copy(e.color),
          e.isFog
            ? ((t.fogNear.value = e.near), (t.fogFar.value = e.far))
            : e.isFogExp2 && (t.fogDensity.value = e.density)
      },
      refreshMaterialUniforms: function (t, i, r, a, s) {
        i.isMeshBasicMaterial
          ? e(t, i)
          : i.isMeshLambertMaterial
          ? (e(t, i),
            (function (t, e) {
              e.emissiveMap && (t.emissiveMap.value = e.emissiveMap)
            })(t, i))
          : i.isMeshToonMaterial
          ? (e(t, i),
            (function (t, e) {
              e.gradientMap && (t.gradientMap.value = e.gradientMap)
              e.emissiveMap && (t.emissiveMap.value = e.emissiveMap)
              e.bumpMap &&
                ((t.bumpMap.value = e.bumpMap),
                (t.bumpScale.value = e.bumpScale),
                1 === e.side && (t.bumpScale.value *= -1))
              e.normalMap &&
                ((t.normalMap.value = e.normalMap),
                t.normalScale.value.copy(e.normalScale),
                1 === e.side && t.normalScale.value.negate())
              e.displacementMap &&
                ((t.displacementMap.value = e.displacementMap),
                (t.displacementScale.value = e.displacementScale),
                (t.displacementBias.value = e.displacementBias))
            })(t, i))
          : i.isMeshPhongMaterial
          ? (e(t, i),
            (function (t, e) {
              t.specular.value.copy(e.specular),
                (t.shininess.value = Math.max(e.shininess, 1e-4)),
                e.emissiveMap && (t.emissiveMap.value = e.emissiveMap)
              e.bumpMap &&
                ((t.bumpMap.value = e.bumpMap),
                (t.bumpScale.value = e.bumpScale),
                1 === e.side && (t.bumpScale.value *= -1))
              e.normalMap &&
                ((t.normalMap.value = e.normalMap),
                t.normalScale.value.copy(e.normalScale),
                1 === e.side && t.normalScale.value.negate())
              e.displacementMap &&
                ((t.displacementMap.value = e.displacementMap),
                (t.displacementScale.value = e.displacementScale),
                (t.displacementBias.value = e.displacementBias))
            })(t, i))
          : i.isMeshStandardMaterial
          ? (e(t, i),
            i.isMeshPhysicalMaterial
              ? (function (t, e, i) {
                  n(t, e),
                    (t.ior.value = e.ior),
                    e.sheen > 0 &&
                      (t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen),
                      (t.sheenRoughness.value = e.sheenRoughness),
                      e.sheenColorMap && (t.sheenColorMap.value = e.sheenColorMap),
                      e.sheenRoughnessMap && (t.sheenRoughnessMap.value = e.sheenRoughnessMap))
                  e.clearcoat > 0 &&
                    ((t.clearcoat.value = e.clearcoat),
                    (t.clearcoatRoughness.value = e.clearcoatRoughness),
                    e.clearcoatMap && (t.clearcoatMap.value = e.clearcoatMap),
                    e.clearcoatRoughnessMap && (t.clearcoatRoughnessMap.value = e.clearcoatRoughnessMap),
                    e.clearcoatNormalMap &&
                      (t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),
                      (t.clearcoatNormalMap.value = e.clearcoatNormalMap),
                      1 === e.side && t.clearcoatNormalScale.value.negate()))
                  e.transmission > 0 &&
                    ((t.transmission.value = e.transmission),
                    (t.transmissionSamplerMap.value = i.texture),
                    t.transmissionSamplerSize.value.set(i.width, i.height),
                    e.transmissionMap && (t.transmissionMap.value = e.transmissionMap),
                    (t.thickness.value = e.thickness),
                    e.thicknessMap && (t.thicknessMap.value = e.thicknessMap),
                    (t.attenuationDistance.value = e.attenuationDistance),
                    t.attenuationColor.value.copy(e.attenuationColor))
                  ;(t.specularIntensity.value = e.specularIntensity),
                    t.specularColor.value.copy(e.specularColor),
                    e.specularIntensityMap && (t.specularIntensityMap.value = e.specularIntensityMap)
                  e.specularColorMap && (t.specularColorMap.value = e.specularColorMap)
                })(t, i, s)
              : n(t, i))
          : i.isMeshMatcapMaterial
          ? (e(t, i),
            (function (t, e) {
              e.matcap && (t.matcap.value = e.matcap)
              e.bumpMap &&
                ((t.bumpMap.value = e.bumpMap),
                (t.bumpScale.value = e.bumpScale),
                1 === e.side && (t.bumpScale.value *= -1))
              e.normalMap &&
                ((t.normalMap.value = e.normalMap),
                t.normalScale.value.copy(e.normalScale),
                1 === e.side && t.normalScale.value.negate())
              e.displacementMap &&
                ((t.displacementMap.value = e.displacementMap),
                (t.displacementScale.value = e.displacementScale),
                (t.displacementBias.value = e.displacementBias))
            })(t, i))
          : i.isMeshDepthMaterial
          ? (e(t, i),
            (function (t, e) {
              e.displacementMap &&
                ((t.displacementMap.value = e.displacementMap),
                (t.displacementScale.value = e.displacementScale),
                (t.displacementBias.value = e.displacementBias))
            })(t, i))
          : i.isMeshDistanceMaterial
          ? (e(t, i),
            (function (t, e) {
              e.displacementMap &&
                ((t.displacementMap.value = e.displacementMap),
                (t.displacementScale.value = e.displacementScale),
                (t.displacementBias.value = e.displacementBias))
              t.referencePosition.value.copy(e.referencePosition),
                (t.nearDistance.value = e.nearDistance),
                (t.farDistance.value = e.farDistance)
            })(t, i))
          : i.isMeshNormalMaterial
          ? (e(t, i),
            (function (t, e) {
              e.bumpMap &&
                ((t.bumpMap.value = e.bumpMap),
                (t.bumpScale.value = e.bumpScale),
                1 === e.side && (t.bumpScale.value *= -1))
              e.normalMap &&
                ((t.normalMap.value = e.normalMap),
                t.normalScale.value.copy(e.normalScale),
                1 === e.side && t.normalScale.value.negate())
              e.displacementMap &&
                ((t.displacementMap.value = e.displacementMap),
                (t.displacementScale.value = e.displacementScale),
                (t.displacementBias.value = e.displacementBias))
            })(t, i))
          : i.isLineBasicMaterial
          ? ((function (t, e) {
              t.diffuse.value.copy(e.color), (t.opacity.value = e.opacity)
            })(t, i),
            i.isLineDashedMaterial &&
              (function (t, e) {
                ;(t.dashSize.value = e.dashSize),
                  (t.totalSize.value = e.dashSize + e.gapSize),
                  (t.scale.value = e.scale)
              })(t, i))
          : i.isPointsMaterial
          ? (function (t, e, n, i) {
              t.diffuse.value.copy(e.color),
                (t.opacity.value = e.opacity),
                (t.size.value = e.size * n),
                (t.scale.value = 0.5 * i),
                e.map && (t.map.value = e.map)
              e.alphaMap && (t.alphaMap.value = e.alphaMap)
              e.alphaTest > 0 && (t.alphaTest.value = e.alphaTest)
              let r
              e.map ? (r = e.map) : e.alphaMap && (r = e.alphaMap)
              void 0 !== r && (!0 === r.matrixAutoUpdate && r.updateMatrix(), t.uvTransform.value.copy(r.matrix))
            })(t, i, r, a)
          : i.isSpriteMaterial
          ? (function (t, e) {
              t.diffuse.value.copy(e.color),
                (t.opacity.value = e.opacity),
                (t.rotation.value = e.rotation),
                e.map && (t.map.value = e.map)
              e.alphaMap && (t.alphaMap.value = e.alphaMap)
              e.alphaTest > 0 && (t.alphaTest.value = e.alphaTest)
              let n
              e.map ? (n = e.map) : e.alphaMap && (n = e.alphaMap)
              void 0 !== n && (!0 === n.matrixAutoUpdate && n.updateMatrix(), t.uvTransform.value.copy(n.matrix))
            })(t, i)
          : i.isShadowMaterial
          ? (t.color.value.copy(i.color), (t.opacity.value = i.opacity))
          : i.isShaderMaterial && (i.uniformsNeedUpdate = !1)
      },
    }
  }
  function la(t = {}) {
    const e =
        void 0 !== t.canvas
          ? t.canvas
          : (function () {
              const t = oe('canvas')
              return (t.style.display = 'block'), t
            })(),
      n = void 0 !== t.context ? t.context : null,
      i = void 0 !== t.alpha && t.alpha,
      r = void 0 === t.depth || t.depth,
      a = void 0 === t.stencil || t.stencil,
      s = void 0 !== t.antialias && t.antialias,
      l = void 0 === t.premultipliedAlpha || t.premultipliedAlpha,
      h = void 0 !== t.preserveDrawingBuffer && t.preserveDrawingBuffer,
      p = void 0 !== t.powerPreference ? t.powerPreference : 'default',
      m = void 0 !== t.failIfMajorPerformanceCaveat && t.failIfMajorPerformanceCaveat
    let v = null,
      x = null
    const M = [],
      y = []
    ;(this.domElement = e),
      (this.debug = { checkShaderErrors: !0 }),
      (this.autoClear = !0),
      (this.autoClearColor = !0),
      (this.autoClearDepth = !0),
      (this.autoClearStencil = !0),
      (this.sortObjects = !0),
      (this.clippingPlanes = []),
      (this.localClippingEnabled = !1),
      (this.outputEncoding = T),
      (this.physicallyCorrectLights = !1),
      (this.toneMapping = 0),
      (this.toneMappingExposure = 1)
    const S = this
    let b = !1,
      w = 0,
      E = 0,
      L = null,
      A = -1,
      C = null
    const D = new wt(),
      R = new wt()
    let P = null,
      I = e.width,
      N = e.height,
      z = 1,
      O = null,
      U = null
    const F = new wt(0, 0, I, N),
      G = new wt(0, 0, I, N)
    let H = !1
    const V = new ft()
    let k = !1,
      W = !1,
      j = null
    const q = new gt(),
      X = new B(),
      Y = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 }
    function Z() {
      return null === L ? z : 1
    }
    let J,
      K,
      Q,
      $,
      tt,
      et,
      nt,
      it,
      rt,
      at,
      st,
      ot,
      lt,
      ct,
      ht,
      ut,
      dt,
      pt,
      mt,
      vt,
      _t,
      xt,
      Mt,
      yt = n
    function St(t, n) {
      for (let i = 0; i < t.length; i++) {
        const r = t[i],
          a = e.getContext(r, n)
        if (null !== a) return a
      }
      return null
    }
    try {
      const t = {
        alpha: !0,
        depth: r,
        stencil: a,
        antialias: s,
        premultipliedAlpha: l,
        preserveDrawingBuffer: h,
        powerPreference: p,
        failIfMajorPerformanceCaveat: m,
      }
      if (
        ('setAttribute' in e && e.setAttribute('data-engine', 'three.js r137dev'),
        e.addEventListener('webglcontextlost', At, !1),
        e.addEventListener('webglcontextrestored', Ct, !1),
        null === yt)
      ) {
        const e = ['webgl2', 'webgl', 'experimental-webgl']
        if ((!0 === S.isWebGL1Renderer && e.shift(), (yt = St(e, t)), null === yt))
          throw St(e)
            ? new Error('Error creating WebGL context with your selected attributes.')
            : new Error('Error creating WebGL context.')
      }
      void 0 === yt.getShaderPrecisionFormat &&
        (yt.getShaderPrecisionFormat = function () {
          return { rangeMin: 1, rangeMax: 1, precision: 1 }
        })
    } catch (t) {
      throw (console.error('THREE.WebGLRenderer: ' + t.message), t)
    }
    function bt() {
      ;(J = new ti(yt)),
        (K = new gn(yt, J, t)),
        J.init(K),
        (xt = new ta(yt, J, K)),
        (Q = new Qr(yt, J, K)),
        ($ = new ii(yt)),
        (tt = new Fr()),
        (et = new $r(yt, J, Q, tt, K, xt, $)),
        (nt = new Dn(S)),
        (it = new $n(S)),
        (rt = new Et(yt, K)),
        (Mt = new mn(yt, J, rt, K)),
        (at = new ei(yt, rt, $, Mt)),
        (st = new hi(yt, at, rt, $)),
        (mt = new li(yt, K, et)),
        (ut = new vn(tt)),
        (ot = new Ur(S, nt, it, J, K, Mt, ut)),
        (lt = new oa(tt)),
        (ct = new Vr()),
        (ht = new Yr(J, K)),
        (pt = new pn(S, nt, Q, st, i, l)),
        (dt = new Kr(S, st, K)),
        (vt = new fn(yt, J, $, K)),
        (_t = new ni(yt, J, $, K)),
        ($.programs = ot.programs),
        (S.capabilities = K),
        (S.extensions = J),
        (S.properties = tt),
        (S.renderLists = ct),
        (S.shadowMap = dt),
        (S.state = Q),
        (S.info = $)
    }
    bt()
    const Lt = new sa(S, yt)
    function At(t) {
      t.preventDefault(), console.log('THREE.WebGLRenderer: Context Lost.'), (b = !0)
    }
    function Ct() {
      console.log('THREE.WebGLRenderer: Context Restored.'), (b = !1)
      const t = $.autoReset,
        e = dt.enabled,
        n = dt.autoUpdate,
        i = dt.needsUpdate,
        r = dt.type
      bt(), ($.autoReset = t), (dt.enabled = e), (dt.autoUpdate = n), (dt.needsUpdate = i), (dt.type = r)
    }
    function Dt(t) {
      const e = t.target
      e.removeEventListener('dispose', Dt),
        (function (t) {
          ;(function (t) {
            const e = tt.get(t).programs
            void 0 !== e &&
              (e.forEach(function (t) {
                ot.releaseProgram(t)
              }),
              t.isShaderMaterial && ot.releaseShaderCache(t))
          })(t),
            tt.remove(t)
        })(e)
    }
    ;(this.xr = Lt),
      (this.getContext = function () {
        return yt
      }),
      (this.getContextAttributes = function () {
        return yt.getContextAttributes()
      }),
      (this.forceContextLoss = function () {
        const t = J.get('WEBGL_lose_context')
        t && t.loseContext()
      }),
      (this.forceContextRestore = function () {
        const t = J.get('WEBGL_lose_context')
        t && t.restoreContext()
      }),
      (this.getPixelRatio = function () {
        return z
      }),
      (this.setPixelRatio = function (t) {
        void 0 !== t && ((z = t), this.setSize(I, N, !1))
      }),
      (this.getSize = function (t) {
        return t.set(I, N)
      }),
      (this.setSize = function (t, n, i) {
        Lt.isPresenting
          ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.")
          : ((I = t),
            (N = n),
            (e.width = Math.floor(t * z)),
            (e.height = Math.floor(n * z)),
            !1 !== i && ((e.style.width = t + 'px'), (e.style.height = n + 'px')),
            this.setViewport(0, 0, t, n))
      }),
      (this.getDrawingBufferSize = function (t) {
        return t.set(I * z, N * z).floor()
      }),
      (this.setDrawingBufferSize = function (t, n, i) {
        ;(I = t),
          (N = n),
          (z = i),
          (e.width = Math.floor(t * i)),
          (e.height = Math.floor(n * i)),
          this.setViewport(0, 0, t, n)
      }),
      (this.getCurrentViewport = function (t) {
        return t.copy(D)
      }),
      (this.getViewport = function (t) {
        return t.copy(F)
      }),
      (this.setViewport = function (t, e, n, i) {
        t.isVector4 ? F.set(t.x, t.y, t.z, t.w) : F.set(t, e, n, i), Q.viewport(D.copy(F).multiplyScalar(z).floor())
      }),
      (this.getScissor = function (t) {
        return t.copy(G)
      }),
      (this.setScissor = function (t, e, n, i) {
        t.isVector4 ? G.set(t.x, t.y, t.z, t.w) : G.set(t, e, n, i), Q.scissor(R.copy(G).multiplyScalar(z).floor())
      }),
      (this.getScissorTest = function () {
        return H
      }),
      (this.setScissorTest = function (t) {
        Q.setScissorTest((H = t))
      }),
      (this.setOpaqueSort = function (t) {
        O = t
      }),
      (this.setTransparentSort = function (t) {
        U = t
      }),
      (this.getClearColor = function (t) {
        return t.copy(pt.getClearColor())
      }),
      (this.setClearColor = function () {
        pt.setClearColor.apply(pt, arguments)
      }),
      (this.getClearAlpha = function () {
        return pt.getClearAlpha()
      }),
      (this.setClearAlpha = function () {
        pt.setClearAlpha.apply(pt, arguments)
      }),
      (this.clear = function (t, e, n) {
        let i = 0
        ;(void 0 === t || t) && (i |= 16384),
          (void 0 === e || e) && (i |= 256),
          (void 0 === n || n) && (i |= 1024),
          yt.clear(i)
      }),
      (this.clearColor = function () {
        this.clear(!0, !1, !1)
      }),
      (this.clearDepth = function () {
        this.clear(!1, !0, !1)
      }),
      (this.clearStencil = function () {
        this.clear(!1, !1, !0)
      }),
      (this.dispose = function () {
        e.removeEventListener('webglcontextlost', At, !1),
          e.removeEventListener('webglcontextrestored', Ct, !1),
          ct.dispose(),
          ht.dispose(),
          tt.dispose(),
          nt.dispose(),
          it.dispose(),
          st.dispose(),
          Mt.dispose(),
          ot.dispose(),
          Lt.dispose(),
          Lt.removeEventListener('sessionstart', Pt),
          Lt.removeEventListener('sessionend', It),
          j && (j.dispose(), (j = null)),
          Nt.stop()
      }),
      (this.renderBufferDirect = function (t, e, n, i, r, a) {
        null === e && (e = Y)
        const s = r.isMesh && r.matrixWorld.determinant() < 0,
          o = (function (t, e, n, i, r) {
            !0 !== e.isScene && (e = Y)
            et.resetTextureUnits()
            const a = e.fog,
              s = i.isMeshStandardMaterial ? e.environment : null,
              o = null === L ? S.outputEncoding : !0 === L.isXRRenderTarget ? L.texture.encoding : T,
              l = (i.isMeshStandardMaterial ? it : nt).get(i.envMap || s),
              c = !0 === i.vertexColors && !!n.attributes.color && 4 === n.attributes.color.itemSize,
              h = !!i.normalMap && !!n.attributes.tangent,
              u = !!n.morphAttributes.position,
              d = !!n.morphAttributes.normal,
              p = n.morphAttributes.position ? n.morphAttributes.position.length : 0,
              m = i.toneMapped ? S.toneMapping : 0,
              f = tt.get(i),
              g = x.state.lights
            if (!0 === k && (!0 === W || t !== C)) {
              const e = t === C && i.id === A
              ut.setState(i, t, e)
            }
            let v = !1
            i.version === f.__version
              ? (f.needsLights && f.lightsStateVersion !== g.state.version) ||
                f.outputEncoding !== o ||
                (r.isInstancedMesh && !1 === f.instancing)
                ? (v = !0)
                : r.isInstancedMesh || !0 !== f.instancing
                ? r.isSkinnedMesh && !1 === f.skinning
                  ? (v = !0)
                  : r.isSkinnedMesh || !0 !== f.skinning
                  ? f.envMap !== l || (i.fog && f.fog !== a)
                    ? (v = !0)
                    : void 0 === f.numClippingPlanes ||
                      (f.numClippingPlanes === ut.numPlanes && f.numIntersection === ut.numIntersection)
                    ? (f.vertexAlphas !== c ||
                        f.vertexTangents !== h ||
                        f.morphTargets !== u ||
                        f.morphNormals !== d ||
                        f.toneMapping !== m ||
                        (!0 === K.isWebGL2 && f.morphTargetsCount !== p)) &&
                      (v = !0)
                    : (v = !0)
                  : (v = !0)
                : (v = !0)
              : ((v = !0), (f.__version = i.version))
            let _ = f.currentProgram
            !0 === v && (_ = Bt(i, e, r))
            let M = !1,
              y = !1,
              b = !1
            const w = _.getUniforms(),
              E = f.uniforms
            Q.useProgram(_.program) && ((M = !0), (y = !0), (b = !0))
            i.id !== A && ((A = i.id), (y = !0))
            if (M || C !== t) {
              if (
                (w.setValue(yt, 'projectionMatrix', t.projectionMatrix),
                K.logarithmicDepthBuffer && w.setValue(yt, 'logDepthBufFC', 2 / (Math.log(t.far + 1) / Math.LN2)),
                C !== t && ((C = t), (y = !0), (b = !0)),
                i.isShaderMaterial ||
                  i.isMeshPhongMaterial ||
                  i.isMeshToonMaterial ||
                  i.isMeshStandardMaterial ||
                  i.envMap)
              ) {
                const e = w.map.cameraPosition
                void 0 !== e && e.setValue(yt, X.setFromMatrixPosition(t.matrixWorld))
              }
              ;(i.isMeshPhongMaterial ||
                i.isMeshToonMaterial ||
                i.isMeshLambertMaterial ||
                i.isMeshBasicMaterial ||
                i.isMeshStandardMaterial ||
                i.isShaderMaterial) &&
                w.setValue(yt, 'isOrthographic', !0 === t.isOrthographicCamera),
                (i.isMeshPhongMaterial ||
                  i.isMeshToonMaterial ||
                  i.isMeshLambertMaterial ||
                  i.isMeshBasicMaterial ||
                  i.isMeshStandardMaterial ||
                  i.isShaderMaterial ||
                  i.isShadowMaterial ||
                  r.isSkinnedMesh) &&
                  w.setValue(yt, 'viewMatrix', t.matrixWorldInverse)
            }
            if (r.isSkinnedMesh) {
              w.setOptional(yt, r, 'bindMatrix'), w.setOptional(yt, r, 'bindMatrixInverse')
              const t = r.skeleton
              t &&
                (K.floatVertexTextures
                  ? (null === t.boneTexture && t.computeBoneTexture(),
                    w.setValue(yt, 'boneTexture', t.boneTexture, et),
                    w.setValue(yt, 'boneTextureSize', t.boneTextureSize))
                  : w.setOptional(yt, t, 'boneMatrices'))
            }
            !n ||
              (void 0 === n.morphAttributes.position && void 0 === n.morphAttributes.normal) ||
              mt.update(r, n, i, _)
            ;(y || f.receiveShadow !== r.receiveShadow) &&
              ((f.receiveShadow = r.receiveShadow), w.setValue(yt, 'receiveShadow', r.receiveShadow))
            y &&
              (w.setValue(yt, 'toneMappingExposure', S.toneMappingExposure),
              f.needsLights &&
                ((R = b),
                ((D = E).ambientLightColor.needsUpdate = R),
                (D.lightProbe.needsUpdate = R),
                (D.directionalLights.needsUpdate = R),
                (D.directionalLightShadows.needsUpdate = R),
                (D.pointLights.needsUpdate = R),
                (D.pointLightShadows.needsUpdate = R),
                (D.spotLights.needsUpdate = R),
                (D.spotLightShadows.needsUpdate = R),
                (D.rectAreaLights.needsUpdate = R),
                (D.hemisphereLights.needsUpdate = R)),
              a && i.fog && lt.refreshFogUniforms(E, a),
              lt.refreshMaterialUniforms(E, i, z, N, j),
              fr.upload(yt, f.uniformsList, E, et))
            var D, R
            i.isShaderMaterial &&
              !0 === i.uniformsNeedUpdate &&
              (fr.upload(yt, f.uniformsList, E, et), (i.uniformsNeedUpdate = !1))
            i.isSpriteMaterial && w.setValue(yt, 'center', r.center)
            return (
              w.setValue(yt, 'modelViewMatrix', r.modelViewMatrix),
              w.setValue(yt, 'normalMatrix', r.normalMatrix),
              w.setValue(yt, 'modelMatrix', r.matrixWorld),
              _
            )
          })(t, e, n, i, r)
        Q.setMaterial(i, s)
        let l = n.index
        const c = n.attributes.position
        if (null === l) {
          if (void 0 === c || 0 === c.count) return
        } else if (0 === l.count) return
        let h,
          u = 1
        !0 === i.wireframe && ((l = at.getWireframeAttribute(n)), (u = 2)), Mt.setup(r, i, o, n, l)
        let d = vt
        null !== l && ((h = rt.get(l)), (d = _t), d.setIndex(h))
        const p = null !== l ? l.count : c.count,
          m = n.drawRange.start * u,
          f = n.drawRange.count * u,
          g = null !== a ? a.start * u : 0,
          v = null !== a ? a.count * u : 1 / 0,
          _ = Math.max(m, g),
          M = Math.min(p, m + f, g + v) - 1,
          y = Math.max(0, M - _ + 1)
        if (0 !== y) {
          if (r.isMesh) !0 === i.wireframe ? (Q.setLineWidth(i.wireframeLinewidth * Z()), d.setMode(1)) : d.setMode(4)
          else if (r.isLine) {
            let t = i.linewidth
            void 0 === t && (t = 1),
              Q.setLineWidth(t * Z()),
              r.isLineSegments ? d.setMode(1) : r.isLineLoop ? d.setMode(2) : d.setMode(3)
          } else r.isPoints ? d.setMode(0) : r.isSprite && d.setMode(4)
          if (r.isInstancedMesh) d.renderInstances(_, y, r.count)
          else if (n.isInstancedBufferGeometry) {
            const t = Math.min(n.instanceCount, n._maxInstanceCount)
            d.renderInstances(_, y, t)
          } else d.render(_, y)
        }
      }),
      (this.compile = function (t, e) {
        ;(x = ht.get(t)),
          x.init(),
          y.push(x),
          t.traverseVisible(function (t) {
            t.isLight && t.layers.test(e.layers) && (x.pushLight(t), t.castShadow && x.pushShadow(t))
          }),
          x.setupLights(S.physicallyCorrectLights),
          t.traverse(function (e) {
            const n = e.material
            if (n)
              if (Array.isArray(n))
                for (let i = 0; i < n.length; i++) {
                  Bt(n[i], t, e)
                }
              else Bt(n, t, e)
          }),
          y.pop(),
          (x = null)
      })
    let Rt = null
    function Pt() {
      Nt.stop()
    }
    function It() {
      Nt.start()
    }
    const Nt = new Tt()
    function zt(t, e, n, i) {
      if (!1 === t.visible) return
      if (t.layers.test(e.layers))
        if (t.isGroup) n = t.renderOrder
        else if (t.isLOD) !0 === t.autoUpdate && t.update(e)
        else if (t.isLight) x.pushLight(t), t.castShadow && x.pushShadow(t)
        else if (t.isSprite) {
          if (!t.frustumCulled || V.intersectsSprite(t)) {
            i && X.setFromMatrixPosition(t.matrixWorld).applyMatrix4(q)
            const e = st.update(t),
              r = t.material
            r.visible && v.push(t, e, r, n, X.z, null)
          }
        } else if (
          (t.isMesh || t.isLine || t.isPoints) &&
          (t.isSkinnedMesh &&
            t.skeleton.frame !== $.render.frame &&
            (t.skeleton.update(), (t.skeleton.frame = $.render.frame)),
          !t.frustumCulled || V.intersectsObject(t))
        ) {
          i && X.setFromMatrixPosition(t.matrixWorld).applyMatrix4(q)
          const e = st.update(t),
            r = t.material
          if (Array.isArray(r)) {
            const i = e.groups
            for (let a = 0, s = i.length; a < s; a++) {
              const s = i[a],
                o = r[s.materialIndex]
              o && o.visible && v.push(t, e, o, n, X.z, s)
            }
          } else r.visible && v.push(t, e, r, n, X.z, null)
        }
      const r = t.children
      for (let t = 0, a = r.length; t < a; t++) zt(r[t], e, n, i)
    }
    function Ot(t, e, n, i) {
      const r = t.opaque,
        a = t.transmissive,
        l = t.transparent
      x.setupLightsView(n),
        a.length > 0 &&
          (function (t, e, n) {
            if (null === j) {
              const t = !0 === s && !0 === K.isWebGL2
              j = new (t ? ci : bn)(1024, 1024, {
                generateMipmaps: !0,
                type: null !== xt.convert(g) ? g : d,
                minFilter: u,
                magFilter: c,
                wrapS: o,
                wrapT: o,
                useRenderToTexture: J.has('WEBGL_multisampled_render_to_texture'),
              })
            }
            const i = S.getRenderTarget()
            S.setRenderTarget(j), S.clear()
            const r = S.toneMapping
            ;(S.toneMapping = 0),
              Ut(t, e, n),
              (S.toneMapping = r),
              et.updateMultisampleRenderTarget(j),
              et.updateRenderTargetMipmap(j),
              S.setRenderTarget(i)
          })(r, e, n),
        i && Q.viewport(D.copy(i)),
        r.length > 0 && Ut(r, e, n),
        a.length > 0 && Ut(a, e, n),
        l.length > 0 && Ut(l, e, n)
    }
    function Ut(t, e, n) {
      const i = !0 === e.isScene ? e.overrideMaterial : null
      for (let r = 0, a = t.length; r < a; r++) {
        const a = t[r],
          s = a.object,
          o = a.geometry,
          l = null === i ? a.material : i,
          c = a.group
        s.layers.test(n.layers) && Ft(s, e, n, o, l, c)
      }
    }
    function Ft(t, e, n, i, r, a) {
      t.onBeforeRender(S, e, n, i, r, a),
        t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse, t.matrixWorld),
        t.normalMatrix.getNormalMatrix(t.modelViewMatrix),
        r.onBeforeRender(S, e, n, i, t, a),
        !0 === r.transparent && 2 === r.side
          ? ((r.side = 1),
            (r.needsUpdate = !0),
            S.renderBufferDirect(n, e, i, r, t, a),
            (r.side = 0),
            (r.needsUpdate = !0),
            S.renderBufferDirect(n, e, i, r, t, a),
            (r.side = 2))
          : S.renderBufferDirect(n, e, i, r, t, a),
        t.onAfterRender(S, e, n, i, r, a)
    }
    function Bt(t, e, n) {
      !0 !== e.isScene && (e = Y)
      const i = tt.get(t),
        r = x.state.lights,
        a = x.state.shadowsArray,
        s = r.state.version,
        o = ot.getParameters(t, r.state, a, e, n),
        l = ot.getProgramCacheKey(o)
      let c = i.programs
      ;(i.environment = t.isMeshStandardMaterial ? e.environment : null),
        (i.fog = e.fog),
        (i.envMap = (t.isMeshStandardMaterial ? it : nt).get(t.envMap || i.environment)),
        void 0 === c && (t.addEventListener('dispose', Dt), (c = new Map()), (i.programs = c))
      let h = c.get(l)
      if (void 0 !== h) {
        if (i.currentProgram === h && i.lightsStateVersion === s) return Gt(t, o), h
      } else (o.uniforms = ot.getUniforms(t)), t.onBuild(n, o, S), t.onBeforeCompile(o, S), (h = ot.acquireProgram(o, l)), c.set(l, h), (i.uniforms = o.uniforms)
      const u = i.uniforms
      ;((t.isShaderMaterial || t.isRawShaderMaterial) && !0 !== t.clipping) || (u.clippingPlanes = ut.uniform),
        Gt(t, o),
        (i.needsLights = (function (t) {
          return (
            t.isMeshLambertMaterial ||
            t.isMeshToonMaterial ||
            t.isMeshPhongMaterial ||
            t.isMeshStandardMaterial ||
            t.isShadowMaterial ||
            (t.isShaderMaterial && !0 === t.lights)
          )
        })(t)),
        (i.lightsStateVersion = s),
        i.needsLights &&
          ((u.ambientLightColor.value = r.state.ambient),
          (u.lightProbe.value = r.state.probe),
          (u.directionalLights.value = r.state.directional),
          (u.directionalLightShadows.value = r.state.directionalShadow),
          (u.spotLights.value = r.state.spot),
          (u.spotLightShadows.value = r.state.spotShadow),
          (u.rectAreaLights.value = r.state.rectArea),
          (u.ltc_1.value = r.state.rectAreaLTC1),
          (u.ltc_2.value = r.state.rectAreaLTC2),
          (u.pointLights.value = r.state.point),
          (u.pointLightShadows.value = r.state.pointShadow),
          (u.hemisphereLights.value = r.state.hemi),
          (u.directionalShadowMap.value = r.state.directionalShadowMap),
          (u.directionalShadowMatrix.value = r.state.directionalShadowMatrix),
          (u.spotShadowMap.value = r.state.spotShadowMap),
          (u.spotShadowMatrix.value = r.state.spotShadowMatrix),
          (u.pointShadowMap.value = r.state.pointShadowMap),
          (u.pointShadowMatrix.value = r.state.pointShadowMatrix))
      const d = h.getUniforms(),
        p = fr.seqWithValue(d.seq, u)
      return (i.currentProgram = h), (i.uniformsList = p), h
    }
    function Gt(t, e) {
      const n = tt.get(t)
      ;(n.outputEncoding = e.outputEncoding),
        (n.instancing = e.instancing),
        (n.skinning = e.skinning),
        (n.morphTargets = e.morphTargets),
        (n.morphNormals = e.morphNormals),
        (n.morphTargetsCount = e.morphTargetsCount),
        (n.numClippingPlanes = e.numClippingPlanes),
        (n.numIntersection = e.numClipIntersection),
        (n.vertexAlphas = e.vertexAlphas),
        (n.vertexTangents = e.vertexTangents),
        (n.toneMapping = e.toneMapping)
    }
    Nt.setAnimationLoop(function (t) {
      Rt && Rt(t)
    }),
      'undefined' != typeof window && Nt.setContext(window),
      (this.setAnimationLoop = function (t) {
        ;(Rt = t), Lt.setAnimationLoop(t), null === t ? Nt.stop() : Nt.start()
      }),
      Lt.addEventListener('sessionstart', Pt),
      Lt.addEventListener('sessionend', It),
      (this.render = function (t, e) {
        if (void 0 !== e && !0 !== e.isCamera)
          return void console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.')
        if (!0 === b) return
        !0 === t.autoUpdate && t.updateMatrixWorld(),
          null === e.parent && e.updateMatrixWorld(),
          !0 === Lt.enabled &&
            !0 === Lt.isPresenting &&
            (!0 === Lt.cameraAutoUpdate && Lt.updateCamera(e), (e = Lt.getCamera())),
          !0 === t.isScene && t.onBeforeRender(S, t, e, L),
          (x = ht.get(t, y.length)),
          x.init(),
          y.push(x),
          q.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse),
          V.setFromProjectionMatrix(q),
          (W = this.localClippingEnabled),
          (k = ut.init(this.clippingPlanes, W, e)),
          (v = ct.get(t, M.length)),
          v.init(),
          M.push(v),
          zt(t, e, 0, S.sortObjects),
          v.finish(),
          !0 === S.sortObjects && v.sort(O, U),
          !0 === k && ut.beginShadows()
        const n = x.state.shadowsArray
        if (
          (dt.render(n, t, e),
          !0 === k && ut.endShadows(),
          !0 === this.info.autoReset && this.info.reset(),
          pt.render(v, t),
          x.setupLights(S.physicallyCorrectLights),
          e.isArrayCamera)
        ) {
          const n = e.cameras
          for (let e = 0, i = n.length; e < i; e++) {
            const i = n[e]
            Ot(v, t, i, i.viewport)
          }
        } else Ot(v, t, e)
        null !== L && (et.updateMultisampleRenderTarget(L), et.updateRenderTargetMipmap(L)),
          !0 === t.isScene && t.onAfterRender(S, t, e),
          Q.buffers.depth.setTest(!0),
          Q.buffers.depth.setMask(!0),
          Q.buffers.color.setMask(!0),
          Q.setPolygonOffset(!1),
          Mt.resetDefaultState(),
          (A = -1),
          (C = null),
          y.pop(),
          (x = y.length > 0 ? y[y.length - 1] : null),
          M.pop(),
          (v = M.length > 0 ? M[M.length - 1] : null)
      }),
      (this.getActiveCubeFace = function () {
        return w
      }),
      (this.getActiveMipmapLevel = function () {
        return E
      }),
      (this.getRenderTarget = function () {
        return L
      }),
      (this.setRenderTargetTextures = function (t, e, n) {
        ;(tt.get(t.texture).__webglTexture = e), (tt.get(t.depthTexture).__webglTexture = n)
        const i = tt.get(t)
        ;(i.__hasExternalTextures = !0),
          i.__hasExternalTextures &&
            ((i.__autoAllocateDepthBuffer = void 0 === n),
            i.__autoAllocateDepthBuffer ||
              (t.useRenderToTexture &&
                (console.warn('render-to-texture extension was disabled because an external texture was provided'),
                (t.useRenderToTexture = !1),
                (t.useRenderbuffer = !0))))
      }),
      (this.setRenderTargetFramebuffer = function (t, e) {
        const n = tt.get(t)
        ;(n.__webglFramebuffer = e), (n.__useDefaultFramebuffer = void 0 === e)
      }),
      (this.setRenderTarget = function (t, e = 0, n = 0) {
        ;(L = t), (w = e), (E = n)
        let i = !0
        if (t) {
          const e = tt.get(t)
          void 0 !== e.__useDefaultFramebuffer
            ? (Q.bindFramebuffer(36160, null), (i = !1))
            : void 0 === e.__webglFramebuffer
            ? et.setupRenderTarget(t)
            : e.__hasExternalTextures &&
              et.rebindTextures(t, tt.get(t.texture).__webglTexture, tt.get(t.depthTexture).__webglTexture)
        }
        let r = null,
          a = !1,
          s = !1
        if (t) {
          const n = t.texture
          ;(n.isDataTexture3D || n.isDataTexture2DArray) && (s = !0)
          const i = tt.get(t).__webglFramebuffer
          t.isWebGLCubeRenderTarget
            ? ((r = i[e]), (a = !0))
            : (r = t.useRenderbuffer ? tt.get(t).__webglMultisampledFramebuffer : i),
            D.copy(t.viewport),
            R.copy(t.scissor),
            (P = t.scissorTest)
        } else D.copy(F).multiplyScalar(z).floor(), R.copy(G).multiplyScalar(z).floor(), (P = H)
        if (
          (Q.bindFramebuffer(36160, r) && K.drawBuffers && i && Q.drawBuffers(t, r),
          Q.viewport(D),
          Q.scissor(R),
          Q.setScissorTest(P),
          a)
        ) {
          const i = tt.get(t.texture)
          yt.framebufferTexture2D(36160, 36064, 34069 + e, i.__webglTexture, n)
        } else if (s) {
          const i = tt.get(t.texture),
            r = e || 0
          yt.framebufferTextureLayer(36160, 36064, i.__webglTexture, n || 0, r)
        }
        A = -1
      }),
      (this.readRenderTargetPixels = function (t, e, n, i, r, a, s) {
        if (!t || !t.isWebGLRenderTarget)
          return void console.error(
            'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.'
          )
        let o = tt.get(t).__webglFramebuffer
        if ((t.isWebGLCubeRenderTarget && void 0 !== s && (o = o[s]), o)) {
          Q.bindFramebuffer(36160, o)
          try {
            const s = t.texture,
              o = s.format,
              l = s.type
            if (o !== _ && xt.convert(o) !== yt.getParameter(35739))
              return void console.error(
                'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.'
              )
            const c =
              l === g && (J.has('EXT_color_buffer_half_float') || (K.isWebGL2 && J.has('EXT_color_buffer_float')))
            if (
              !(
                l === d ||
                xt.convert(l) === yt.getParameter(35738) ||
                (l === f && (K.isWebGL2 || J.has('OES_texture_float') || J.has('WEBGL_color_buffer_float'))) ||
                c
              )
            )
              return void console.error(
                'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.'
              )
            36053 === yt.checkFramebufferStatus(36160)
              ? e >= 0 &&
                e <= t.width - i &&
                n >= 0 &&
                n <= t.height - r &&
                yt.readPixels(e, n, i, r, xt.convert(o), xt.convert(l), a)
              : console.error(
                  'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.'
                )
          } finally {
            const t = null !== L ? tt.get(L).__webglFramebuffer : null
            Q.bindFramebuffer(36160, t)
          }
        }
      }),
      (this.copyFramebufferToTexture = function (t, e, n = 0) {
        if (!0 !== e.isFramebufferTexture)
          return void console.error(
            'THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.'
          )
        const i = Math.pow(2, -n),
          r = Math.floor(e.image.width * i),
          a = Math.floor(e.image.height * i)
        et.setTexture2D(e, 0), yt.copyTexSubImage2D(3553, n, 0, 0, t.x, t.y, r, a), Q.unbindTexture()
      }),
      (this.copyTextureToTexture = function (t, e, n, i = 0) {
        const r = e.image.width,
          a = e.image.height,
          s = xt.convert(n.format),
          o = xt.convert(n.type)
        et.setTexture2D(n, 0),
          yt.pixelStorei(37440, n.flipY),
          yt.pixelStorei(37441, n.premultiplyAlpha),
          yt.pixelStorei(3317, n.unpackAlignment),
          e.isDataTexture
            ? yt.texSubImage2D(3553, i, t.x, t.y, r, a, s, o, e.image.data)
            : e.isCompressedTexture
            ? yt.compressedTexSubImage2D(
                3553,
                i,
                t.x,
                t.y,
                e.mipmaps[0].width,
                e.mipmaps[0].height,
                s,
                e.mipmaps[0].data
              )
            : yt.texSubImage2D(3553, i, t.x, t.y, s, o, e.image),
          0 === i && n.generateMipmaps && yt.generateMipmap(3553),
          Q.unbindTexture()
      }),
      (this.copyTextureToTexture3D = function (t, e, n, i, r = 0) {
        if (S.isWebGL1Renderer)
          return void console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.')
        const a = t.max.x - t.min.x + 1,
          s = t.max.y - t.min.y + 1,
          o = t.max.z - t.min.z + 1,
          l = xt.convert(i.format),
          c = xt.convert(i.type)
        let h
        if (i.isDataTexture3D) et.setTexture3D(i, 0), (h = 32879)
        else {
          if (!i.isDataTexture2DArray)
            return void console.warn(
              'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.'
            )
          et.setTexture2DArray(i, 0), (h = 35866)
        }
        yt.pixelStorei(37440, i.flipY),
          yt.pixelStorei(37441, i.premultiplyAlpha),
          yt.pixelStorei(3317, i.unpackAlignment)
        const u = yt.getParameter(3314),
          d = yt.getParameter(32878),
          p = yt.getParameter(3316),
          m = yt.getParameter(3315),
          f = yt.getParameter(32877),
          g = n.isCompressedTexture ? n.mipmaps[0] : n.image
        yt.pixelStorei(3314, g.width),
          yt.pixelStorei(32878, g.height),
          yt.pixelStorei(3316, t.min.x),
          yt.pixelStorei(3315, t.min.y),
          yt.pixelStorei(32877, t.min.z),
          n.isDataTexture || n.isDataTexture3D
            ? yt.texSubImage3D(h, r, e.x, e.y, e.z, a, s, o, l, c, g.data)
            : n.isCompressedTexture
            ? (console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.'),
              yt.compressedTexSubImage3D(h, r, e.x, e.y, e.z, a, s, o, l, g.data))
            : yt.texSubImage3D(h, r, e.x, e.y, e.z, a, s, o, l, c, g),
          yt.pixelStorei(3314, u),
          yt.pixelStorei(32878, d),
          yt.pixelStorei(3316, p),
          yt.pixelStorei(3315, m),
          yt.pixelStorei(32877, f),
          0 === r && i.generateMipmaps && yt.generateMipmap(h),
          Q.unbindTexture()
      }),
      (this.initTexture = function (t) {
        et.setTexture2D(t, 0), Q.unbindTexture()
      }),
      (this.resetState = function () {
        ;(w = 0), (E = 0), (L = null), Q.reset(), Mt.reset()
      }),
      'undefined' != typeof __THREE_DEVTOOLS__ &&
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', { detail: this }))
  }
  la.prototype.isWebGLRenderer = !0
  class ca extends ae {
    constructor() {
      super(),
        (this.type = 'Scene'),
        (this.background = null),
        (this.environment = null),
        (this.fog = null),
        (this.overrideMaterial = null),
        (this.autoUpdate = !0),
        'undefined' != typeof __THREE_DEVTOOLS__ &&
          __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', { detail: this }))
    }
    copy(t, e) {
      return (
        super.copy(t, e),
        null !== t.background && (this.background = t.background.clone()),
        null !== t.environment && (this.environment = t.environment.clone()),
        null !== t.fog && (this.fog = t.fog.clone()),
        null !== t.overrideMaterial && (this.overrideMaterial = t.overrideMaterial.clone()),
        (this.autoUpdate = t.autoUpdate),
        (this.matrixAutoUpdate = t.matrixAutoUpdate),
        this
      )
    }
    toJSON(t) {
      const e = super.toJSON(t)
      return null !== this.fog && (e.object.fog = this.fog.toJSON()), e
    }
  }
  ;(ca.prototype.isScene = !0), new B(), new B(), new B(), new Ve(), new B()
  ;(class extends xe {
    constructor(t) {
      super(), (this.type = 'ShadowMaterial'), (this.color = new zt(0)), (this.transparent = !0), this.setValues(t)
    }
    copy(t) {
      return super.copy(t), this.color.copy(t.color), this
    }
  }.prototype.isShadowMaterial = !0)
  ;(class extends xe {
    constructor(t) {
      super(),
        (this.type = 'SpriteMaterial'),
        (this.color = new zt(16777215)),
        (this.map = null),
        (this.alphaMap = null),
        (this.rotation = 0),
        (this.sizeAttenuation = !0),
        (this.transparent = !0),
        this.setValues(t)
    }
    copy(t) {
      return (
        super.copy(t),
        this.color.copy(t.color),
        (this.map = t.map),
        (this.alphaMap = t.alphaMap),
        (this.rotation = t.rotation),
        (this.sizeAttenuation = t.sizeAttenuation),
        this
      )
    }
  }.prototype.isSpriteMaterial = !0)
  ;(class extends xe {
    constructor(t) {
      super(),
        (this.type = 'PointsMaterial'),
        (this.color = new zt(16777215)),
        (this.map = null),
        (this.alphaMap = null),
        (this.size = 1),
        (this.sizeAttenuation = !0),
        this.setValues(t)
    }
    copy(t) {
      return (
        super.copy(t),
        this.color.copy(t.color),
        (this.map = t.map),
        (this.alphaMap = t.alphaMap),
        (this.size = t.size),
        (this.sizeAttenuation = t.sizeAttenuation),
        this
      )
    }
  }.prototype.isPointsMaterial = !0)
  class ha extends xe {
    constructor(t) {
      super(),
        (this.defines = { STANDARD: '' }),
        (this.type = 'MeshStandardMaterial'),
        (this.color = new zt(16777215)),
        (this.roughness = 1),
        (this.metalness = 0),
        (this.map = null),
        (this.lightMap = null),
        (this.lightMapIntensity = 1),
        (this.aoMap = null),
        (this.aoMapIntensity = 1),
        (this.emissive = new zt(0)),
        (this.emissiveIntensity = 1),
        (this.emissiveMap = null),
        (this.bumpMap = null),
        (this.bumpScale = 1),
        (this.normalMap = null),
        (this.normalMapType = 0),
        (this.normalScale = new Lt(1, 1)),
        (this.displacementMap = null),
        (this.displacementScale = 1),
        (this.displacementBias = 0),
        (this.roughnessMap = null),
        (this.metalnessMap = null),
        (this.alphaMap = null),
        (this.envMap = null),
        (this.envMapIntensity = 1),
        (this.refractionRatio = 0.98),
        (this.wireframe = !1),
        (this.wireframeLinewidth = 1),
        (this.wireframeLinecap = 'round'),
        (this.wireframeLinejoin = 'round'),
        (this.flatShading = !1),
        this.setValues(t)
    }
    copy(t) {
      return (
        super.copy(t),
        (this.defines = { STANDARD: '' }),
        this.color.copy(t.color),
        (this.roughness = t.roughness),
        (this.metalness = t.metalness),
        (this.map = t.map),
        (this.lightMap = t.lightMap),
        (this.lightMapIntensity = t.lightMapIntensity),
        (this.aoMap = t.aoMap),
        (this.aoMapIntensity = t.aoMapIntensity),
        this.emissive.copy(t.emissive),
        (this.emissiveMap = t.emissiveMap),
        (this.emissiveIntensity = t.emissiveIntensity),
        (this.bumpMap = t.bumpMap),
        (this.bumpScale = t.bumpScale),
        (this.normalMap = t.normalMap),
        (this.normalMapType = t.normalMapType),
        this.normalScale.copy(t.normalScale),
        (this.displacementMap = t.displacementMap),
        (this.displacementScale = t.displacementScale),
        (this.displacementBias = t.displacementBias),
        (this.roughnessMap = t.roughnessMap),
        (this.metalnessMap = t.metalnessMap),
        (this.alphaMap = t.alphaMap),
        (this.envMap = t.envMap),
        (this.envMapIntensity = t.envMapIntensity),
        (this.refractionRatio = t.refractionRatio),
        (this.wireframe = t.wireframe),
        (this.wireframeLinewidth = t.wireframeLinewidth),
        (this.wireframeLinecap = t.wireframeLinecap),
        (this.wireframeLinejoin = t.wireframeLinejoin),
        (this.flatShading = t.flatShading),
        this
      )
    }
  }
  ha.prototype.isMeshStandardMaterial = !0
  ;(class extends ha {
    constructor(t) {
      super(),
        (this.defines = { STANDARD: '', PHYSICAL: '' }),
        (this.type = 'MeshPhysicalMaterial'),
        (this.clearcoatMap = null),
        (this.clearcoatRoughness = 0),
        (this.clearcoatRoughnessMap = null),
        (this.clearcoatNormalScale = new Lt(1, 1)),
        (this.clearcoatNormalMap = null),
        (this.ior = 1.5),
        Object.defineProperty(this, 'reflectivity', {
          get: function () {
            return N((2.5 * (this.ior - 1)) / (this.ior + 1), 0, 1)
          },
          set: function (t) {
            this.ior = (1 + 0.4 * t) / (1 - 0.4 * t)
          },
        }),
        (this.sheenColor = new zt(0)),
        (this.sheenColorMap = null),
        (this.sheenRoughness = 1),
        (this.sheenRoughnessMap = null),
        (this.transmissionMap = null),
        (this.thickness = 0),
        (this.thicknessMap = null),
        (this.attenuationDistance = 0),
        (this.attenuationColor = new zt(1, 1, 1)),
        (this.specularIntensity = 1),
        (this.specularIntensityMap = null),
        (this.specularColor = new zt(1, 1, 1)),
        (this.specularColorMap = null),
        (this._sheen = 0),
        (this._clearcoat = 0),
        (this._transmission = 0),
        this.setValues(t)
    }
    get sheen() {
      return this._sheen
    }
    set sheen(t) {
      this._sheen > 0 != t > 0 && this.version++, (this._sheen = t)
    }
    get clearcoat() {
      return this._clearcoat
    }
    set clearcoat(t) {
      this._clearcoat > 0 != t > 0 && this.version++, (this._clearcoat = t)
    }
    get transmission() {
      return this._transmission
    }
    set transmission(t) {
      this._transmission > 0 != t > 0 && this.version++, (this._transmission = t)
    }
    copy(t) {
      return (
        super.copy(t),
        (this.defines = { STANDARD: '', PHYSICAL: '' }),
        (this.clearcoat = t.clearcoat),
        (this.clearcoatMap = t.clearcoatMap),
        (this.clearcoatRoughness = t.clearcoatRoughness),
        (this.clearcoatRoughnessMap = t.clearcoatRoughnessMap),
        (this.clearcoatNormalMap = t.clearcoatNormalMap),
        this.clearcoatNormalScale.copy(t.clearcoatNormalScale),
        (this.ior = t.ior),
        (this.sheen = t.sheen),
        this.sheenColor.copy(t.sheenColor),
        (this.sheenColorMap = t.sheenColorMap),
        (this.sheenRoughness = t.sheenRoughness),
        (this.sheenRoughnessMap = t.sheenRoughnessMap),
        (this.transmission = t.transmission),
        (this.transmissionMap = t.transmissionMap),
        (this.thickness = t.thickness),
        (this.thicknessMap = t.thicknessMap),
        (this.attenuationDistance = t.attenuationDistance),
        this.attenuationColor.copy(t.attenuationColor),
        (this.specularIntensity = t.specularIntensity),
        (this.specularIntensityMap = t.specularIntensityMap),
        this.specularColor.copy(t.specularColor),
        (this.specularColorMap = t.specularColorMap),
        this
      )
    }
  }.prototype.isMeshPhysicalMaterial = !0)
  ;(class extends xe {
    constructor(t) {
      super(),
        (this.type = 'MeshPhongMaterial'),
        (this.color = new zt(16777215)),
        (this.specular = new zt(1118481)),
        (this.shininess = 30),
        (this.map = null),
        (this.lightMap = null),
        (this.lightMapIntensity = 1),
        (this.aoMap = null),
        (this.aoMapIntensity = 1),
        (this.emissive = new zt(0)),
        (this.emissiveIntensity = 1),
        (this.emissiveMap = null),
        (this.bumpMap = null),
        (this.bumpScale = 1),
        (this.normalMap = null),
        (this.normalMapType = 0),
        (this.normalScale = new Lt(1, 1)),
        (this.displacementMap = null),
        (this.displacementScale = 1),
        (this.displacementBias = 0),
        (this.specularMap = null),
        (this.alphaMap = null),
        (this.envMap = null),
        (this.combine = 0),
        (this.reflectivity = 1),
        (this.refractionRatio = 0.98),
        (this.wireframe = !1),
        (this.wireframeLinewidth = 1),
        (this.wireframeLinecap = 'round'),
        (this.wireframeLinejoin = 'round'),
        (this.flatShading = !1),
        this.setValues(t)
    }
    copy(t) {
      return (
        super.copy(t),
        this.color.copy(t.color),
        this.specular.copy(t.specular),
        (this.shininess = t.shininess),
        (this.map = t.map),
        (this.lightMap = t.lightMap),
        (this.lightMapIntensity = t.lightMapIntensity),
        (this.aoMap = t.aoMap),
        (this.aoMapIntensity = t.aoMapIntensity),
        this.emissive.copy(t.emissive),
        (this.emissiveMap = t.emissiveMap),
        (this.emissiveIntensity = t.emissiveIntensity),
        (this.bumpMap = t.bumpMap),
        (this.bumpScale = t.bumpScale),
        (this.normalMap = t.normalMap),
        (this.normalMapType = t.normalMapType),
        this.normalScale.copy(t.normalScale),
        (this.displacementMap = t.displacementMap),
        (this.displacementScale = t.displacementScale),
        (this.displacementBias = t.displacementBias),
        (this.specularMap = t.specularMap),
        (this.alphaMap = t.alphaMap),
        (this.envMap = t.envMap),
        (this.combine = t.combine),
        (this.reflectivity = t.reflectivity),
        (this.refractionRatio = t.refractionRatio),
        (this.wireframe = t.wireframe),
        (this.wireframeLinewidth = t.wireframeLinewidth),
        (this.wireframeLinecap = t.wireframeLinecap),
        (this.wireframeLinejoin = t.wireframeLinejoin),
        (this.flatShading = t.flatShading),
        this
      )
    }
  }.prototype.isMeshPhongMaterial = !0)
  ;(class extends xe {
    constructor(t) {
      super(),
        (this.defines = { TOON: '' }),
        (this.type = 'MeshToonMaterial'),
        (this.color = new zt(16777215)),
        (this.map = null),
        (this.gradientMap = null),
        (this.lightMap = null),
        (this.lightMapIntensity = 1),
        (this.aoMap = null),
        (this.aoMapIntensity = 1),
        (this.emissive = new zt(0)),
        (this.emissiveIntensity = 1),
        (this.emissiveMap = null),
        (this.bumpMap = null),
        (this.bumpScale = 1),
        (this.normalMap = null),
        (this.normalMapType = 0),
        (this.normalScale = new Lt(1, 1)),
        (this.displacementMap = null),
        (this.displacementScale = 1),
        (this.displacementBias = 0),
        (this.alphaMap = null),
        (this.wireframe = !1),
        (this.wireframeLinewidth = 1),
        (this.wireframeLinecap = 'round'),
        (this.wireframeLinejoin = 'round'),
        this.setValues(t)
    }
    copy(t) {
      return (
        super.copy(t),
        this.color.copy(t.color),
        (this.map = t.map),
        (this.gradientMap = t.gradientMap),
        (this.lightMap = t.lightMap),
        (this.lightMapIntensity = t.lightMapIntensity),
        (this.aoMap = t.aoMap),
        (this.aoMapIntensity = t.aoMapIntensity),
        this.emissive.copy(t.emissive),
        (this.emissiveMap = t.emissiveMap),
        (this.emissiveIntensity = t.emissiveIntensity),
        (this.bumpMap = t.bumpMap),
        (this.bumpScale = t.bumpScale),
        (this.normalMap = t.normalMap),
        (this.normalMapType = t.normalMapType),
        this.normalScale.copy(t.normalScale),
        (this.displacementMap = t.displacementMap),
        (this.displacementScale = t.displacementScale),
        (this.displacementBias = t.displacementBias),
        (this.alphaMap = t.alphaMap),
        (this.wireframe = t.wireframe),
        (this.wireframeLinewidth = t.wireframeLinewidth),
        (this.wireframeLinecap = t.wireframeLinecap),
        (this.wireframeLinejoin = t.wireframeLinejoin),
        this
      )
    }
  }.prototype.isMeshToonMaterial = !0)
  ;(class extends xe {
    constructor(t) {
      super(),
        (this.type = 'MeshNormalMaterial'),
        (this.bumpMap = null),
        (this.bumpScale = 1),
        (this.normalMap = null),
        (this.normalMapType = 0),
        (this.normalScale = new Lt(1, 1)),
        (this.displacementMap = null),
        (this.displacementScale = 1),
        (this.displacementBias = 0),
        (this.wireframe = !1),
        (this.wireframeLinewidth = 1),
        (this.fog = !1),
        (this.flatShading = !1),
        this.setValues(t)
    }
    copy(t) {
      return (
        super.copy(t),
        (this.bumpMap = t.bumpMap),
        (this.bumpScale = t.bumpScale),
        (this.normalMap = t.normalMap),
        (this.normalMapType = t.normalMapType),
        this.normalScale.copy(t.normalScale),
        (this.displacementMap = t.displacementMap),
        (this.displacementScale = t.displacementScale),
        (this.displacementBias = t.displacementBias),
        (this.wireframe = t.wireframe),
        (this.wireframeLinewidth = t.wireframeLinewidth),
        (this.flatShading = t.flatShading),
        this
      )
    }
  }.prototype.isMeshNormalMaterial = !0)
  ;(class extends xe {
    constructor(t) {
      super(),
        (this.type = 'MeshLambertMaterial'),
        (this.color = new zt(16777215)),
        (this.map = null),
        (this.lightMap = null),
        (this.lightMapIntensity = 1),
        (this.aoMap = null),
        (this.aoMapIntensity = 1),
        (this.emissive = new zt(0)),
        (this.emissiveIntensity = 1),
        (this.emissiveMap = null),
        (this.specularMap = null),
        (this.alphaMap = null),
        (this.envMap = null),
        (this.combine = 0),
        (this.reflectivity = 1),
        (this.refractionRatio = 0.98),
        (this.wireframe = !1),
        (this.wireframeLinewidth = 1),
        (this.wireframeLinecap = 'round'),
        (this.wireframeLinejoin = 'round'),
        this.setValues(t)
    }
    copy(t) {
      return (
        super.copy(t),
        this.color.copy(t.color),
        (this.map = t.map),
        (this.lightMap = t.lightMap),
        (this.lightMapIntensity = t.lightMapIntensity),
        (this.aoMap = t.aoMap),
        (this.aoMapIntensity = t.aoMapIntensity),
        this.emissive.copy(t.emissive),
        (this.emissiveMap = t.emissiveMap),
        (this.emissiveIntensity = t.emissiveIntensity),
        (this.specularMap = t.specularMap),
        (this.alphaMap = t.alphaMap),
        (this.envMap = t.envMap),
        (this.combine = t.combine),
        (this.reflectivity = t.reflectivity),
        (this.refractionRatio = t.refractionRatio),
        (this.wireframe = t.wireframe),
        (this.wireframeLinewidth = t.wireframeLinewidth),
        (this.wireframeLinecap = t.wireframeLinecap),
        (this.wireframeLinejoin = t.wireframeLinejoin),
        this
      )
    }
  }.prototype.isMeshLambertMaterial = !0)
  ;(class extends xe {
    constructor(t) {
      super(),
        (this.defines = { MATCAP: '' }),
        (this.type = 'MeshMatcapMaterial'),
        (this.color = new zt(16777215)),
        (this.matcap = null),
        (this.map = null),
        (this.bumpMap = null),
        (this.bumpScale = 1),
        (this.normalMap = null),
        (this.normalMapType = 0),
        (this.normalScale = new Lt(1, 1)),
        (this.displacementMap = null),
        (this.displacementScale = 1),
        (this.displacementBias = 0),
        (this.alphaMap = null),
        (this.flatShading = !1),
        this.setValues(t)
    }
    copy(t) {
      return (
        super.copy(t),
        (this.defines = { MATCAP: '' }),
        this.color.copy(t.color),
        (this.matcap = t.matcap),
        (this.map = t.map),
        (this.bumpMap = t.bumpMap),
        (this.bumpScale = t.bumpScale),
        (this.normalMap = t.normalMap),
        (this.normalMapType = t.normalMapType),
        this.normalScale.copy(t.normalScale),
        (this.displacementMap = t.displacementMap),
        (this.displacementScale = t.displacementScale),
        (this.displacementBias = t.displacementBias),
        (this.alphaMap = t.alphaMap),
        (this.flatShading = t.flatShading),
        this
      )
    }
  }.prototype.isMeshMatcapMaterial = !0)
  class ua extends xe {
    constructor(t) {
      super(),
        (this.type = 'LineBasicMaterial'),
        (this.color = new zt(16777215)),
        (this.linewidth = 1),
        (this.linecap = 'round'),
        (this.linejoin = 'round'),
        this.setValues(t)
    }
    copy(t) {
      return (
        super.copy(t),
        this.color.copy(t.color),
        (this.linewidth = t.linewidth),
        (this.linecap = t.linecap),
        (this.linejoin = t.linejoin),
        this
      )
    }
  }
  ua.prototype.isLineBasicMaterial = !0
  ;(class extends ua {
    constructor(t) {
      super(),
        (this.type = 'LineDashedMaterial'),
        (this.scale = 1),
        (this.dashSize = 3),
        (this.gapSize = 1),
        this.setValues(t)
    }
    copy(t) {
      return super.copy(t), (this.scale = t.scale), (this.dashSize = t.dashSize), (this.gapSize = t.gapSize), this
    }
  }.prototype.isLineDashedMaterial = !0)
  const da = {
    enabled: !1,
    files: {},
    add: function (t, e) {
      !1 !== this.enabled && (this.files[t] = e)
    },
    get: function (t) {
      if (!1 !== this.enabled) return this.files[t]
    },
    remove: function (t) {
      delete this.files[t]
    },
    clear: function () {
      this.files = {}
    },
  }
  const pa = new (class {
    constructor(t, e, n) {
      const i = this
      let r,
        a = !1,
        s = 0,
        o = 0
      const l = []
      ;(this.onStart = void 0),
        (this.onLoad = t),
        (this.onProgress = e),
        (this.onError = n),
        (this.itemStart = function (t) {
          o++, !1 === a && void 0 !== i.onStart && i.onStart(t, s, o), (a = !0)
        }),
        (this.itemEnd = function (t) {
          s++,
            void 0 !== i.onProgress && i.onProgress(t, s, o),
            s === o && ((a = !1), void 0 !== i.onLoad && i.onLoad())
        }),
        (this.itemError = function (t) {
          void 0 !== i.onError && i.onError(t)
        }),
        (this.resolveURL = function (t) {
          return r ? r(t) : t
        }),
        (this.setURLModifier = function (t) {
          return (r = t), this
        }),
        (this.addHandler = function (t, e) {
          return l.push(t, e), this
        }),
        (this.removeHandler = function (t) {
          const e = l.indexOf(t)
          return -1 !== e && l.splice(e, 2), this
        }),
        (this.getHandler = function (t) {
          for (let e = 0, n = l.length; e < n; e += 2) {
            const n = l[e],
              i = l[e + 1]
            if ((n.global && (n.lastIndex = 0), n.test(t))) return i
          }
          return null
        })
    }
  })()
  class ma {
    constructor(t) {
      ;(this.manager = void 0 !== t ? t : pa),
        (this.crossOrigin = 'anonymous'),
        (this.withCredentials = !1),
        (this.path = ''),
        (this.resourcePath = ''),
        (this.requestHeader = {})
    }
    load() {}
    loadAsync(t, e) {
      const n = this
      return new Promise(function (i, r) {
        n.load(t, i, e, r)
      })
    }
    parse() {}
    setCrossOrigin(t) {
      return (this.crossOrigin = t), this
    }
    setWithCredentials(t) {
      return (this.withCredentials = t), this
    }
    setPath(t) {
      return (this.path = t), this
    }
    setResourcePath(t) {
      return (this.resourcePath = t), this
    }
    setRequestHeader(t) {
      return (this.requestHeader = t), this
    }
  }
  class fa extends ma {
    constructor(t) {
      super(t)
    }
    load(t, e, n, i) {
      void 0 !== this.path && (t = this.path + t), (t = this.manager.resolveURL(t))
      const r = this,
        a = da.get(t)
      if (void 0 !== a)
        return (
          r.manager.itemStart(t),
          setTimeout(function () {
            e && e(a), r.manager.itemEnd(t)
          }, 0),
          a
        )
      const s = oe('img')
      function o() {
        c(), da.add(t, this), e && e(this), r.manager.itemEnd(t)
      }
      function l(e) {
        c(), i && i(e), r.manager.itemError(t), r.manager.itemEnd(t)
      }
      function c() {
        s.removeEventListener('load', o, !1), s.removeEventListener('error', l, !1)
      }
      return (
        s.addEventListener('load', o, !1),
        s.addEventListener('error', l, !1),
        'data:' !== t.substr(0, 5) && void 0 !== this.crossOrigin && (s.crossOrigin = this.crossOrigin),
        r.manager.itemStart(t),
        (s.src = t),
        s
      )
    }
  }
  'undefined' != typeof __THREE_DEVTOOLS__ &&
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', { detail: { revision: e } })),
    'undefined' != typeof window &&
      (window.__THREE__
        ? console.warn('WARNING: Multiple instances of Three.js being imported.')
        : (window.__THREE__ = e)),
    (t.Camera = wn),
    (t.Color = zt),
    (t.Mesh = ln),
    (t.PlaneGeometry = ve),
    (t.Scene = ca),
    (t.ShaderMaterial = be),
    (t.TextureLoader = class extends ma {
      constructor(t) {
        super(t)
      }
      load(t, e, n, i) {
        const r = new yn(),
          a = new fa(this.manager)
        return (
          a.setCrossOrigin(this.crossOrigin),
          a.setPath(this.path),
          a.load(
            t,
            function (t) {
              ;(r.image = t), (r.needsUpdate = !0), void 0 !== e && e(r)
            },
            n,
            i
          ),
          r
        )
      }
    }),
    (t.Vector2 = Lt),
    (t.Vector3 = B),
    (t.WebGLRenderer = la),
    Object.defineProperty(t, '__esModule', { value: !0 })
})
